<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!    CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--	web_inst.htm
!!
!!  	18-oct-2010 (ad) added SOAP example; merged with webapp_inst.htm
!!  	03-sep-2010 (hf) updated
!!  	28-oct-2009 (hf) reorganized, clarified
!!  	09-sep-2009 (ac) disambiguation
!!  	24-sep-2008 (kk) copy edit
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../manstyle.css" />


<title>Installing and Running MOE/web</title>
</head>

<body bgcolor="#ffffff">
<a href="../index.htm"><img src="../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Installing and Running MOE/web</h2>
<hr noshade="noshade" />

<ul>
<li><a href="#Overview">Overview</a></li>
<li><a href="#ServerA">Preparing the Web Server</a></li>
    <ul>
    <li><a href="#InstallA">Install MOE</a></li>
    <li><a href="#LicenseA">Validate the License File</a></li>

    <li><a href="#StartA">Start the Web Server</a></li>
    <li><a href="#TestA">Test the Installation</a></li>
    <li><a href="#Stopping">Stopping the Web Server</a></li>
    <li><a href="#Configuring">Configuring</a></li>
    <li><a href="#Examples">Command Line Examples</a></li>
    <li><a href="#AfterStartup">After Startup</a></li>
    </ul>
<li><a href="#Service">Running as a Windows Service</a></li>
<li><a href="#Publish">Creating MOE/web Documents</a>
    <ul>
    <li> <a href="#Header">Headers and Footers</a></li>
    <li> <a href="#Dir">Creating the Application Directory</a></li>

    <li> <a href="#Form">Designing an HTML Input Form</a></li>
    <li> <a href="#Access">Accessing the HTML Form Content in SVL</a></li>
    <li> <a href="#Result">Generating a Result HTML Page</a></li>
    <li> <a href="#Update">Migrating MOE/web 2009.10 and Earlier Applications</a></li>
    </ul>
<li> <a href="#SOAP">SOAP Application Server</a></li>
    <ul>
		<li> <a href="#OpeningPage">Opening Page</a></li>
		<li> <a href="#SOAPPage">SOAP Function Page</a></li>
	  <li> <a href="#WSDLPage">WSDL Page</a></li>
		</ul>
<li> <a href="#SOAPService">Creating a SOAP Web Service</a></li>
<li> <a href="#StatsPage">Statistics Page</a></li>
<li><a href="#SeeAlso">See Also</a>
</ul>

<a name="Overview"><h2>Overview</h2></a>
<p>
MOE/web is a web interface to the batch version of MOE. Its purpose is to
allow widespread access to MOE built-in applications or custom SVL programs via
a web browser.
</p>

<p>The MOE/web server is also a webservice provider introduced with
MOE 2009.10. It offers a framework for building lightweight
browser-based web service applications, and function calls via the Simple Object
Access Protocol (<a href="http://www.w3.org/TR/soap12-part1">SOAP</a>). This protocol can be used to interface MOE to third party software, such as Pipeline Pilot.
</p>

<p>Running the MOE/web application server has no external dependencies, besides
Java and MOE. The amount of configuration required is minimal, and is done using
command line options. The functionality hosted by the server is implemented in
SVL (for SOAP functions). Web applications may also make use of static support
files, e.g. CSS, JavaScript, etc.
</p>

<p>
The following materials are required for the installation of
MOE/web:
</p>

<ul>
    <li> A MOE CD-ROM
    <li> A software key issued by CCG
</ul>


<p>For a brief description of the web applications included as part of
the MOE distribution, please see
<a href="../moe/moeweb_intro.htm">MOE/web Applications</a>.
</p>

<a name="ServerA"><h2>Preparing the Web Server</h2></a>

<a name="InstallA"><h3>Install MOE</h3></a>

For security reasons we recommend installing a copy of MOE on the
computer that will be the web server.  Follow the standard
<a href="install.htm">MOE installation</a>
instructions to copy the distribution files from the MOE CD-ROM into the
directory of your choice. The <tt>MOE</tt> environment variable should
either not set or set to the path to which MOE was just copied.


<a name="LicenseA"><h3>Validate the License File</h3></a>

Follow the instructions on how to install the MOE software keys.  If you
already have a functioning MOE installation, you can copy the existing
<tt>license.dat</tt> file to the newly copied MOE directory.

<a name="StartA"><h3>Start the Web Server</h3></a>


<p>The server can be started from a command line shell, or via a shell or batch
script.
</p>
<p>At the Unix (or Linux or Mac OS X) command line, the simplest way to start
the server is:
</p>
<pre>
    user% <b>/usr/local/moe/bin/moeweb</b>
</pre>

<p>if MOE was installed in the directory <tt>/usr/local/moe</tt>, or:

</p>
<pre>
    user% <b>$MOE/bin/moeweb</b>
</pre>

<p>if the environment variable <tt>MOE</tt> has been set to the MOE
installation directory.
</p>
<p>On Windows, the command line syntax would be:
</p>
<pre>
    C:\> <b>C:\moe\bin\moeweb</b>

</pre>

<p>if MOE was installed in the folder <tt>C:\moe</tt>.
</p>
<p>The file <tt>moeweb</tt> (Unix) or <tt>moeweb.bat</tt> (Windows) is a script.
When run without arguments, the server will start using all default parameters,
which are often sufficient for exploratory use.
</p>
<p>The server itself is implemented in Java, and requires the Sun Java Runtime
1.5 or later. Other versions of Java, such as Gnu Java, distributed by default
with some versions of Linux, may not work correctly. The Java archive
file which contains the server application is
<tt>$MOE/web/MOEWebServer.jar</tt>.

<a name="TestA"><h3>Test the Installation</h3></a>

Assuming you have started the server with the default settings, open a
browser and visit the web page <tt>http://SERVER:8888/</tt> where
<tt>SERVER</tt> is the hostname of the machine on which the web server is
running.  A page with various sample
<a href="../moe/moeweb_intro.htm">MOE/web applications</a>
distributed with MOE will be shown.

If a problem is encountered, consult the
<a href="#Trouble">Common Problems</a> below.
</p>

<h3><a name="Stopping">Stopping the Web Server</a></h3>

<p>The server responds gracefully to operating system kill messages. On Unix,
the <tt>kill</tt> command can be used, from a different session. On Windows, the
task manager can achieve the same effect. On any platform, if the server is
being run from the command line, pressing <tt>Ctrl-C</tt> will send the kill
signal, which will initiate server shutdown.
</p>
<p>When the kill signal is received, the server will close its connections,
release its MOE tokens, delete any temporary files and close the log file.
</p>

<h3><a name="Configuring">Configuring</a></h3>

<p>The list of command line options can be obtained by using the <tt>-help</tt>
argument, e.g.:
</p>
<pre>
    user% <b>$MOE/bin/moeweb -help</b>
</pre>

<table class="titlebar">

<tr>
<th>Switch</th>

<th>Description</th>
</tr>

<tr>
<td valign="top"><tt>&#8209;verbose</tt></td>
<td valign="top">
When set, extra information is output to the log.  This can be useful for
debugging purposes.

</td></tr>

<tr>
<td valign="top"><tt>&#8209;work</tt>&nbsp;<i>#</i></td>
<td valign="top">

The server uses one MOE token per simultaneous task. More tokens means that more
tasks can be serviced simultaneously. The default value is 1. Increasing the
number of tokens allows more users to be serviced at any given time. Also, each
token uses a single thread, so a CPU with multiple cores can be expected to
perform better under heavy loads as additional tokens are added.
</td></tr>
<tr>
<td valign="top">
<tt>&#8209;idlework</tt>&nbsp;<i>#</i><br />
<tt>&#8209;idlewait</tt>&nbsp;<i>#</i>
</td>
<td valign="top">

By default, each of the threads specified by the <tt>-work</tt> argument uses a
token for as long as the server is running. When the <tt>-idlework</tt>

argument is set to a lower number, tokens will be released during periods of
inactivity. A value of 0 means that all tokens will be released, 1 means that
at least one will always be available, etc. The <tt>-idlewait</tt> argument is
used to specify the length of time, in minutes, for which the server must be
idle before tokens are released.

<p>Specifying low values helps to minimize token use, but it increases the
likelihood that a user will be delayed by the time needed to restart MOE. Also,
if a MOE token is needed and none are available, the server will not be able to
increase its ability to cope with the additional demand. In cases where
<tt>-idlewait&nbsp;0</tt> is specified, absence of available tokens means that
the server will not be able to process any requests until a token has become
available.
</p></td></tr>
<tr>
<td valign="top"><tt>&#8209;host</tt>&nbsp;<i>name</i></td>
<td valign="top">

The return-name of the server may be specified. The default name of the host
server will be used as the default, but depending on the network topology, it
may be desirable to specify it explicitly.

</td></tr>
<tr>
<td valign="top"><tt>&#8209;port</tt>&nbsp;<i>#</i></td>
<td valign="top">

The TCP/IP port upon which the server will listen may be specified explicitly.
If not, port 8888 is used.
</td></tr>
<tr>
<td valign="top"><tt>&#8209;load</tt>&nbsp;<i>fn</i></td>
<td valign="top">

The functionality of the server is provided by SVL functions, which are made
available by loading them into each MOE session. By default, the server loads
all files in the <tt>$MOE/lib/svl/soap</tt> directory. Use this argument to add
additional custom functions to the server.


<p>The argument should be repeated for each file to be loaded, e.g.
<span class="nobr">"<tt>-load file1.svl -load file2.svl</tt>"</span>. Non-absolute paths are
considered to be relative to the current working directory.
</p></td></tr>
<tr>
<td valign="top"><tt>&#8209;app</tt>&nbsp;<i>dir</i></td>
<td valign="top">

Non-SOAP style applications - those supported by versions of MOE/web prior
to 2009.10 - are loaded using this option.  Simply provide the path to each
application.  The argument should be repeated for each application to be loaded,
e.g. <span class="nobr">"<tt>-app prog1 -app prog2</tt>"</span>. Non-absolute
paths are considered to be relative to the current working directory.  If
multiple applications are stored in a single parent directory, you may give
that parent directory and all applications found in it will be loaded.  If
no paths are specified, the system will default to whatever is in $MOE/web.

</p></td></tr>
<tr>
<td valign="top"><tt>&#8209;root</tt>&nbsp;<i>dir</i></td>
<td valign="top">

The base location for MOE files may be specified explicitly. By default it is
derived from the location of the original executable.
</td></tr>
<tr>
<td valign="top"><tt>&#8209;arch</tt>&nbsp;<i>code</i></td>
<td valign="top">

The operating system architecture code may be specified explicitly. By default
it is derived automatically.
</td></tr>

<tr>
<td valign="top"><tt>&#8209;lic</tt>&nbsp;<i>fn</i></td>
<td valign="top">

The location of the MOE license file.
</td></tr>
<tr>
<td valign="top"><tt>&#8209;boot</tt>&nbsp;<i>boot</i></td>
<td valign="top">

The MOE SVL boot script may be specified explicitly. By default, it is
<tt>$MOE/lib/boot_web.svl</tt>.

</td></tr>
<tr>
<td valign="top"><tt>&#8209;tmp</tt>&nbsp;<i>dir</i></td>
<td valign="top">

The location for writing temporary files may be specified explicitly. By
default, it is obtained from the operating system.
</td></tr>
<tr>
<td valign="top"><tt>&#8209;perm</tt>&nbsp;<i>dir</i></td>
<td valign="top">

The location for writing semi-permanent files (output of applications) may be
specified explicitly. By default, $MOE/web-usr will be used.  These files
are eventually cleaned up by the server after they 'expire'.
</td></tr>

<tr>
<td valign="top"><tt>&#8209;log</tt>&nbsp;<i>fn</i></td>
<td valign="top">

The server writes a log file for its activity. By default it is directed to the
standard output console, which is equivalent to "<tt>-log&nbsp;-</tt>".
Providing "<tt>-log&nbsp;.</tt>" disables log messages. Specifying an explicit
filename will write log messages to the indicated file.
</td></tr>
<tr>
<td valign="top"><tt>@<i>fn</i></td>

<td valign="top">

Rather than specifying all options on the command line, this syntax can be used
to direct the command line parser to read its arguments from a text file.
Non-absolute path names are considered to be relative to the current directory.

The argument file uses any kind of whitespace to separate individual arguments.
Lines which begin with the <tt>#</tt> character are ignored. Content embedded
between quotation marks (") is considered to be a single argument.
</td></tr>
</table>

<h3><a name="Examples">Command Line Examples</a></h3>

<div class="example">
<h4>Example 1</h4>

<pre>

    user% <b>$MOE/bin/moeweb -work 2 -idlework 1 -idlewait 10</b>
</pre>

<p>All default parameters are used, except that the maximum number of
threads/tokens is 2. After the server has been idle for 10 minutes or longer,
the number of threads/tokens is dropped to 1.
</p>
</div>

<div class="example">
<h4>Example 2</h4>

<pre>
    user% <b>$MOE/bin/moeweb -host foo.bar.com -port 8001</b>

</pre>

<p>The network name and port are specified. In this case, the base URL for
accessing web service features would be <tt>http://foo.bar.com:8001</tt>.
</p>
<h4>Example 3</h4>

<pre>
    user% <b>$MOE/bin/moeweb -lic /usr/local/moe/license.dat \
        -log /usr/local/log/moeweb_log.txt \
        -load customfunc1.svl \
        -load customfunc2.svl \
        -load customfunc3.svl </b>
</pre>

<p>A license file and a log file are specified explicitly. Also, 3 additional
SVL files, located in the current directory, are loaded, in order to provide
additional functionality to the server.

</p>
</div>

<div class="example">
<h4>Example 4</h4>

<pre>
    user% <b>$MOE/bin/moeweb @/usr/local/web/loadfiles.txt</b>
</pre>

<p>where the file <tt>/usr/local/web/loadfiles.txt</tt> contains:

</p>
<pre><b>
    # files to load
    -load /usr/local/web/loadfiles/customfunc1.svl
    -load /usr/local/web/loadfiles/customfunc2.svl
    -load /usr/local/web/loadfiles/customfunc3.svl
    -load "/home/somebody/extra functions.svl"
</b></pre>

<p>In this case all of the arguments are default, except for the extra source
file, which directs the server to load 4 additional SVL files. Note that the
last filename contains a space, so it is surrounded by quotes.
</p>
</div>


<h3><a name="AfterStartup">After Startup</a></h3>

<p>If the log option is enabled, the server will display a summary of the
effective command line options, followed by a variety of diagnostic information.
At least one instance of MOE/batch will be launched, and the list of SOAP
functions and web applications will be obtained and displayed.
</p>
<p>The following output is a representative example for when
<tt>$MOE/bin/moeweb</tt> is run without additional parameters:
</p>

<table cellpadding="10">
<tr>
<td width="100"></td>
<td style="background-color: #E8E8E8;">
<pre>
MOE/web Server (2009.10)
Copyright (c) 2009 Chemical Computing Group, Inc.
All rights reserved.

Effective configuration:
    -work 1
    -host foo.bar.com
    -port 8888
    -root /opt/moe
    -arch lnux
    -boot /opt/moe/lib/boot_web.svl
    -tmp /home/www
    -perm /home/www
    -log -

Waiting on socket.
Hosting on foo.bar.com[127.0.1.1]:8888
Starting worker thread #1
--------------------------
Command execution of MOE:
 /opt/moe/bin-lnux/moebatch -std -boot opt/moe/lib/boot_web.svl\
 -tmp /home/www -bootlog
--------------------------
[#1] LOG: MOE/web 2009.10 (SVL) started Thu Oct 10 15:21:35 2009
[#1] LOG: license file    : '/opt/moe/license.dat'
[#1] LOG: license expires : 01-dec-2009
[#1] LOG: MOE version     : 2009.10
[#1] LOG: MOE arch        : lnux
[#1] LOG: MOE root        : '/opt/moe'
[#1] LOG: MOE tmp         : '/home/www'
[#1] LOG: start cd        : '/home/www'
[#1] LOG: MOE/web (SVL) started successfully
[#1] System message completed: Awake

YellowPages results now available:
       (1): [soap] DataTypes
       (2): [soap] DepictionLayout
       (3): [soap] MedChemProps
       (4): [soap] MolToSMILES
       (5): [soap] SMILESToMol
       (6): [soap] Version
Beginning session monitor thread.
Starting idleness detection thread.
</pre></td></tr></table>

<p>Whenever problems are encountered setting up the server, the initial output
from the server application should be analyzed. Any customer support inquiries
should be accompanied by a copy of the initial log output.
</p>

<!-- ............................. Service ................................ -->

<h2><a name="Service">Running as a Windows Service</a></h2>

<p>On Windows 2000 and higher operating systems, the MOE/web application server
may be run as a Windows Service.  When installed as a service, the MOE/web
server will start automatically when the system is booted, and stay running
until it is explicitly stopped from the Service Control Panel,
which can be opened by launching
&quot;Services&quot; from

<span class="nobr">Windows Control Panel | Administrative Tools</span>.
</p>

<a name="InstallService"></a>
<p>To install the service, you will usually require Administrative privileges.
At a DOS prompt, the following command will perform the installation
(replace <tt><b>C:\moe</b></tt> with the path to your MOE installation):

<pre>
    C:\> <b>C:\moe\bin-i4w9\moewebservice /install</b>
</pre>

<p>You will
be told whether installation succeeded or an error occurred.  If successful,
the service will appear in the Service Control Panel
which lists all
installed services on your computer.  Henceforth the server
will start automatically on reboot.
Errors starting or stopping the service will be written to the
system Event Log (viewable from

<span class="nobr">Control Panel | Administrative Tools</span>).</p>

<p>To remove the service, simply type the following at a DOS prompt:</p>

<pre>
    C:\> <b>C:\moe\bin-i4w9\moewebservice /remove</b>
</pre>

<p>Again, in the above command,
replace <tt><b>C:\moe</b></tt> with the path to your MOE installation.
Before removal,
the service will automatically be stopped if it is running.
You can verify that the service has been removed
by looking in the Service Control Panel; the service will
no longer be listed there.

</p>

<a name="ConfigureService"><h3>Configuring the Windows Service</h3></a>

<p>When the service is executed, the current directory is set to the path
where the <a href="#InstallService">installed</a>
<tt>moewebservice</tt> binary executable resides
(<span class="nobr"><tt>C:\moe\bin-i4w9</tt></span> in
the above example).  It expects to find a
<span class="nobr"><tt>..\web</tt></span> directory relative
to this path (<span class="nobr"><tt>C:\moe\web</tt></span>

in the above example) containing all MOE/web files.
To use the <a href="#Configuring">switches</a> described above (<tt>-perm</tt>,
<tt>-log</tt>, etc.), enter them in a file
named <tt>moewebservice.cfg</tt>, which must reside in the
<span class="nobr"><tt>..\web</tt></span> directory.
An example of this file can be found
in the <tt>$MOE/web</tt> directory.
The switches must be entered one per line.  Non-absolute
path names are considered to be relative to the current directory,
and quotation marks may be used to enclose
paths containing spaces.</p>

<a name="Publish"></a>
<h2>Creating MOE/web Documents</h2>

<ul>
<li> <a href="#Header">Headers and Footers</a></li>
<li> <a href="#Dir">Creating the Application Directory</a></li>
<li> <a href="#Form">Designing an HTML Input Form</a></li>
<li> <a href="#Access">Accessing the HTML Form Content in SVL</a></li>
<li> <a href="#Result">Generating a Result HTML Page</a></li>

</ul>

<p>The creation of a MOE/web document begins by designing the HTML form
used by the client to initiate the computation. When the form is completed
its contents are transmitted to MOE/batch for processing. Special
variables are at the disposal of the SVL programmer to access the
form content. Once the processing is completed, the SVL application
outputs an HTML document that is transmitted back to the client,
thus completing the MOE/web transaction.</p>

<a name="Header"><h3>Headers and Footers</h3></a>

<p>Standard header and footer files for MOE/web pages are provided in the
$MOE/web directory, in the files <tt>header.html</tt> and <tt>footer.html</tt>,
respectively.  These may be customized, and are standard HTML documents except
that the header contains a few special tags which are substituted when
sent out by the web server as follows:
</p>

<center>

<table class="titlebar">
<tr>
<th>Name</th>
<th>Description</th>
</tr>
<tr><td valign="top"><tt>&lt;PAGETITLE&gt;</tt></td>
<td valign="top">
This tag will be substituted with the name of the application.
</td></tr>
<tr><td valign="top"><tt>&lt;EXTRACSS&gt;</tt></td>
<td valign="top">
If a CSS file with the same filename and in the same directory as the HTML
file is found, this tag will be replaced with a link to the style sheet.  For
example when accessing the page <tt>sdfilter/sdfilter.htm</tt>, the system
will check for <tt>sdfilter/sdfilter.css</tt> and include it in the header
if found.  This allows you to provide custom CSS for each application you
create.  For pages generated by SVL scripts, the CSS file indicated by

<tt>moe_web_style</tt> (see <a href="#Form">below</a>) will be substituted.
</td></tr>
<tr><td valign="top"><tt>&lt;EXTRAJS&gt;</tt></td>
<td valign="top">
If a JavaScript file with the same filename and in the same directory as the
HTML file is found, this tag will be replaced with a link to it.  For
example when accessing the page <tt>sdfilter/sdfilter.htm</tt>, the system
will check for <tt>sdfilter/sdfilter.js</tt> and include it in the header
if found.  This allows you to provide custom JavaScript for each application
you create.  JavaScript may also be included in the document body in the
normal way.
</td></tr>
</table>

</center>

<p>Pages generated by SVL scripts will automatically include
<tt>header.html</tt> and <tt>footer.html</tt>, however static HTML files will
not.  You may provide your own headers and footers for these, or to maintain a
uniform look, include <tt>header.html</tt> and
<tt>footer.html</tt>.  To do so, include the following lines, exactly as
shown, at the position you would like them to be included (normally the very
start and end of the HTML).
</p>
<p>For the header:</p>
<code>&lt;!--#header TITLE|mycss.css|myjs.js--&gt;</code>

<p>and for the footer:</p>
<code>&lt;!--#footer--&gt;</code>

<p>Here <tt>TITLE</tt> is the title of the application to be displayed.  To
provide a custom CSS file to be substituted for <tt>&lt;EXTRACSS&gt;</tt> in
the header, follow the title with a pipe (|) symbol and the name of the
CSS file, which must be in the same directory.  To also include a JavaScript
file to substitute for <tt>&lt;EXTRAJS&gt;</tt>, add a second pipe symbol,
and the name of the .js file.  Note that providing these extra CSS and
JavaScript files is optional, and only required if the filenames are
different from the name of the HTML file, since the CSS and JavaScript files
will automatically be included when the names match the HTML file.</p>

<a name="Dir"><h3>Creating the Application Directory</h3></a>

All MOE/web applications should reside in a subdirectory of
<tt>$MOE/web</tt> in order to be automatically detected at server startup.

<p>
The MOE/web Applications page is a dynamically generated document that scans
every subdirectory of <tt>$MOE/web</tt> (or those paths specified when
starting the server) to display installed MOE/web applications. Information
about applications are stored in an application descriptor file named
<tt>app_desc.txt</tt> located in the application directory.
<p>

A descriptor file can contain the following tags:
<p>
<center>
<table class="titlebar">

<tr>
<th>Name</th>
<th>Description</th>

<tr>
<td valign="top"><tt>Title</tt>
<td valign="top">
Specifies a short name for the application.

<tr>

<td valign="top"><tt>Description</tt>
<td valign="top">
A few lines of text explaining the purpose of the application.

<tr>
<td valign="top"><tt>Icon</tt>
<td valign="top">
Specifies an image to display beside the application description. The
recommended image size is 64x64 pixels.

<tr>
<td valign="top"><tt>Link</tt>
<td valign="top">
The HTML document to display when the application is launched.
</table>
</center>

<p>
The following example is taken from the SD Filter application:
<pre>
&lt;title&gt;
SD Filter
&lt;/title&gt;

&lt;icon&gt;
icon.png
&lt;/icon&gt;

&lt;description&gt;

Adjust molecular data stored in SD files and screen records according
to rules such as Lipinski rule-of-five or the presence of
reactive groups.
&lt;/description&gt;

&lt;link&gt;
sdfilter.htm
&lt;/link&gt;
</pre>

<a name="Form"><h3>Designing an HTML Input Form</h3></a>

A form definition must specify at least two special attributes which provide
the name of the form's processing server and the method by which the
parameters are to be sent to the server. The form processing server is
specified using the <tt>action</tt> attribute. MOE/web uses the path

<tt>cgi-bin/moe_cgi.pl</tt> of the MOE installation directory as the form
processing server for backwards compatibility, but this file no longer
actually exists and is redirected automatically to the new equivalent.
The second required attribute is
named <tt>method</tt> and sets the method by which the browser transmits the
form's contents to the server. MOE/web is designed to use the POST method. If
we assume that MOE was installed in the root directory of your web server
then the proper HTML form declaration to be used with MOE/web would be:

<pre>
    &lt;form action=&quot;../../cgi-bin/moe_cgi.pl&quot; method=&quot;post&quot;&gt;
</pre>

<p>An extra attribute specifying the form data encoding need only
be included when the MOE/web form includes one or more file upload elements.
MOE/web expects file uploads to be encoded using the multipart format. In this
case, the form declaration to be used is:


<pre>
    &lt;form action=&quot;../../cgi-bin/moe_cgi.pl&quot;
          method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
</pre>

<p>Forms allow for a variety of data input fields, buttons, boxes
and lists.  One of these types is
a <tt>hidden</tt> type which can be used to manage user/server interactions.
MOE/web is sensitive to the following hidden data fields:


<p>
<center>
<table class="titlebar">

<tr>
<th>Name</th>
<th>Description</th>

<tr>
<td valign="top"><tt>moe_web_runfile</tt>
<td valign="top">
Specifies the name of the SVL program to be run.  The path should be relative
to the parent of the application directory.  For example if there were an
application in a directory called <tt>myapp</tt>, you might set this to

<tt>myapp/myapp.svl</tt>.

<tr>
<td valign="top"><tt>moe_web_title</tt>
<td valign="top">
Specifies the name of the application for display purposes.

<tr>
<td valign="top"><tt>moe_web_load</tt>
<td valign="top">
The list of SVL files or directories of SVL files to be loaded in
addition to "lib/svl/{sys,stdlib,msys}".

<tr>
<td valign="top"><tt>moe_web_style</tt>
<td valign="top">
Specifies the name of a CSS style sheet to be included in the
output HTML document.  The path should be relative to the parent of the
application directory.  For example if there were an application in a directory
called <tt>myapp</tt>, you might set this to <tt>myapp/myapp.css</tt>.

</table>
</center>

<p>
The <tt>moe_web_runfile</tt> hidden element, specifying the
SVL program to be run, is mandatory.
For example, the following form instructs
MOE/web to run the program <tt>my_app.svl</tt> stored in
directory <tt>web_dev</tt> of the MOE root directory:

<pre>
    &lt;form action=&quot;../../cgi-bin/moe_cgi.pl&quot; method=&quot;post&quot;&gt;

        &lt;input type=&quot;hidden&quot; name=&quot;moe_web_runfile&quot; value=&quot;web_dev/my_app.svl&quot;&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;moe_web_title&quot; value=&quot;My App&quot;&gt;

	    .... Other form elements ....

    &lt;/form&gt;
</pre>

<a name="Access"><h3>Accessing the HTML Form Content in SVL</h3></a>

Any SVL application launched by MOE/web can access the following global
variables:

<p>
<center>
<table class="titlebar">

<tr>
<th>Name</th>

<th>Description</th>

<tr>
<td valign="top"><tt>web_cgi</tt>
<td valign="top">
Tagged vector of the values of the HTML form.

<tr>
<td valign="top"><tt>web_title</tt>
<td valign="top">
The name of the application for display purpose.

<tr>
<td valign="top"><tt>web_tmp_fnum</tt>
<td valign="top">

HTML temporary output file.

<tr>
<td valign="top"><tt>web_root_url</tt>
<td valign="top">
URL of the MOE root directory.

</table>
</center>

<p>
Of these variables, <tt>web_cgi</tt> is the most important. It contains
the value of each field in the input form. <tt>web_cgi</tt> is organized
as a tagged vector where each field name is used as a tag name for the
corresponding field value. For example, form


<pre>
    &lt;form action=&quot;../../cgi-bin/moe_cgi.pl&quot;
          method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;
    &gt;
         &lt;input type=&quot;hidden&quot; name=&quot;moe_web_runfile&quot; value=&quot;web_dev/my_app.svl&quot;&gt;

         &lt;input type=&quot;hidden&quot; name=&quot;moe_web_title&quot; value=&quot;My App&quot;&gt;
	 &lt;input type=&quot;text&quot; size=&quot;50&quot; name=&quot;arg1&quot;&gt;

	 &lt;input type=&quot;text&quot; size=&quot;50&quot; name=&quot;arg2&quot;&gt;
	 &lt;input type=&quot;file&quot; size=&quot;50&quot; name=&quot;arg3&quot;&gt;

    &lt;/form&gt;
</pre>

would produce the following <tt>web_cgi</tt> variable for the SVL application
in file <tt>my_app.svl</tt>:
<pre>
    [arg1: &quot;some data1&quot;, arg2: &quot;some data2&quot;, arg3: ['filename', filenum]]

</pre>

Note that the value for arg3 is a vector of two elements, the first
being the name of the file uploaded and the second a file handle used to
read the content of the file.
<p>
To convert existing code to MOE/web only requires extracting the input data
from the <tt>web_cgi</tt> variable.

<a name="Result"><h3>Generating a Result HTML Page</h3></a>

Once the processing is completed, the output HTML page must be created
and sent back to the client. For this purpose,
the variable <tt>web_tmp_fnum</tt>
is a pre-opened file handle to the output page. The output page is
automatically formatted with appropriate headers and footers, so only
the body of the page should be written to <tt>web_tmp_fnum</tt>.

<p>
<b>Note:</b> To avoid sending partially completed documents to the client, the
file represented by <tt>web_tmp_fnum</tt> is transmitted only when the SVL
application terminates. It is therefore safe to write to <tt>web_tmp_fnum</tt>
before or during long calculations.

<a name="Update"><h3>Migrating MOE/web 2009.10 and Earlier Applications</h3>
</a>
<p>The handling of headers and footers in MOE/web applications has been
centralized, as described above, in the <tt>header.html</tt> and

<tt>footer.html</tt> files.  As a result, applications written for MOE/web
2009.10 or earlier require minor changes to function properly.  In most cases,
all that will need to be done is to modify all <i>static</i> HTML files which
are part of the application to:</p>
<ul>
<li>Remove all headers and footers including the <b>&lt;html&gt;</b> and
<b>&lt;body&gt;</b> tags, <b>&lt;head&gt;</b> block, and anything else not
part of the actual page content.</li>

<li>Add <tt>&lt;!--#header TITLE--&gt;</tt> to the beginning of the file,
and <tt>&lt;!--#footer--&gt;</tt> to the end, where TITLE is the title of
the page to be displayed.</li>

<li>If any external CSS or JavaScript files are required by the HTML page,
either rename them to the same name as the HTML file (but with appropriate
extension), or include them in the <tt>&lt;!--#header--&gt;</tt> line as
described <a href="#Header">above</a>.</li>

<li>If the form contains the variable <tt>moe_web_style</tt>, make sure
the path given to the CSS file is relative to the parent of the application
directory.  For example if there were an application in a directory called
<tt>myapp</tt>, you might set this to <tt>myapp/myapp.css</tt>.
</li>

<li>Any references in SVL code to files in the same path as the application
should not use $MOE/web/appname to refer to the application path, but rather
<tt>fpath (modenv[]).filename</tt> which gives the absolute path to the
currently executing SVL script, and is guaranteed to always be correct
regardless of where the application is running from.
</li>
</ul>

<a name="SOAP"></a>
<h2>SOAP Application Server</h2>

<p>
The MOE/web server can be used as a webservice provider. It offers a 
framework for building lightweight browser-based web service applications, 
and function calls via the Simple Object Access Protocol 
(<a href="http://www.w3.org/TR/soap12-part1">SOAP</a>). This protocol can 
be used to interface MOE to third party software, such as Pipeline Pilot.
</p>


<h3><a name="OpeningPage">Opening Page</a></h3>

<p>When the server is running, it will respond to requests on a particular
TCP/IP port. With default parameters, it will usually be possible to access the
server from the same computer by opening a web browser, and entering the URL:
</p>
<pre>
    http://localhost:8888

</pre>

<p>For general use, however, it is advisable to substitute the computer's
hostname for the localhost part. The host name may have been derived
automatically, or it may have been set explicitly as a parameter. The host name
which is being used by the server is displayed at the beginning of the log file
output.
</p>
<p>The opening page provides a directory of the web
apps which have been loaded into the server.
</p>
<p>There are three additional URLs which are important to investigate when
administering a server:
</p>

<center>
<table class="titlebar">

<tr>
<th>URL</th>
<th>Description</th>

</tr>

<tr>
<td valign="top"><tt>http://{host}:{port}/soap.html</tt></td>
<td valign="top">SOAP function directory page</td>
</tr>
<tr>
<td valign="top"><tt>http://{host}:{port}/MOEWebServer.wsdl</tt></td>
<td valign="top">Web Services Description Language (WSDL) document</td>
</tr>
<tr>
<td valign="top"><tt>http://{host}:{port}/stats.html</tt></td>

<td valign="top">Statistics page</td>
</tr>
</table>
</center>

<h3><a name="SOAPPage">SOAP Function Page</a></h3>

<p>The <tt>http://{host}:{port}/soap.html</tt> URL produces a dynamic page which
has a list of each SOAP function currently being hosted by the server. When a
web browser is directed to the function list page for a minimally configured
server, the resulting page will resemble the following snapshot:
</p>
<div align="center">
<img src="web_inst/funcdir.png"
 style="border-style: solid; border-width: 1px; border-color: #C0C0C0;" alt="functions" />
</div>

<p>Each of the functions is in turn a clickable link. For example, the
<tt>Version</tt> function, which is included by default, has a reference to:
</p>
<pre>
    http://{host}:{port}/soap/html/Version
</pre>

<p>which is a test page for the function. The test page shows a description of
the function's arguments and return values. It allows the user to enter values
for the arguments, preview the XML document that will be sent as the SOAP
request, and to execute the function and view the results.
</p>
<p>Use of the SOAP function page is the recommended way to verify that a
particular function is working properly, and to debug new functions.
</p>
<h3><a name="WSDLPage">WSDL Page</a></h3>

<p>The <tt>http://{host}:{port}/MOEWebServer.wsdl</tt> URL produces an XML
document, which conforms to the Web Services Description Language (<a
href="http://www.w3.org/TR/wsdl">WSDL</a>) specification. Providing this URL
allows third party software, such as Pipeline Pilot,
to download the interface specifications for all of
the SOAP functions hosted on the server.
</p>
<p>The WSDL page is produced dynamically. Each SOAP function which is loaded by
the server has its own section in the WSDL page.
</p>
<p>There are many programs which can make use of WSDL+SOAP. One example is the
<tt>wsimport</tt> program, which is distributed as part of the  <a
href="http://java.sun.com/">Java Development Kit</a>. The following syntax:
</p>

<pre>
    wsimport http://foo.bar.com:8888/MOEWebServer.wsdl -keep -d src_wsdl
</pre>

<p>will instruct the <tt>wsimport</tt> program to download the WSDL page for the
MOE/web SOAP functions, and generate a Java source file for each function,
which allows the SOAP function to be accessed conveniently from
within the Java runtime environment.
</p>


<a name="SOAPService"></a>
<h2>Creating a SOAP Web Service</h2>

<p>
A web service is created by loading an SVL function specifying a specific naming
convention.

<ol>
<li> Create file called, say, <tt>'mysoap.svl'</tt>.
<li> Launch MOE/web, loading the file, with <tt>$MOE/bin/moeweb -load mysoap.svl.</tt>
</ol>

<p>
Below is an example of a simple web service to calculate the rsynth descriptor
(explanation follows):
</p>

<pre>
    global function soapfcn_MolToRsynth [cmd, arg, opt]

        // the description of the function
        const DESCR = "Computes a MOL rsynth descriptor from MOE.";

        // only one argument, a molecule
        const ARGVALS = [
            molecule: [
                type: 'text',
                descr: "The subject molecule, as an MDL MOL file."
            ]
        ];

        // returns a number as the result
        const RETVALS = [
            result: [type: 'real', descr: "The rsynth result."]
        ];

        // identify yourself
        if cmd == 'query' then
            return [ARGVALS, RETVALS, DESCR];
        endif

        // extract the molecule part
        local mdlmol = fieldsplit [arg.molecule, "\n"];
        const HEADER_SIZE = 3;
        local ctab = mdl_ParseCTAB [drop [mdlmol, HEADER_SIZE], 1];

        // convert CTAB to MDB MOL
        local mol = first mol_ExtractFromCTAB ctab;

        // do the calculation.
        local key = DescriptorCalcOpen [];
        local result = DescriptorCalcMOL [key, mol, 'rsynth'];
        DescriptorCalcClose key;

        // return the result string
        return [result: result];
    endfunction
</pre>

<p>
The function <tt>soapfcn_MolToRsynth</tt> is intended to show how a descriptor
calculation could be performed using a web service. This example uses the
rsynth descriptor, which calculates a molecule's (MDL Mol) synthetic feasibility
with a range between 0 and 1 in increasing probability of synthetic feasibility.
</p>

<p>
The function declaration tells the system that this function is to be used
as a webservice as it follows the prefix, <tt>soapfcn_*</tt>. The first
parameter, <tt>cmd</tt>, is used to determine whether the function should
identify itself or run the intended calculation based on the value of the
remaining parameters. If the value of <tt>cmd</tt> is set to
<tt>'query'</tt>, the return value is set <tt>[ARGVALS, RETVALS, DESCR]</tt>,
for a description of the input, output, as well as a general description of
the function. If the value of <tt>cmd</tt> is not set, the calculation proceeds.
Since the input is of MDL Mol format, the molecular data is extracted and
converted to a MOE MDB (dbmol) format. It is then submitted to the descriptor
engine for calculation. The result is returned as a tagged vector with a
matching tag as defined by <tt>RETVAL</tt>.
</p>

<h2><a name="StatsPage">Statistics Page</a></h2>

<p>The <tt>http://{host}:{port}/stats.html</tt> URL generates a page which provides
histograms of server activity. One graph is produced for each day, back as far
as 7 days, or when the server was most recently restarted.

</p>
<p>Each bar represents a unit of time, and its height is proportional to the
amount of MOE token usage during that time. For example, if 2 tokens are
dedicated to the server, and for the entire time one token was in use and one
was idle, the height of the bar will be 50% of the Y-axis. If the bar is at 100%
of the Y-axis, it means that server usage was saturated for the entire duration,
and the number of tokens available to service all the requests was equal to or
less than the number required.
</p>
<p>The color of the bars is used to indicate excess demand, which is based on
accumulating the length of time each incoming request is kept waiting because a
token is not available. Bars are colored green when there is essentially no lag
time caused by lack of tokens. If the total amount of time spent by requests
waiting for tokens approaches the duration of the time slice being represented,
the color transitions through yellow to red. Beyond this time limit, the color
darkens to black. Red bars indicate significant loss of responsiveness due to
lack of tokens, while black bars indicate a very serious shortage.
</p>
<p>Consider the following example:
</p>
<div align="center">
<img src="web_inst/statsnap.png" alt="stats" />
</div>

<p>In this case, the server has been configured to use 2 tokens. At the
beginning and end of the day, usage is minimal. The green bars, for which the
height is less than 1 token, indicate that the server is idle most of them time,
and there is seldom any excess demand. Between 9am and 4pm, the height of the
bars increase, and the yellow-red-black coloration indicates that there is heavy
contention for limited resources, and many requests are forced to wait in the
queue. The red portions of the graph show where approximately one extra token
would be required to minimize queue time, while the black portions, around noon,
would require at least two extra tokens.
</p>




<a name="SeeAlso"><h2>See Also</h2></a>

<a href="../moe/moeweb_intro.htm">MOE/web Applications</a><br>
<a class="svl" href="../svl/fcnref/soapfcn.htm">soapfcn_*</a>

</font>
<p><a href="../index.htm">MOE Table of Contents</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
