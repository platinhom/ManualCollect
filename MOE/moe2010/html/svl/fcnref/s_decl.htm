<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--
!!	s_decl.htm		const, variable, function declarations
!!
!!	15-oct-2002 (pl) created
!!
!! supersedes: svl_return.htm svl_const.htm svlintro.htm
!! 	       svl_var.htm svl_fcn.htm svl_scope.htm
!!
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta functions function, endfunction, return>
<meta functions const>

<meta SVL const, local, global, static>
<meta SVL function, endfunction, return>

<meta SVL:syntax Function Declarations, Variable Declarations>
<meta SVL:syntax Constant Declarations>

<title>SVL Declarations</title>
</head>
<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>SVL Declarations</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<p>
<blockquote>
<table border="0">

<tr>
<td valign=top><i>module</i>
<td width=10>
<td>: <b>{</b> <i>declaration</i> <b>}</b>*
</tr>

<tr>
<td valign=top><i>declaration</i>
<td width=10>
<td>
: <tt>const</tt> <i>identifier</i> <tt>=</tt> <i>expression</i> <tt>;</tt><br />
: <tt>function</tt> <i>identifier</i>
  <b>{</b> <tt>,</tt> <i>identifier</i> <b>}</b>* <tt>;</tt><br />
: <b>{</b> <tt>local</tt> <b>|</b> <tt>global</tt> <b>}</b>
  <tt>function</tt> <i>identifier</i>
  <b>{</b> <i>loc_lvalue</i> <b>|</b> <tt>[]</tt> <b>}<sup>1</sup></b>
  <tt>=</tt> <i>expression</i> <tt>;</tt><br />
: <b>{</b> <tt>local</tt> <b>|</b> <tt>global</tt> <b>}</b>
  <tt>function</tt> <i>identifier</i>
    <b>{</b> <i>loc_lvalue</i> <b>|</b> <tt>[]</tt> <b>}<sup>1</sup></b>
    <b>{</b> <i>statement</i> <b>}</b>*
  <tt>endfunction</tt><br />
: <tt>global</tt> <i>identifier</i>
  <b>{</b> <tt>,</tt> <i>identifier</i> <b>}</b>* <tt>;</tt><br />
: <tt>local</tt> <i>loc</i>
  <b>{</b> <tt>,</tt> <i>loc</i> <b>}</b>* <tt>;</tt><br />
: <tt>static</tt> <i>identifier</i>
  <b>{</b> <tt>,</tt> <i>identifier</i> <b>}</b>* <tt>;</tt><br />
</tr>

<tr>
<td valign=top><i>loc</i>
<td width=10>
<td>
: <i>identifier</i><br />
: <i>loc_lvalue</i> <tt>=</tt> <i>expression</i>
</tr>

<tr>
<td valign=top><i>loc_lvalue</i>
<td width=10>
<td>
: <i>identifier</i><br />
: <tt>[</tt> <i>loc_lvalue</i>
  <b>{</b> <tt>,</tt> <i>loc_lvalue</i> <b>}</b>* <tt>]</tt>
</tr>

<tr>
<td valign=top><i>statement</i>
<td width=10>
<td>
: <i>declaration</i><br />
: <tt>return</tt> <b>{</b> <i>expression</i> <b>}</b> <tt>;</tt>
</tr>

</table>
</blockquote>

<h2>Description</h2>

<p>
The following notation is used to describe SVL syntax and syntactic
categories.
The name of a category is printed in italics, e.g. <i>lvalue</i>.</li>
SVL keywords and symbols are printed in teletype, e.g. <tt>loop</tt>
or <tt>[]</tt>.</li>
Each category is defined as a list of syntactic patterns composed
of SVL keywords or symbols and of names of other categories (like BNF
notation); for example,
<i>lvalue</i> : <i>identifier</i> <tt>[</tt> <i>expression</i> <tt>]</tt> 
means "an lvalue can be an identifier followed by a bracketed expression".
Bold braces are used to apply a special rule to the part of the pattern
inside the braces:

<ul>
<li><b>{</b>...<b>}</b> specifies an optional pattern, e.g.
    <span class="nobr"><b>{</b><em>for</em><b>}</b> <tt>loop</tt></span>
</li>

<li><b>{</b>...<b>}<sup>*</sup></b> specifies a sequence of zero or more
    repetitions, e.g.
    <span class="nobr"><b>{</b><em>while</em><b>}<sup>*</sup></b> <tt>loop</tt></span>
</li>

<li><b>{</b>...<b>}<sup>+</sup></b> specifies a sequence of one or more
    repetitions, e.g.
    <span class="nobr"><b>{</b><em>digit</em><b>}<sup>*</sup></b></span>
</li>

<li><b>{</b>...<b>|</b>...<b>}</b> and
    <b>{</b>...<b>|</b>...<b>}<sup>1</sup></b> specify
    (optional and compulsory) alternative patterns, e.g.
    <span class="nobr"><b>{</b><tt>local</tt><b> | </b><tt>global</tt><b>}</b>
	<tt>function</tt></span>
</li>
</ul>

<p>
<b>Modules</b>.
An SVL module is a file containing a sequence of declarations defining
constants, variables and functions.  Constants are symbols representing
values calculated at compile time.  Variables are used for run-tim storage
of values.  Functions contain program statements that effect calculations.
Functions can be either "local" or "global" depending on whether they
are visible outside of the module file.  Variables can be "local", "global"
or "static" depending on their value-retention and visibility characteristics.
These objects differ also in where they can be declared.  The following
table summarizes some of these characteristics (more details can be found
further in this document).

<p><center><table class="titlebar" border="1" cellpadding="4">
<tr>
<th>Characteristic</th>
<th><tt>const</tt></th>
<th><tt>local<br />function</tt></th>
<th><tt>global<br />function</tt></th>
<th><tt>global</tt><br />variable</th>
<th><tt>local</tt><br />variable</th>
<th><tt>static</tt><br />variable</th>
</tr>
<tr>
<td>Declare outside functions
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center">No
<td align="center"><b>Yes</b>
</tr>
<tr>
<td>Declare inside functions
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center">No
<td align="center">No
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
</tr>
<tr>
<td>Declare inside <tt>if</tt> and <tt>loop</tt> constructs
<td align="center"><b>Yes</b>
<td align="center">No
<td align="center">No
<td align="center">No
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
</tr>
<tr>
<td>Visible outside module file
<td align="center">No
<td align="center">No
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center">No
<td align="center">No
</tr>
<tr>
<td>Retains value/definition across function invocations
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center">No
<td align="center"><b>Yes</b>
</tr>
<tr>
<td>Set value/definition in declaration
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center">No
<td align="center"><b>Yes</b>
<td align="center">No
<tr>
<td>Can use in left-hand-side of assignment operator
<td align="center">No
<td align="center">No
<td align="center">No
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
<td align="center"><b>Yes</b>
</tr>
</table></center>
<p>
By convention, an SVL module file begins with some comments and compiler
directives:
<pre>    #svl
    //      myfile.svl
    //
    //      dd-mmm-yyyy (xx) created
    //

    #set title 'My Program'
</pre>
which marks the file as an SVL module (with the <tt>#svl</tt> compiler
directive), identifies the file, the initials of its creator (xx),
contains a change log and assign the name of the module (with the
<tt>#set title</tt> compiler directive).  This header is not required however
it is recommended.

<p>
<b>Constants</b>.
The <tt>const</tt> keyword is used to define constant values and bind them
to identifiers.  More than one comma separated constant definition can
appear in the <tt>const</tt> construct.  For example,

<pre>    <b>const</b> A = 5, B = 'hello world', C = cos [1,2,3] ;
</pre>

defines three constants <tt>A</tt>, <tt>B</tt> and <tt>C</tt>.  Each
supplied <i>expression</i> in the definition of a constant is evaluated by
the compiler and, therefore, can contain no calls to functions that depend
on global state (e.g., random number generators, file input/output
routines, or user functions).  The compiler will generate an error if an
attempt is made to use a function that may depend on global states.  Once
the value is calculated it is bound to the identifier for the life-time of
the constant.  Constant declarations can appear outside functions, inside
functions and inside <tt>if</tt> and <tt>loop</tt> constructs.  The
identifiers bound in <tt>const</tt> declarations may not appear on the
left-hand-side of assignment operators.

<p>
<b>Local Variables</b>.  Local variables exist only when the function in
which they are defined is executing.  Local variables can only be declared
inside of a function (possibly in an <tt>if</tt> or <tt>loop</tt> construct).
Each function invocation is associated with a new version of the local
variable, with no memory of the variable's value from previous
invocations.  Thus, in recursive function calls, each recursion allocates
a private version of each local variable so that variable values in each
call are unaffected by other calls.  The declaration

<pre>    <b>local</b> a, b, c ;
</pre>

declares that <tt>a</tt>, <tt>b</tt> and <tt>c</tt> are local variables.
Optionally, an initialization expression may be provided for any of the
individual declarations.  For example,

<pre>    <b>local</b> a = [1,2,3], b = 'hello' ;
</pre>
not only declares <tt>a</tt> and <tt>b</tt> to be local variables but
assigns values to them.  This evaluation of the expressions is performed
at run-time at the point in the code where the declaration is made.
Typically, the <i>identifier</i> <tt>=</tt> <i>expression</i> form of
the initialization is used; however, the <i>loc_lvalue</i> can be more
complex (similar to the assignment operator).  A nested vector of identifiers
can take the place of the single identifier.  This is a short hand for
the extraction of several values from the value of the expression.  For
example,
<pre>    <b>local</b> [a,[b,c]] = val;
</pre>
is equivalent to
<pre>    <b>local</b> a, b, c;
    <b>local</b> t = val;
    a = t(1);
    b = t(2)(1);
    c = t(2)(2);
</pre>
Note that the <i>expression</i> is evaluated only once.

<p>
<b>Global Variables</b>.
The <tt>global</tt> <i>identifier</i> <b>{</b> <tt>,</tt>
<i>identifier</i> <b>}</b>* <tt>;</tt> construct is used to declare that
the given identifiers are global variables.  Global variables are used to
share data between module files and the SVL command line.  This construct
must appear outside functions (otherwise a compile-time error will result).
For example,
<pre>    <b>global</b> a, b, c <b>;</b>
</pre>
declares that <tt>a</tt>, <tt>b</tt> and <tt>c</tt> are global variables.
These identifiers can then be used in functions subsequent to the declaration.
These identifiers may not be used in constant definitions.
There is only one shared global variable space and it is used by all
modules and tasks.
The values of global variables only change through an explicit run-time
assignment operator.  Even if modules are re-compiled,
global variables will retain their values.
<p>
Global variables share the same name space as global functions (including
built-in functions).  A load-time error will result if there is a conflict
between modules; for example, one module declares that <tt>X</tt> is
a global variable and another defines a global function called <tt>X</tt>.
A load-time error will also result if a global variable has the same name
as a built-in function.  As a result, it is highly recommended that globals
have long and non-obvious names to reduce the likelihood of a conflict.
It is best to avoid using globals in the first place; however, they can
be useful when debugging.

<p>
<b>Static Variables</b>.
The <tt>static</tt> <i>identifier</i> <b>{</b> <tt>,</tt>
<i>identifier</i> <b>}</b>* <tt>;</tt> construct is used to declare that
the given identifiers are static variables.  Static variables are used
to share data between top-level functions in a module file.  They also have
the property that they retain their values between function invocations.
As such, they are similar to global variables except that they are visible
only to functions with a single module file.
For example,
<pre>    <b>static</b> a, b, c <b>;</b>
</pre>
declares that <tt>a</tt>, <tt>b</tt> and <tt>c</tt> are static variables.
These identifiers can then be used in functions subsequent to the declaration.
These identifiers may not be used in constant definitions.
The values of static variables only change through an explicit run-time
assignment operator.  The initial value of a static is the null vector;
however, this initialization is made only upon task creation (and provided
that the statics are not shared between tasks).
Static variable declarations can appear outside functions, inside functions
and inside <tt>if</tt> and <tt>loop</tt> constructs.

<p>
<b>Functions</b>.
Functions are declared with the <tt>function</tt> keyword and typically
use the
<p><center>
<b>{</b> <tt>local</tt> <b>|</b> <tt>global</tt> <b>}</b>
  <tt>function</tt> <i>identifier</i>
    <b>{</b> <i>loc_lvalue</i> <b>|</b> <tt>[]</tt> <b>}<sup>1</sup></b>
    <b>{</b> <i>statement</i> <b>}</b>*
  <tt>endfunction</tt><br />
</center>
<p>form of the declaration.  Optionally, <tt>local</tt> or <tt>global</tt>
can precede the <tt>function</tt> keyword to define a local or global
function, respectively.  If neither <tt>local</tt> nor <tt>global</tt>
is present then the default is <tt>local</tt> if the function is declared
inside of another function and <tt>global</tt> otherwise.  The <i>identifier</i>
supplied is the name of the function.  The names of global functions
exist in the same space as global variables (including built-in functions).
A load-time error will result if there is a conflict between modules;
for example, one module declares that <tt>X</tt> is a global variable and
another defines a global function called <tt>X</tt> or if two different
modules define the same global function.
A load-time error will also result if a global variable has the same name
as a built-in function.  As a result, it is highly recommended that global
functions be given long and non-obvious names to reduce the likelihood of
a conflict.
<p>
The <i>loc_lvalue</i> is the specification of the argument to the function.
SVL functions accept exactly one argument and return exactly one return
value.  However, like local variable declarations the <i>loc_lvalue</i>
can be used to assign symbols to particular elements of the single
argument.  For example,
<pre>    <b>function</b> fcn1 [a,b]
        ....
    <b>endfunction</b>
</pre>
defines a function called <tt>fcn1</tt> whose single argument will be
interpreted as a vector of length two.  This is equivalent to the following
<pre>    <b>function</b> fcn1 arg
        local [a,b] = arg;
        ....
    <b>endfunction</b>
</pre>
and the same rules and interpretations apply as when initializing local
variables.  The <tt>[]</tt> argument form is used when the function ignores
its argument.
<p>
Functions can be defined within other functions (but not in neither
<tt>if</tt> nor <tt>loop</tt> constructs).  In such cases the inner function
can use all variables already defined in the outer function.  Moreover,
these outer variables will retain their values across invocations of the
inner function (similar to globals).

<p>
The <tt>=</tt> <i>expression</i> <tt>;</tt> form of defining the function
body is merely a shorthand notation.  It is equivalent to using then
<tt>function</tt> ... <tt>endfunction</tt> form with a single statement
in the body consisting of <tt>return</tt> <i>expression</i> <tt>;</tt>.
For example, the function
<pre>    <b>function</b> mean x = add x * invz length x ;
</pre>
is equivalent to
<pre>    <b>function</b> mean x
        return add x * invz length x;
    <b>endfunction</b>
</pre>
In other words, a function that has a single expression for a body returns
the value of that expression as its result.  The expression can use any
identifiers defined in the <i>loc_lvalue</i> argument specification.

<p>
The <tt>function</tt> <i>identifier</i> <b>{</b> <tt>,</tt> <i>identifier</i>
<b>}</b>* <tt>;</tt> form of the function declaration is used to reserve
the given identifiers as function symbols.  No definition of the function
is given.  It is expected that the definition will be supplied further
down in the module file (possibly in the same function);  if no such
definition exists then the function is assumed to be an externally defined
global function.  The local/global characteristics are specified when
the function is defined.  For example, to define two mutually recursive
local functions, one can use
<pre>    <b>function</b> fcn2;

    <b>local function</b> fcn1 x
        ....
        fcn2 x;
        ....
    <b>endfunction</b>

    <b>local function</b> fcn2 x
        ....
        fcn1 x;
        ....
    <b>endfunction</b>
</pre>
The first <tt>function</tt> declaration indicates to the compiler that the
symbol <tt>fcn2</tt> is a function.  Its definition is supplied in the
third <tt>function</tt> declaration.

<p>
<b>Return</b>.
The <tt>return</tt> construct is used to terminate an invocation of a function
(independent of the state of any loops) and return the run-time value of the
function.  Execution proceeds to the code that invoked the function.  An
optional <i>expression</i> can be supplied as the return value.  If no such
<i>expression</i> is given then the null vector is returned.  If execution of a
function proceeds to the <tt>endfunction</tt> then an implicit return of the
null vector is performed.  For example,
<pre>
    function mean x
	local sum = add x;
        <b>return</b> sum * invz length x;
    endfunction
</pre>
defines a function that returns the mean value of a given vector.  The
<tt>return</tt> construct can appear anywhere in a function, even inside
<tt>if</tt> and <tt>loop</tt> constructs.  It is a syntax error to use a
<tt>return</tt> construct outside of a function definition.

<h2>See Also</h2>

<a href="s_lex.htm">SVL Lexical Analysis</a><br />
<a href="s_expr.htm">SVL Expressions</a><br />
<a href="s_stmt.htm">SVL Statements</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
