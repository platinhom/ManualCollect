<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->


<!--	s_lex.htm			lexical analysis
!!
!!	07-aug-2007 (ms) dvars and function pointers
!!	01-may-2005 (pl) incorporated compiler directives
!!	15-nov-2001 (pl) created
!!
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions comments>

<meta SVL:compiler_options #svl, #if, #else, #endif, #!>
<meta SVL:syntax /*&nbsp;...&nbsp;*/, //&nbsp;..., #token, #string>
<meta SVL comments>

<title>SVL Lexical Analysis</title>
</head>
<body  bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>SVL Lexical Analysis</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<p>
<blockquote>
<table border="0">

<tr>
<td valign="top"><i>lexeme</i>
<td width="10">
<td>: <b>{</b>
  	   <i>comment</i>
  <b>|</b> <i>number</i>
  <b>|</b> <i>string</i>
  <b>|</b> <i>token</i>
  <b>|</b> <i>identifier</i>
  <b>|</b> <i>operator</i>
  <b>|</b> <i>symbol</i>
  <b>}<sup>1</sup></b>
</tr>

<tr>
<td valign="top"><i>comment</i>
<td width="10">
<td>
: <tt>// a one-line comment</tt><br />
: <tt>/* ... a multi-line nesting comment */</tt><br />
: <tt># one-line compiler control
</tr>

<tr>
<td valign="top"><i>number</i>
<td width="10">
<td>
: <b>{</b> <i>digit</i> <b>}<sup>+</sup></b><br />
: <tt>0o</tt> <b>{</b>
	<tt>0</tt> <b>|</b> <tt>1</tt> <b>|</b> ... <b>|</b> <tt>7</tt>
  <b>}<sup>+</sup></b><br />
: <tt>0x</tt> <b>{</b>
	<tt>0</tt> <b>|</b> <tt>1</tt> <b>|</b> ... <b>|</b> <tt>9</tt>
	<b>|</b> <tt>a</tt> <b>|</b> <tt>b</tt> <b>|</b> ... <b>|</b> <tt>f</tt>
	<b>|</b> <tt>A</tt> <b>|</b> <tt>B</tt> <b>|</b> ... <b>|</b> <tt>F</tt>
  <b>}<sup>+</sup></b><br />
: <tt>0y</tt> <b>{</b>
	<tt>0</tt> <b>|</b> <tt>1</tt>
  <b>}<sup>+</sup></b><br />
: <b>{</b> <i>digit</i> <b>}<sup>+</sup></b>
  <tt>.</tt>
  <b>{</b> <i>digit</i> <b>}<sup>+</sup></b>
  <br />
: <b>{</b> <i>digit</i> <b>}<sup>+</sup></b>
  <b>{</b> <tt>.</tt> <b>{</b> <i>digit</i> <b>}<sup>+</sup></b> <b>}</b>
  <b>{</b> <tt>e</tt> <b>|</b> <tt>E</tt> <b>}<sup>1</sup></b>
  <b>{</b> <tt>+</tt> <b>|</b> <tt>-</tt> <b>}</b>
  <b>{</b> <i>digit</i> <b>}<sup>+</sup></b>
</tr>
<tr>
<td valign="top"><i>digit</i>
<td width="10"></td>
<td>
: <b>{</b>
	<tt>0</tt> <b>|</b> <tt>1</tt> <b>|</b> ... <b>|</b> <tt>9</tt>
  <b>}<sup>1</sup></b>
</tr>
<tr>
<td valign="top"><i>token</i>
<td width="10"></td>
<td>
: <tt>'</tt> <b>{</b> <i>printable_character</i> <b>}<sup>*</sup></b> <tt>'</tt>
</tr>
<tr>
<td valign="top"><i>string</i>
<td width="10"></td>
<td>
: <tt>"</tt> <b>{</b> <i>printable_character</i> <b>}<sup>*</sup></b> <tt>"</tt>
</tr>

<tr>
<td valign="top"><i>identifier</i>
<td width="10"></td>
<td>
: <i>letter</i>
	<b>{</b> <i>letter</i> <b>|</b> <i>digit</i> <b>}<sup>*</sup></b>
</tr>

<tr>
<td valign="top"><i>letter</i>
<td width="10"></td>
<td>
: <b>{</b>
    <tt>A</tt> <b>|</b> <tt>B</tt> <b>|</b> ... <b>|</b> <tt>Z</tt> <b>|</b>
    <tt>a</tt> <b>|</b> <tt>b</tt> <b>|</b> ... <b>|</b> <tt>z</tt> <b>|</b>
    <tt>_</tt>
  <b>}<sup>1</sup></b>
</tr>

<tr>
<td valign="top"><i>operator</i>
<td width="10"></td>
<td>
: <b>{</b>
    <tt>+</tt> <b>|</b> <tt>-</tt> <b>|</b>
    <tt>*</tt> <b>|</b> <tt>/</tt>
    <b>|</b> <tt>&lt;</tt> <b>|</b> <tt>&gt;</tt>
    <b>|</b> <tt>&lt;=</tt> <b>|</b> <tt>&gt;=</tt> <b>|</b> <tt>&lt;&gt;</tt>
    <b>|</b> <tt>=</tt> <b>|</b> <tt>==</tt> <b>|</b> <tt>===</tt>
    <b>|</b> <tt>|</tt> <b>|</b> <tt>||</tt> <b>|</b> <tt>#</tt>
  <b>}<sup>1</sup></b>
</tr>

<tr>
<td valign="top"><i>symbol</i>
<td width="10"></td>
<td>
: <b>{</b>
    <tt>[</tt> <b>|</b> <tt>]</tt> <b>|</b>
    <tt>(</tt> <b>|</b> <tt>)</tt> <b>|</b>
    <tt>,</tt> <b>|</b> <tt>;</tt> <b>|</b> <tt>:</tt> <b>|</b>
    <tt>/*</tt> <b>|</b> <tt>*/</tt> <b>|</b> <tt>//</tt>
  <b>}<sup>1</sup></b>
</tr>

</table>
</blockquote>

<h2>Description</h2>

<p>Lexical analysis is the process of translating a sequence of characters (the
input source code) into the units of syntax of the SVL language called
<i>lexemes</i>.  The SVL language is expressed as a sequence of lexemes. There
are several types of lexeme: <i>identifier</i>, <i>number</i>, <i>string</i>,
<i>token</i>, <i>operator</i> and <i>comment</i>. In general, white space is
ignored and not required except to separate lexemes that, if juxtaposed, would
be treated as a single lexeme. At a given point in the input character stream,
the next lexeme is taken to be the longest prefix that constitutes a legal
lexeme.</p>

<p>
The following notation is used to describe SVL syntax and syntactic
categories. The name of a category is printed in italics, e.g.
<i>lvalue</i>. SVL keywords and symbols are printed in teletype, e.g.
<tt>loop</tt> or <tt>[]</tt>. Each category is defined as a list of syntactic
patterns composed of SVL keywords or symbols and of names of other categories
(like BNF notation); for example, <i>lvalue</i> : <i>identifier</i> <tt>[</tt>
<i>expression</i> <tt>]</tt> means "an lvalue can be an identifier followed by
a bracketed expression". Bold braces are used to apply a special rule to the
part of the pattern inside the braces:

<ul>
<li><b>{</b>...<b>}</b> specifies an optional pattern, e.g.
    <span class="nobr"><b>{</b><em>for</em><b>}</b> <tt>loop</tt></span>
</li>

<li><b>{</b>...<b>}<sup>*</sup></b> specifies a sequence of zero or more
    repetitions, e.g.
    <span class="nobr"><b>{</b><em>while</em><b>}<sup>*</sup></b> <tt>loop</tt></span>
</li>

<li><b>{</b>...<b>}<sup>+</sup></b> specifies a sequence of one or more
    repetitions, e.g.
    <span class="nobr"><b>{</b><em>digit</em><b>}<sup>*</sup></b></span>
</li>

<li><b>{</b>...<b>|</b>...<b>}</b> and
    <b>{</b>...<b>|</b>...<b>}<sup>1</sup></b> specify
    (optional and compulsory) alternative patterns, e.g.
    <span class="nobr"><b>{</b><tt>local</tt><b> | </b><tt>global</tt><b>}</b>
	<tt>function</tt></span>
</li>
</ul>


<p>
<b>Comments and White Space</b>.
Blanks, tabs, newlines, form-feeds and comments are considered to be white
space.  There are two forms of comment. The characters <tt>/*</tt> introduce a
comment that must end with <tt>*/</tt>.  Such a comment nests; i.e. a
comment delimited by <tt>/*</tt> <tt>*/</tt> may be found within another
similarly delimited comment. The other form is introduced with the characters
<tt>//</tt>, and ends at the end of line.  Characters in <tt>//</tt> comments,
including the combination <tt>*/</tt>, are ignored.  Input lines that
start with a <tt>#</tt> are compiler control lines and are not considered
part of the SVL language proper and can be considered to be white space.</p>

<blockquote>
<tt>// this is a comment that ends at the end of line</tt><br />
&nbsp;<br />
<tt>/* this comment is split<br />
** across multiple lines<br />
** and can be /* nested */ and<br />
** ends with */</tt><br />&nbsp;<br>
<tt>#set title 'Molecule Title' &nbsp;&nbsp; // compiler control line</tt>
</blockquote>

<p>
<b>Numbers</b>.
A <i>number</i> is a sequence of digits and special characters that starts
with a digit.  There are multiple formats available:

Decimal integers consist of
a sequence of decimal digits (<tt>0-9</tt>).

Hexadecimal integers consist of
the prefix <tt>0x</tt> followed by a sequence of base-16 hexadecimal
digits <tt>0-9</tt> and letters <tt>a-f</tt> or <tt>A-F</tt>.

Octal integers consist of
the prefix <tt>0o</tt> followed by a sequence of base-8 digits <tt>0-7</tt>.

Binary integers consist of
the prefix <tt>0y</tt> followed by a sequence of base-2 digits <tt>0-1</tt>.

Decimal reals consist of
a decimal integer literal followed by either or both of a fractional
value (the decimal point '<tt>.</tt>' followed by a sequence of decimal
digits) or decimal shift (an <tt>E</tt> or <tt>e</tt> followed by a signed
integer).

<blockquote>
<pre>
1420                 // decimal integer
2.5                  // decimal real
1.39456e-10          // decimal real
1e6                  // decimal real
0xBEEF22             // hexadecimal integer
0o155                // octal integer
0y1101001010111      // binary integer
</pre>
</blockquote>

<p><b>Strings and Tokens</b>.
A <i>string</i> literal is a sequence of characters surrounded by double
quotes.  A <i>token</i> literal is a sequence of characters surrounded by
single quotes.  String and token literals cannot straddle line boundaries.
However, it is possible to use several lines to define a single string or
token: two string/token literals that are separated only by white space
(including any line breaks) will be automatically concatenated to form a
single string/token.
Within a string or token the backslash character <tt>\</tt> is interpreted
in a special way.  It is used as a prefix to specify special characters.
A double backslash <tt>\\</tt> specifies the backslash character itself.
A line feed, or newline, is specified with <tt>\n</tt>.  A horizontal
tab is specified with </tt>\t</tt>.  A single quote is specified with
</tt>\'</tt> and a double quote is specified with <tt>\"</tt>.  Other
ASCII characters can be specified numerically either
a) in octal by using the sequence <tt>\</tt><i>ddd</i> where <i>ddd</i>
is an octal number; or
b) in hexadecimal by using the sequence <tt>\x</tt><i>dd</i> where <i>dd</i>
is a hexadecimal number; or
c) in binary by using the sequence <tt>\y</tt><i>dddddddd</i> where
<i>dddddddd</i> is a binary number.

<blockquote>
<pre>"this is a string"
'this is a token'
"this is a string with a newline (\n) in it"
'this is a token with a \' character in it'
"this is a string with an ASCII rub (\177) in octal"
</pre>
</blockquote>

<p>
<b>Identifiers and Keywords</b>.
<i>Identifiers</i> are used to name functions, variables and constants.
An identifier is a sequence of letters and digits. The first character must
be a letter.  The underscore character <tt>_</tt> is considered to be a 
letter. An identifier should not be longer than 78 characters.  Identifiers are
case-sensitive.
The following identifiers are <i>reserved words</i> or <i>keywords</i>,
and cannot be used to name definable objects (variables, functions, etc.):

<blockquote>
<pre>
and      app         apt     break    const   continue   else
elseif   endfunction endif   endloop  for     function   global    
goto     if          in      let      local   loop       or
print    return      static  then     until   var        while
</pre>
</blockquote>

<P>
<b>Operators and Symbols</b>.
Operators and symbols are single or multiple special characters that have
special meaning to the SVL compiler. Some are shorthand notations for
frequently called functions.  Other are used as punctuation. The following
symbols are used in SVL:

<blockquote>
<pre>
+         -         *         /         //        /*        */
&lt;         &gt;         &lt;&gt;        &lt;=        &gt;=        ==        ===
=         |         ||        [         ]         (         )
,         ;         :         .         #
</pre>
</blockquote>

<P>
<b>Compiler Directives</b>.
Compiler directives are special instructions directed to the compiler.
All compiler directives must begin with the
<tt>#</tt> symbol at the beginning of the line, column 1.  The
name itself, however,  may be indented.  For example, 

<pre>
    #if
    #   if
</pre>

are both valid formats, assuming the <tt>#</tt> is in column 1.  The following
directives are recognized by the compiler:
<p>
<blockquote>
<dl>
<dt><tt>#svl</tt>
<dd>
The compiler directive <tt>#svl</tt> is normally placed in the
first line of an SVL file.  Any characters typed in after the <tt>svl</tt>
but on the same line are ignored by the compiler.  This compiler
directive is used by the file open system to interpret SVL files quickly.
<p>
<dt><tt>#!</tt>
<dd>
The <tt>#!</tt> compiler directive is ignored. On UNIX machines
this compiler directive is used to start batch jobs.
<p>
<dt><tt>#if</tt> <i>n</i>
<dd>
The <tt>#if</tt> directive is used exclude certain portions of an SVL
file from compilation.  If <i>n</i> (which must be a numeric constant) is
non-zero then all statements between the <tt>#if</tt> and the subsequent
<tt>#else</tt>, <tt>#elseif</tt> or <tt>#endif</tt> directive are included and,
thereafter, all code up to the associated <tt>#endif</tt> is excluded. 
<p>
<dt><tt>#elseif</tt> <i>m</i>
<dd>
The <tt>#elseif</tt> directive must appear after an <tt>#if</tt> or
<tt>#elseif</tt> directive.  If previous <i>n</i> and <i>m</i> values
have evaluated to zero and if <i>m</i> is nonzero then all statements
between the <tt>#elseif</tt> and the subsequent <tt>#else</tt>,
<tt>#elseif</tt> or <tt>#endif</tt> directive are included and, thereafter,
all code up to the associated <tt>#endif</tt> is excluded. 
<p>
<dt><tt>#else</tt>
<dd>
The <tt>#else</tt> directive is used to specify a default case if all previous
<tt>#if</tt> and <tt>#elseif</tt> directives evaluated to zero.  In this case
the code enclosed between the <tt>#else</tt> directive and the <tt>#endif</tt>
is included.  
<p>
<dt><tt>#endif</tt>
<dd>
The <tt>#endif</tt> directive is used for terminating the <tt>#if</tt> and 
is required (to mark then end of the entire directive).
<p>
<dt><tt>#token<br />#string</br>#</tt>
<dd>
SVL provides a special syntax for easier definition of long, multi-line
strings and tokens.  All lines between the compiler directives
<tt>#string</tt> (<tt>#token</tt>) and <tt>#</tt> are interpreted as the
contents of a string (token) literal.
<p>
Several rules apply when using the <tt>#string</tt> and <tt>#token</tt>
directives.
The contents of the initial <tt>#string</tt> (or <tt>#token</tt>)
line is ignored.
The contents of the terminating <tt>#</tt> line is <b>not</b> ignored;
everything after the <tt>#</tt> character is interpreted as
SVL code.

<p>
There is an implicit new-line <tt>('\n')</tt> terminator at the end of each
line between the initial <tt>#string</tt> (or <tt>#token</tt>) and the final
<tt>#</tt>, except for lines that end with the backslash character
<tt>(\)</tt>.

<p>
White-space (space and tab characters), between the <tt>#</tt> and the
identifier <tt>string</tt> (or <tt>token</tt>) is allowed.  If this is done
then the compiler will ignore white space at the beginning of each line of the
string or token <b>up to the column in which the first character of the
identifier (<tt>string</tt> or <tt>token</tt>) lies</b>.

<p>
For example, if a string is introduced with
"<tt>#&nbsp;&nbsp;&nbsp;string</tt>", then the compiler will ignore up to three
white spaces at the start of each line, as the word "<tt>string</tt>" starts in
the fourth column.  If a subsequent line begins with more than three white
spaces, the balance of white space would become part of the string.  A tab
character ('<tt>\t</tt>') is considered to be white space, advancing to the
nearest greater multiple of 8.

<p>Examples:

<p><table class="titlebar" border="1" cellpadding="3">
<tr>
<th>SVL Expression</th>
<th>Equivalent Expression</th>
</tr>

<tr>
<td>
<pre>
    const STR =
    #	string
	Line 1,
	and line 2
    #	;
</pre>


<td>
<pre>
    const STR = "Line 1,\nand line 2\n";
</pre>


<tr>
<td valign="top">
<pre>
    const TOK =
    #	token
	   Part 1, \
	and part 2.\
    #;
</pre>

<td>
<pre>
    const TOK = 'Part 1, and part 2.';
</pre>

<tr>
<td valign="top">
<pre>
    print swrite [ fmt,
    #	token
	x,
	y.
    #   ,
    #	token
	a,
	b.
    #   ];
</pre>

<td>
<pre>
    print swrite [fmt, 'x,\ny.\n', 'a,\nb.\n'];
</pre>
</table>


</dl>
</blockquote>

</ul>


<h2>See Also</h2>

<a href="s_expr.htm">SVL Expressions</a><br />
<a href="s_stmt.htm">SVL Statements</a><br />
<a href="s_decl.htm">SVL Declarations</a><br />
<a href="symbol.htm">Symbol Table Functions</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
