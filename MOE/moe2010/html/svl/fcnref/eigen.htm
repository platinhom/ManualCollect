<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--	eigen.htm	Eigenvalues and eigenvectors
!!
!!  	16-sep-2008 (ac) added see also
!!	20-jan-2003 (ms) last update (example on symeigensystem)
!!-->
<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions symeigenvalues>
<meta functions symeigensystem>
<meta functions symtridiagonal>

<title>Eigenvalues and Eigenvectors</title>

</head>
<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Eigenvalues and Eigenvectors</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<pre>
    eigenvalues                = <a class="fcnlink" href="#symeigenvalues">symeigenvalues</a> matrix
    [eigenvalues,eigenvectors] = <a class="fcnlink" href="#symeigensystem">symeigensystem</a> matrix
    [diag1, diag2, Q]          = <a class="fcnlink" href="#symtridiagonal">symtridiagonal</a> matrix
</pre>

<h2>Description</h2>

<p>
Let <i>A</i> denote a symmetric square matrix.  In SVL, such a matrix is
represented by a vector of vectors, <tt>A</tt>, such that
<tt>A(i)(j)</tt> = <i>A<sub>ij</sub></i>.  Because <i>A</i> is symmetric
it can be factored as:
<p>
<center><i>A</i> = <i>Q</i><sup>T</sup> <i>D Q</i></center>
<p>
where <i>D</i> is diagonal and <i>Q</i><sup>T</sup><i>Q</i> = <i>I</i>.  The
diagonal elements of <i>D</i> are the eigenvalues and the rows of <i>Q</i>
are the eigenvectors.


<p><a name="symeigenvalues"></a></p>
<p><hr noshade="noshade" />

<pre>
eigenvalues = <span class="fcndef">symeigenvalues</span> matrix
</pre>

<p>Returns a vector containing the
diagonal elements of <i>D</i> (the eigenvalues of <i>A</i>).

<p><a name="symeigensystem"></a></p>
<p><hr noshade="noshade" />

<pre>
[eigenvalues,eigenvectors] = <span class="fcndef">symeigensystem</span> matrix
</pre>

<p>Returns a two element vector, the
first element of which is the vector containing the diagonal elements of
<i>D</i> (the eigenvalues of <i>A</i>) and the second element contains the
matrix <i>Q</i> (the rows are the eigenvectors).

<p>Any real symmetric matrix can be factored as

<p>
<center><i>A</i> = <i>Q</i><sup>T</sup> <i>R Q</i></center>
<p>
where <i>R</i> is symmetric tridiagonal and
<i>Q</i><sup>T</sup><i>Q</i> = <i>I</i>.  

<p><a name="symtridiagonal"></a></p>
<p><hr noshade="noshade" />

<pre>
[diag1, diag2, Q] = <span class="fcndef">symtridiagonal</span> matrix
</pre>

<p>Returns a three element vector <tt>[diag1,diag2,Q]</tt> where
<tt>diag1</tt> is a vector containing the diagonal elements of <i>R</i>,
<tt>diag2</tt> is a vector containing the immediate off-diagonal elements of
<i>R</i>, and <tt>Q</tt> is the orthogonal transform matrix.

<p>All three functions are invariant to permutations of the rows and columns of
the input matrix.  The results are undefined for asymmetric matrices.

<p><hr noshade="noshade" />
<h2>Example</h2>

<p>
<b>Example 1.</b> Find matrix inverse of a symmetric matrix:

<p>To find the eigenvalues, e, and the eigenvectors, Q, of the symmetric
matrix M:

<pre>
    svl&gt; M = [[5,-2,-1,0], [-2,5,0,-1], [-1,0,5,-2], [0,-1,-2,5]]

    svl&gt; [e,Q] = <span class="fcndef">symeigensystem</span> M

    svl&gt; e
    [8,6,4,2]

    svl&gt; apt write ['{n:5.2f}\n', Q];
     0.50 -0.50 -0.50  0.50
    -0.50  0.50 -0.50  0.50
     0.50  0.50 -0.50 -0.50
     0.50  0.50  0.50  0.50

    svl&gt; apt write ['{n:5.2f}\n', rot3d_mmMul [tr Q, e * Q]];
     5.00 -2.00 -1.00 -0.00
    -2.00  5.00 -0.00 -1.00
    -1.00 -0.00  5.00 -2.00
    -0.00 -1.00 -2.00  5.00
</pre>

<p>To find the inverse, inv_M, by inverting the eigenvalues e:

<pre>
    svl&gt; inv_M = rot3d_mmMul [tr Q, inv e * Q]

    svl&gt; apt write ['{n:5.2f}\n', rot3d_mmMul [M, inv_M]];
     1.00  0.00  0.00  0.00
     0.00  1.00  0.00  0.00
     0.00  0.00  1.00  0.00
     0.00  0.00  0.00  1.00
</pre>

<p>
<b>Example 2.</b> The following code will align the principal axes of inertia of a loaded
molecule along the X, Y, Z coordinate axes:

<pre>
    svl&gt; a = Atoms []
    svl&gt; p = aPos a
    svl&gt; c = oCentroid a
    svl&gt; M = split [app add cat ([p-c] * app nest (p-c)), 3]
    svl&gt; [e,Q] = symeigensystem M
    svl&gt; Q(3) = rot3d_vCross keep [Q,2]
    svl&gt; aSetPos [a, rot3d_mmMul [Q,p-c]+c]
</pre>

<h2>See Also</h2>

<p>
<a href="matlib.htm">Matrix Operations</a>


<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
