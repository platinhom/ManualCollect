<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta functions aArticulator>
<meta functions aAtomicNumber, aHydrogens, aLonePairs, aHeavyValence>
<meta functions aBackbone, aSetBackbone>
<meta functions aBondCount, aRingBondCount>
<meta functions aBonds, aBondOrder, aRotatableBonds>
<meta functions aChiDegV>
<meta functions aDFSIn, aDFSOut>
<meta functions aDegree, aExplicitDegree>
<meta functions aElement, aSetElement>
<meta functions aFCharge, aExplicitFCharge>
<meta functions aGeometry, aSetGeometry>
<meta functions aHCount, aExplicitHCount>
<meta functions aHintLP, aSetHintLP>
<meta functions aIdealVSA>
<meta functions aInRing, aInHRing, aMoleculeNumber>
<meta functions aIn8Ring, aIn7Ring, aIn6Ring, aIn5Ring, aIn4Ring, aIn3Ring>
<meta functions aIon, aSetIon>
<meta functions aName, aSetName>
<meta functions aNumber>
<meta functions aPrioCIP, aPrioSMI, aPrioZQH>
<meta functions aTempFactor, aSetTempFactor>
<meta functions aOccupancy, aSetOccupancy>
<meta intro Atom Fundamental Properties>

<title>Atom Fundamental Properties</title>
</head>
<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Atom Fundamental Properties</h2>
<hr noshade="noshade" />


<h2>Syntax</h2>

<pre>
    atnos        = <a class="fcnlink" href="#aAtomicNumber">aAtomicNumber</a>    atom_keys
    flags        = <a class="fcnlink" href="#aArticulator">aArticulator</a>     atom_keys
    flags        = <a class="fcnlink" href="#aBackbone">aBackbone</a>        atom_keys
    counts       = <a class="fcnlink" href="#aBondCount">aBondCount</a>       atom_keys
    order_lists  = <a class="fcnlink" href="#aBondOrder">aBondOrder</a>       atom_keys
    atom_lists   = <a class="fcnlink" href="#aBonds">aBonds</a>           atom_keys
    chiv_degrees = <a class="fcnlink" href="#aChiDegV">aChiDegV</a>         atom_keys
    bond_counts  = <a class="fcnlink" href="#aDegree">aDegree</a>          atom_keys
    in_times     = <a class="fcnlink" href="#aDFSIn">aDFSIn</a>           atom_keys
    out_times    = <a class="fcnlink" href="#aDFSOut">aDFSOut</a>          atom_keys
    el_tokens    = <a class="fcnlink" href="#aElement">aElement</a>         atom_keys
    bond_counts  = <a class="fcnlink" href="#aExplicitDegree">aExplicitDegree</a>  atom_keys
    charges      = <a class="fcnlink" href="#aExplicitFCharge">aExplicitFCharge</a> atom_keys
    h_counts     = <a class="fcnlink" href="#aExplicitHCount">aExplicitHCount</a>  atom_keys
    charges      = <a class="fcnlink" href="#aFCharge">aFCharge</a>         atom_keys
    geom_tokens  = <a class="fcnlink" href="#aGeometry">aGeometry</a>        atom_keys
    heavy_counts = <a class="fcnlink" href="#aHeavyValence">aHeavyValence</a>    atom_keys
    h_counts     = <a class="fcnlink" href="#aHCount">aHCount</a>          atom_keys
    flags        = <a class="fcnlink" href="#aHintLP">aHintLP</a>          atom_keys
    h_counts     = <a class="fcnlink" href="#aHydrogens">aHydrogens</a>       atom_keys
    vdw_areas    = <a class="fcnlink" href="#aIdealVSA">aIdealVSA</a>        atom_keys
    flags        = <a class="fcnlink" href="#aIn3Ring">aIn3Ring</a>         atom_keys
    flags        = <a class="fcnlink" href="#aIn4Ring">aIn4Ring</a>         atom_keys
    flags        = <a class="fcnlink" href="#aIn5Ring">aIn5Ring</a>         atom_keys
    flags        = <a class="fcnlink" href="#aIn6Ring">aIn6Ring</a>         atom_keys
    flags        = <a class="fcnlink" href="#aIn7Ring">aIn7Ring</a>         atom_keys
    flags        = <a class="fcnlink" href="#aIn8Ring">aIn8Ring</a>         atom_keys
    flags        = <a class="fcnlink" href="#aInHRing">aInHRing</a>         atom_keys
    flags        = <a class="fcnlink" href="#aInRing">aInRing</a>          atom_keys
    ionizations  = <a class="fcnlink" href="#aIon">aIon</a>             atom_keys
    lp_counts    = <a class="fcnlink" href="#aLonePairs">aLonePairs</a>       atom_keys
    mol_numbers  = <a class="fcnlink" href="#aMoleculeNumber">aMoleculeNumber</a>  atom_keys
    name_tokens  = <a class="fcnlink" href="#aName">aName</a>            atom_keys
    index        = <a class="fcnlink" href="#aNumber">aNumber</a>          atom_keys
    occupancies  = <a class="fcnlink" href="#aOccupancy">aOccupancy</a>       atom_keys
    prio_numbers = <a class="fcnlink" href="#aPrioCIP">aPrioCIP</a>         atom_keys
    prio_numbers = <a class="fcnlink" href="#aPrioSMI">aPrioSMI</a>         atom_keys
    prio_numbers = <a class="fcnlink" href="#aPrioZQH">aPrioZQH</a>         atom_keys
    counts	 = <a class="fcnlink" href="#aRingBondCount">aRingBondCount</a>   atom_keys
    atom_lists   = <a class="fcnlink" href="#aRotatableBonds">aRotatableBonds</a>  atom_keys
    temp_factors = <a class="fcnlink" href="#aTempFactor">aTempFactor</a>      atom_keys

    <a class="fcnlink" href="#aSetBackbone">aSetBackbone</a>   [atom_keys, flags]
    <a class="fcnlink" href="#aSetElement">aSetElement</a>    [atom_keys, el_tokens]
    <a class="fcnlink" href="#aSetGeometry">aSetGeometry</a>   [atom_keys, geom_tokens]
    <a class="fcnlink" href="#aSetHintLP">aSetHintLP</a>     [atom_keys, flags]
    <a class="fcnlink" href="#aSetIon">aSetIon</a>        [atom_keys, ionizations]
    <a class="fcnlink" href="#aSetName">aSetName</a>       [atom_keys, name_tokens]
    <a class="fcnlink" href="#aSetTempFactor">aSetTempFactor</a> [atom_keys, temp_factors]
    <a class="fcnlink" href="#aSetOccupancy">aSetOccupancy</a>  [atom_keys, occupancies]
</pre>

<p><a name="aAtomicNumber"></a></p><h2>Description</h2>

<p>
In MOE, molecular data is organized as a hierarchy of <i>molecular
objects</i> or <i>objects</i>.  MOE stores atom information in separate
internal data structures.  Atoms are referenced with an object key, which
is a unique number identifying the atom object.  The many atom functions
provided by MOE cover the following broad categories:

<ul>
<li><a href="atom.htm">Fundamental Properties</a> (this page)
<li><a href="atom_p.htm">Potential Properties</a>
<li><a href="atom_d.htm">Display Properties</a>
<li><a href="atom_g.htm">Geometry</a>
</ul>

<p>
The following functions can be used to obtain atom information:

<!-- DESC -->

<p>
<table class="titlebar" width="100%" border="1" cellpadding="3">

<tr>
<th>Function</th>
<th>Description</th>
</tr>

<tr>
<td valign="baseline">
<a name="aAtomicNumber"></a><tt>aAtomicNumber</tt>
<td valign="baseline">
Returns the atomic number of each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
atnos = <span class="fcndef">aAtomicNumber</span> atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aArticulator"></a><tt>aArticulator</tt>
<td valign="baseline">
Returns a value of 1 for each atom that, if deleted, would disconnect the
molecular graph (i.e. introduce a new component), 0 otherwise.
This function can be used on arbitrarily nested vectors.

<pre>
flags = aArticulator atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aBackbone"></a><tt>aBackbone</tt>
<td valign="baseline">
Returns a value of 1 for each atom that is considered to be a backbone
atom, 0 otherwise.  The backbone flag is used by some applications
(notably protein applications) to identify the backbone of a polymer.
This function can be used on arbitrarily nested vectors.

<pre>
flags = aBackbone atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aBondCount"></a><tt>aBondCount</tt>
<td valign="baseline">
Returns the number of explicit bonds on each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
counts = aBondCount atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aBondOrder"></a><tt>aBondOrder</tt>
<td valign="baseline">
Returns for each atom in the argument a list of the bond orders (1,2,3) of
all bonds on that atom.  This function applies to flat vectors only.

<pre>
order_lists = aBondOrder atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aBonds"></a><tt>aBonds</tt>
<td valign="baseline">
Returns for each atom in the argument a list of its bonded neighbor atoms.
This function applies to flat vectors only.

<pre>
atom_lists = aBonds atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aChiDegV"></a><tt>aChiDegV</tt>
<td valign="baseline">
Returns, for each atom in the argument, the "chiv" degree that is used in
Kier and Hall ([Hall 1991] and [Hall 1997]) chi connectivity index
calculations.  The chiv degree is calculated to be, for a given atom,
<i>v=(p-h)/(Z-p-1)</i>, where <i>p</i> is the number of s and p valence
electrons, <i>h</i> is the total number of attached hydrogens, and
<i>Z</i> is the atomic number.  Note: the return values are meaningful
for heavy (non-hydrogen non-lone pair) atoms only.
This function applies to flat vectors only.

<pre>
chiv_degrees = aChiDegV atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aDegree"></a><tt>aDegree</tt>
<td valign="baseline">
Returns the number of neighbors, including all (both explicit and
implicit) hydrogens but ignoring lone pairs, of each atom in the argument.
This function applies to flat vectors only.

<pre>
bond_counts = aDegree atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aDFSIn"></a>
<a name="aDFSOut"></a><tt>aDFSIn</tt><br /><tt>aDFSOut</tt>
<td valign="baseline">
Return integer codes obtained from a Depth First Search (DFS) traversal of
the molecular graph.  A counter is maintained during the traversal and
incremented as the atoms are traversed.  The In time is the value of the
counter when an atom is first encountered and the Out time is the value of
the counter when the atom's descendents (in the DFS traversal) have all
been traversed.  Thus, for each atom <i>i</i>,  an interval
I<i><sub>i</sub></i> = [In<i><sub>i</sub></i>, Out<i><sub>i</sub></i>] is
defined.  Atom <i>i</i> is the ancestor of atom <i>j</i> only if interval
I<i><sub>i</sub></i> contains interval I<i><sub>j</sub></i>.  The DFS
numbers change arbitrarily between edits to the molecular system.
These functions can be used on arbitrarily nested vectors.

<pre>
in_times = aDFSIn atom_keys
out_times = aDFSOut atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aElement"></a><tt>aElement</tt>
<td valign="baseline">
Returns the element symbol token of each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
el_tokens = aElement atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aExplicitDegree"></a><tt>aExplicitDegree</tt>
<td valign="baseline">
Returns the number of neighbors, including explicit hydrogens (excluding
implicit hydrogens) but ignoring lone pairs, of each atom in the
argument.
This function applies to flat vectors only.

<pre>
bond_counts = aExplicitDegree atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aExplicitFCharge"></a><tt>aExplicitFCharge</tt>
<td valign="baseline">
Returns the formal charge of each atom in the argument.
Implicit hydrogens and lone pairs are excluded from the calculations.
This function can be used on arbitrarily nested vectors.

<pre>
charges = aExplicitFCharge atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aExplicitHCount"></a><tt>aExplicitHCount</tt>
<td valign="baseline">
Returns the number of explicit hydrogen atoms attached to each atom in
the argument.
This function can be used on arbitrarily nested vectors.
<pre>
h_counts = aExplicitHCount atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aFCharge"></a><tt>aFCharge</tt>
<td valign="baseline">
Returns the formal charge of each atom in the argument, taking into
consideration all implicit hydrogens and lone pairs.
This function can be used on arbitrarily nested vectors.

<pre>
charges = aFCharge atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aGeometry"></a><tt>aGeometry</tt>
<td valign="baseline">
Returns the geometry symbol token of each atom in the argument.  The
geometry token gives the atom's hybridization state.  Legal values are
defined in the <a class="svl" href="moe_const.html">EL_GEOMETRIES</a>
constant: <tt>'sp'</tt>, <tt>'sp2'</tt>, <tt>'sp3'</tt>, <tt>'dsp3'</tt>,
<tt>'d2sp3'</tt> and <tt>'d3sp3'</tt>.
This function can be used on arbitrarily nested vectors.

<pre>
geom_tokens = aGeometry atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aHCount"></a><tt>aHCount</tt>
<td valign="baseline">
Returns the total number of hydrogen atoms (explicit plus implicit) attached
to each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
h_counts = aHCount atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aHeavyValence"></a><tt>aHeavyValence</tt>
<td valign="baseline">
Returns the number of heavy atoms (non-hydrogen non-lone pair) attached to
each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
heavy_counts = aHeavyValence atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aHintLP"></a><tt>aHintLP</tt>
<td valign="baseline">
Returns the "lone pair hint" flag for each atom in the argument.  A value
of 1 indicates that the atom does not have a lone pair of electrons 
participating in a pi orbital system; a value of 0 indicates that it does.
This flag is most often used to establish correct bond orders on atoms
iso-electronic to nitrogen.
This function can be used on arbitrarily nested vectors.

<pre>
flags = aHintLP atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aHydrogens"></a><tt>aHydrogens</tt>
<td valign="baseline">
Returns the number of explicit hydrogen atoms attached to each atom in
the argument.
This function can be used on arbitrarily nested vectors.

<pre>
h_counts = aHydrogens atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aIdealVSA"></a><tt>aIdealVSA</tt>
<td valign="baseline">
Returns the idealized van der Waals surface area for each atom in the
argument.  Occlusions caused by neighboring atoms are subtracted, with
ideal interatomic distances being assumed.  Note that only those
neighboring atoms specified in the argument are taken into account --
atoms not in the argument are ignored.
This function applies to flat vectors only.

<pre>
vdw_areas = aIdealVSA atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aIn3Ring"></a>
<a name="aIn4Ring"></a>
<a name="aIn5Ring"></a>
<a name="aIn6Ring"></a>
<a name="aIn7Ring"></a>
<a name="aIn8Ring"></a>
<tt>aIn#Ring</tt>
<td valign="baseline">
Returns a value of 1 for each atom that is in a ring of the specified
size, 0 otherwise.  For example, <tt>aIn5Ring</tt> will return 1
for each atom that is in a ring of size 5.
This function can be used on arbitrarily nested vectors.

<pre>
flags = aIn3Ring atom_keys
flags = aIn4Ring atom_keys
flags = aIn5Ring atom_keys
flags = aIn6Ring atom_keys
flags = aIn7Ring atom_keys
flags = aIn8Ring atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aInHRing"></a><tt>aInHRing</tt>
<td valign="baseline">
Returns 1 for each atom that is in a ring satisfying the Huckel rule
(4<i>n</i>+2 pi electrons, <i>n</i> is an integer), 0 otherwise.
This function can be used on arbitrarily nested vectors.

<pre>
flags = aInHRing atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aInRing"></a><tt>aInRing</tt>
<td valign="baseline">
Returns a value of 1 for each atom that is in a ring (of any size), 0
otherwise.
This function can be used on arbitrarily nested vectors.

<pre>
flags = aInRing atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aIon"></a><tt>aIon</tt>
<td valign="baseline">
Returns the ionization state (integer) of each atom in the argument.  A
value of 0 indicates a neutral atom.  This is not necessarily the formal
charge although it is suggested that it be set to the formal charge
whenever possible.
This function can be used on arbitrarily nested vectors.

<pre>
ionizations = aIon atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aLonePairs"></a><tt>aLonePairs</tt>
<td valign="baseline">
Returns the number of explicit lone pair pseudo-atoms attached to each
atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
lp_counts = aLonePairs atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aMoleculeNumber"></a><tt>aMoleculeNumber</tt>
<td valign="baseline">
Returns the connected component number of each atom in the argument (starting
from 1).  Two atoms have the same molecule number if there is a path
through the molecular graph joining one to the other.  The molecule numbers
are arbitrary integers and can change between edits of the system.
This function can be used on arbitrarily nested vectors.

<pre>
mol_numbers = aMoleculeNumber atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aName"></a><tt>aName</tt>
<td valign="baseline">
Returns the atom name token of each atom in the argument.  Atom names can
be up to four characters with no spaces.  Empty names are not permitted.
Atom names are automatically converted to uppercase.
This function can be used on arbitrarily nested vectors.

<pre>
name_tokens = aName atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aNumber"></a><tt>aNumber</tt>
<td valign="baseline">
Returns the atom index in the system; this is equivalent to
<tt>indexof [atom_keys, Atoms[]]</tt>.
This function can be used on arbitrarily nested vectors.
<pre>
index_numbers = aNumber atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aOccupancy"></a><tt>aOccupancy</tt>
<td valign="baseline">
Returns the crystallographic occupancy (as provided in PDB files, for example)
for each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
occupancies = aOccupancy atom_keys
</pre>


<tr>
<td valign="baseline">
<a name="aPrioCIP"></a><tt>aPrioCIP</tt>
<td valign="baseline">
Returns the CIP (Cahn-Ingold-Prelog) priority number of each atom in the
argument.  This number can be used, for example, to determine R/S chirality.
Higher values correspond to higher priorities.
This function can be used on arbitrarily nested vectors.

<pre>
prio_numbers = aPrioCIP atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aPrioSMI"></a><tt>aPrioSMI</tt>
<td valign="baseline">
Returns a priority number for each atom in the argument.  This number is
computed from atomic number, heavy valence, total hydrogen count,
formal charge and molecular connectivity, and can be used to obtain a
unique molecule input language string representation of a molecule.
Higher values correspond to higher priorities.
This function applies to flat vectors only.

<pre>
prio_numbers = aPrioSMI atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aPrioZQH"></a><tt>aPrioZQH</tt>
<td valign="baseline">
Returns a priority number for each atom in the argument.  This number is
computed from atomic number, heavy valence, total hydrogen count
and molecular connectivity.
Higher values correspond to higher priorities.
This function applies to flat vectors only.

<pre>
prio_numbers = aPrioZQH atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aRingBondCount"></a><tt>aRingBondCount</tt>
<td valign="baseline">
Returns the number of ring bonds on each atom in the argument (ring degree).
This function can be used on arbitrarily nested vectors.

<pre>
counts = aRingBondCount atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aRotatableBonds"></a><tt>aRotatableBonds</tt>
<td valign="baseline">
Returns for each atom in the argument a list of the atoms
bonded to it by rotatable bonds.
This function applies to flat vectors only.

<pre>
atom_lists = aRotatableBonds atom_keys
</pre>

<tr>
<td valign="baseline">
<a name="aTempFactor"></a><tt>aTempFactor</tt>
<td valign="baseline">
Returns <i>B</i>,
the temperature factor (as provided in PDB files, for example), for
each atom in the argument.
This function can be used on arbitrarily nested vectors.

<pre>
temp_factors = aTempFactor atom_keys
</pre>

</table>

<!-- ENDDESC -->

<P>
The following functions can be used to modify atom information:

<p><b>Note:</b> All functions described below can be used
on arbitrarily nested vectors.

<!-- DESC -->

<p>
<table class="titlebar" width="100%" border="1" cellpadding="3">

<tr>
<th>Function</th>
<th>Description</th>
</tr>

<tr>
<td valign="baseline">
<a name="aSetBackbone"></a><tt>aSetBackbone</tt>
<td valign="baseline">
Sets the backbone flag of each given atom.  A non-zero flag value
indicates that the atom is to be considered as being on the backbone of a
molecule.  The backbone flag is used primarily in protein and polymer
applications.

<pre>
aSetBackbone [atom_keys, flags]
</pre>

<tr>
<td valign="baseline">
<a name="aSetElement"></a><tt>aSetElement</tt>
<td valign="baseline">
Sets the element symbol token of each given atom.
Note: this function does not adjust the number of hydrogens attached to the
atoms.

<pre>
aSetElement [atom_keys, el_tokens]
</pre>

<tr>
<td valign="baseline">
<a name="aSetGeometry"></a><tt>aSetGeometry</tt>
<td valign="baseline">
Sets the hybridization token of each given atom. Legal values are defined
in the <a class="svl" href="moe_const.html">EL_GEOMETRIES</a> constant:
<tt>'sp'</tt>, <tt>'sp2'</tt>, <tt>'sp3'</tt>, <tt>'dsp3'</tt>,
<tt>'d2sp3'</tt> and <tt>'d3sp3'</tt>.
Note: this function does not adjust the number of hydrogens attached to the
atoms.

<pre>
aSetGeometry [atom_keys, geom_tokens]
</pre>

<tr>
<td valign="baseline">
<a name="aSetHintLP"></a><tt>aSetHintLP</tt>
<td valign="baseline">
Sets the "lone pair hint" flag of each given atom.  A non-zero value
indicates that the atom does not have a lone pair of electrons
participating in a pi orbital system.  This flag is most often used to
establish correct bond orders on atoms iso-electronic to nitrogen.
Note: this function does not adjust the number of hydrogens attached to the
atoms.

<pre>
aSetHintLP [atom_keys, flags]
</pre>

<tr>
<td valign="baseline">
<a name="aSetIon"></a><tt>aSetIon</tt>
<td valign="baseline">
Sets the ionization state of each given atom.  A value of 0 indicates a
neutral atom. This is not necessarily the formal charge although it is
suggested that it be set to the formal charge whenever possible.
Note: this function does not adjust the number of hydrogens attached to the
atoms.

<pre>
aSetIon [atom_keys, ionizations]
</pre>

<tr>
<td valign="baseline">
<a name="aSetName"></a><tt>aSetName</tt>
<td valign="baseline">
Sets the name of each given atom.  Names are automatically converted to
uppercase and blanks are stripped.  The resulting name is truncated to
a maximum of four characters.

<pre>
aSetName [atom_keys, name_tokens]
</pre>

<tr>
<td valign="baseline">
<a name="aSetOccupancy"></a><tt>aSetOccupancy</tt>
<td valign="baseline">
Sets the occupancy of each given atom (floating point value between 0 and 1).

<pre>
aSetOccupancy [atom_keys, occupancies]
</pre>


<tr>
<td valign="baseline">
<a name="aSetTempFactor"></a><tt>aSetTempFactor</tt>
<td valign="baseline">
Sets the temperature factor of each given atom (floating point value).

<pre>
aSetTempFactor [atom_keys, temp_factors]
</pre>

</table>

<!-- ENDDESC -->

<h2>References</h2>

<table width="100%" cellpadding="5" border="0">

<tr>
<td valign="baseline">[Hall&nbsp;1991]
<td valign="baseline">
Hall, L.H. and Kier, L.B. The Molecular Connectivity Chi Indices and Kappa
Shape Indices in Structure-Property Modeling. <I>Reviews of Computational
Chemistry</I>. 2, (1991).

<tr>
<td valign="baseline">[Hall&nbsp;1997]
<td valign="baseline">
Hall, L.H. and Kier, L.B. The Nature of Structure-Activity Relationships and
Their Relation to Molecular Connectivity. <I>Eur. J. Med. Chem. - Chimica
Therapeutica</I>. 4, 307-312, (1997).

</table>

<h2>See Also</h2>
<p>
<a class="svl" href="achain.html">aChain</a>
<a class="svl" href="achain.html">aResidue</a>
</p>

<p>
<a href="atom_d.htm">Atom Display Functions</a><br />
<a href="atom_p.htm">Atom Potential Functions</a>
</p>

<p>
<a href="residue.htm">Residue Functions</a><br />
<a href="chain.htm">Chain Functions</a><br />
<a href="obj.htm">Object Functions</a><br />
<a href="bond.htm">Bond Functions</a>
</p>

<p>
<a href="../molsystems/molrep.html">Representation of Molecular Systems in MOE</a>
</p>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
