define({"3479":{i:0.000141529169833031,u:"../maestro_command_reference/viewrestore.html",a:"viewrestore Restores the viewing transform corresponding to the view name.  Syntax: viewrestore [\u003cview_name\u003e ]\n Operands: \u003cview_name\u003e  A valid view name existing in the current views table. ",t:"viewrestore"},"3480":{i:0.000141529169832965,u:"../maestro_command_reference/viewrestorerow.html",a:"viewrestorerow Restore the transform of the view corresponding to the given row.  Syntax: viewrestorerow [\u003crow\u003e ]\n Operands: \u003crow\u003e  A valid row in the views table. ",t:"viewrestorerow"},"3481":{i:0.000141529169832357,u:"../maestro_command_reference/viewsave.html",a:"viewsave Saves the current viewing transform.  Syntax: viewsave pause= \u003cn\u003e play= yes | no select= yes | no [\u003cview_name\u003e ]\n Options: pause Pause value of the view. ",t:"viewsave"},"3482":{i:0.000141529169831346,u:"../maestro_command_reference/viewselect.html",a:"viewselect Select the given view in the current views table.  Syntax: viewselect [\u003cview_name\u003e ]\n Operands: \u003cview_name\u003e  A valid view name existing in the current views table. ",t:"viewselect"},"3483":{i:0.000141529169826392,u:"../maestro_command_reference/viewselectonly.html",a:"viewselectonly Select only the given view in the current views table.  Syntax: viewselectonly [\u003cview_name\u003e ]\n Operands: \u003cview_name\u003e  A valid view name existing in the current views table. ",t:"viewselectonly"},"3484":{i:0.000141529169814141,u:"../maestro_command_reference/viewselectonlyrow.html",a:"viewselectonlyrow Select only the view corresponding to the row in the current views table and unselct remaining views.  Syntax: viewselectonlyrow [\u003crow\u003e ]\n Operands: \u003crow\u003e  A valid row in the views table. ",t:"viewselectonlyrow"},"3485":{i:0.000141529169768838,u:"../maestro_command_reference/viewselectrow.html",a:"viewselectrow Select the view corresponding to the given row in the current views table.  Syntax: viewselectrow [\u003crow\u003e ]\n Operands: \u003crow\u003e  A valid row in the views table. ",t:"viewselectrow"},"3486":{i:0.000141529169634557,u:"../maestro_command_reference/viewsetpause.html",a:"viewsetpause Sets the pause value to the given view.  Syntax: viewsetpause [\u003cview_name\u003e \u003cpause_value\u003e ]\n Operands: \u003cview_name\u003e \u003cpause_value\u003e  A valid view name existing in the current views table. A valid pause value greater than -1. ",t:"viewsetpause"},"3487":{i:0.000141529169185528,u:"../maestro_command_reference/viewsetplay.html",a:"viewsetplay Set the play state of the given view.  Syntax: viewsetplay [\u003cview_name\u003e ]\n Operands: \u003cview_name\u003e  A valid view name existing in the current views table. ",t:"viewsetplay"},"3488":{i:0.000141529167768858,u:"../maestro_command_reference/viewsetrowpause.html",a:"viewsetrowpause Set the given pause value to the view corresponding to the row in the current views table.  Syntax: viewsetrowpause [\u003crow\u003e \u003cpause\u003e ]\n Operands: \u003crow\u003e \u003cpause\u003e  A row number between 1 and the total number of rows in the views table. A valid pause value greater than -1. ",t:"viewsetrowpause"},"3489":{i:0.000141529163167744,u:"../maestro_command_reference/viewtrajectory.html",a:"viewtrajectory Attempt to view the Chorus trajectory associated with the specified entry.  Syntax: viewtrajectory [\u003centry_name\u003e ]\n Operands: \u003centry_name\u003e  The name (entry ID) of the entry, whose trajectory data is to be viewed. ",t:"viewtrajectory"},"3490":{i:0.00014152914841063,u:"../maestro_command_reference/viewunselect.html",a:"viewunselect Unselect the given view in the current views table.  Syntax: viewunselect [\u003cview_name\u003e ]\n Operands: \u003cview_name\u003e  A valid view name existing in the current views table. ",t:"viewunselect"},"3491":{i:0.000141529100817535,u:"../maestro_command_reference/viewunselectrow.html",a:"viewunselectrow Unselect the view corresponding to the given row in the current views table.  Syntax: viewunselectrow [\u003crow\u003e ]\n Operands: \u003crow\u003e  A valid row in the views table. ",t:"viewunselectrow"},"3492":{i:0.000141528947670959,u:"../maestro_command_reference/viewunsetplay.html",a:"viewunsetplay Unset the play state of the given view.  Syntax: viewunsetplay [\u003cview_name\u003e ]\n Operands: \u003cview_name\u003e  A valid view name existing in the current views table. ",t:"viewunsetplay"},"3493":{i:0.000141528454492666,u:"../maestro_command_reference/viewvolume.html",a:"viewvolume Sets workspace view bounding box to the supplied values  Syntax: viewvolume bottom= \u003cx\u003e far= \u003cx\u003e left= \u003cx\u003e near= \u003cx\u003e right= \u003cx\u003e top= \u003cx\u003e  Options: bottom Bottom co-ordinate of the bounding box ",t:"viewvolume"},"3494":{i:0.000141526866874018,u:"../maestro_command_reference/visexport.html",a:"visexport Export a volume to the given file.  Syntax: visexport entry= \u003ctext\u003e format= cnsformatted | cnsccp4 surface= \u003ctext\u003e surfacetype= \u003ctext\u003e surfacetypecomment= \u003ctext\u003e volume= \u003ctext\u003e [\u003cfile name\u003e ]\n Options: entry The entry name of the entry that the surface belongs to. ",t:"visexport"},"3495":{i:0.000141521755903043,u:"../maestro_command_reference/visimport.html",a:"visimport Creates all volumes and surfaces in the given file.  Syntax: visimport entry= \u003ctext\u003e isovalue= \u003cx\u003e transparency= \u003cx\u003e [\u003cfile.vis\u003e[:::\u003csurface name\u003e] ]\n Options: entry This is the entry id to which the surface/volume object will be associated. ",t:"visimport"},"3496":{i:0.000141505303373507,u:"../maestro_command_reference/volumedelete.html",a:"volumedelete Deletes the given volume.  Syntax: volumedelete entry= \u003ctext\u003e [\u003cvolume\u003e ]\n Options: entry The entry that the volume belongs to. ",t:"volumedelete"},"3497":{i:0.000141452343150145,u:"../maestro_command_reference/volumedisplay.html",a:"volumedisplay Displays or undisplays the given volume  Syntax: volumedisplay display= yes | no entry= \u003ctext\u003e [\u003cvolume\u003e ]\n Options: display Sets whether or not to display the volume. ",t:"volumedisplay"},"3498":{i:0.000141281869254515,u:"../maestro_command_reference/volumeisosurface.html",a:"volumeisosurface Isosurfaces the given volume.  Syntax: volumeisosurface entry= \u003ctext\u003e isovalue= \u003cx\u003e surface= \u003ctext\u003e [\u003cvolume\u003e ]\n Options: entry The entry that the volume belongs to. ",t:"volumeisosurface"},"3499":{i:0.000140733139491881,u:"../maestro_command_reference/volumerename.html",a:"volumerename Renames the given volume.  Syntax: volumerename entry= \u003ctext\u003e newname= \u003ctext\u003e [\u003cvolume\u003e ]\n Options: entry The entry that the volume belongs to. ",t:"volumerename"},"3500":{i:0.000138966879006155,u:"../maestro_command_reference/volumesetcolors.html",a:"Changes color map for the specifed volume. The color points has to be specified after the volume name as five floating point numbers. The numbers correspond to data value, alpha value (opacity), R, G, B color components.  Syntax: volumesetcolors box= yes | no entry= \u003ctext\u003e highquality= yes | no ...",t:"volumesetcolors"},"3501":{i:0.000177708876195095,u:"../maestro_command_reference/wake.html",a:"wake This is a standard alias for  energywake .",t:"wake"},"3502":{i:0.000138966878946228,u:"../maestro_command_reference/workspacecopy.html",a:"Currently this is only used by Edit-\u003eCopy to determine if it generates in the current working directory a number of files corresponding the data it puts on the clipboard. It does not actually cause the copy to execute. This has to be done graphically.  Syntax: workspacecopy writefiles= yes | no  ...",t:"workspacecopy"},"3503":{i:0.000140733139289291,u:"../maestro_command_reference/workspacefontdecrease.html",a:"workspacefontdecrease Decrease the size of the Workspace fonts  Syntax: workspacefontdecrease",t:"workspacefontdecrease"},"3504":{i:0.00014128186858378,u:"../maestro_command_reference/workspacefontincrease.html",a:"workspacefontincrease Increase the size of the Workspace fonts  Syntax: workspacefontincrease",t:"workspacefontincrease"},"3505":{i:0.000141452341019057,u:"../maestro_command_reference/workspacepaste.html",a:"If there is a mime type of application/x-qt-windows-mime;value=SMILES on the clipboard, a plain text SMILES string in the global mouse selection, a plain text SMILES string on the clipboard, or an ISIS/Draw MDLCT, then use that as the basis for pasting into center of the Workspace a 2D structure. ...",t:"workspacepaste"},"3506":{i:0.000141505296475719,u:"../maestro_command_reference/workspacepastesettings.html",a:"Settings that affect workspacepaste  Syntax: workspacepastesettings enableselect= yes | no  Options: enableselect Enable this to allow pasting of selected text on Linux. This only applies to systems running X Windows (such as Linux). If true, allows user to do text selection in windows (such as an ...",t:"workspacepastesettings"},"3507":{i:0.00014152173376103,u:"../maestro_command_reference/workspacescopeoff.html",a:"workspacescopeoff Turn off the Workspace scope  Syntax: workspacescopeoff",t:"workspacescopeoff"},"3508":{i:0.000141526795495034,u:"../maestro_command_reference/workspacescopeon.html",a:"workspacescopeon Turn on the Workspace scope  Syntax: workspacescopeon",t:"workspacescopeon"},"3509":{i:0.000141528224791301,u:"../maestro_command_reference/workspacescopesettings.html",a:"workspacescopesettings Settings for the Workspace scope  Syntax: workspacescopesettings alpha= \u003cx\u003e blendcolor= user blendfactor= \u003cx\u003e blue= \u003cx\u003e green= \u003cx\u003e radius= \u003cx\u003e red= \u003cx\u003e track= yes | no x= \u003cx\u003e y= \u003cx\u003e  Options: alpha Alpha component. 0 is invisible. 1 is opaque. ",t:"workspacescopesettings"},"3510":{i:0.000141528207944503,u:"../maestro_command_reference/workspacescopeview.html",a:"Determine which things are visible inside and outside of the scope. Only used when the scope is enabled.  Syntax: workspacescopeview molecules= inside | outside | everywhere ribbons= inside | outside | everywhere surfaces= inside | outside | everywhere volumes= inside | outside | everywhere  ...",t:"workspacescopeview"},"3511":{i:0.00014152671949231,u:"../maestro_command_reference/workspaceselectionadd.html",a:"workspaceselectionadd Extends workspace selection with the atoms conforming to the supplied ASL.  Syntax: workspaceselectionadd [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  ASL representing the set of atoms ",t:"workspaceselectionadd"},"3512":{i:0.000141521481952756,u:"../maestro_command_reference/workspaceselectionclear.html",a:"workspaceselectionclear Resets current workspace selection to none.  Syntax: workspaceselectionclear",t:"workspaceselectionclear"},"3513":{i:0.000141504484020459,u:"../maestro_command_reference/workspaceselectioninvert.html",a:"workspaceselectioninvert Flips the state of an atom in the workspace selection. i.e., removes if the atom already exists or adds if it doesn\u0027t.  Syntax: workspaceselectioninvert [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  ASL representing the set of atoms ",t:"workspaceselectioninvert"},"3514":{i:0.000141449724507233,u:"../maestro_command_reference/workspaceselectionmatch.html",a:"An atom is selected if its value for the specified attribute matches that of any currently selected atom.  Syntax: workspaceselectionmatch [\u003cattribute\u003e ]\n Operands: \u003cattribute\u003e  The attribute (color, representation, element, entry, or residue_type) for which matches are to be found. ",t:"workspaceselectionmatch"},"3515":{i:0.000141273446215704,u:"../maestro_command_reference/workspaceselectionreplace.html",a:"workspaceselectionreplace Overwrites the workspace selection with the supplied set of atoms.  Syntax: workspaceselectionreplace [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  ASL representing the set of atoms ",t:"workspaceselectionreplace"},"3516":{i:0.000140706027420647,u:"../maestro_command_reference/workspaceselectionsubtract.html",a:"workspaceselectionsubtract Removes atoms conforming to the supplied ASL from the workspace selection.  Syntax: workspaceselectionsubtract [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  ASL representing the set of atoms ",t:"workspaceselectionsubtract"},"3517":{i:0.000138879609755512,u:"../maestro_command_reference/workspacetile.html",a:"The workspacetile command specifies contents for a single tile in workspace tile mode.  Syntax: workspacetile [\u003ctile_name\u003e ]\n Operands: \u003ctile_name\u003e  The name which identifies the contents of the tile. This name will be the index of an entry group (greater than 0), or 0: followed by the entry ID for ...",t:"workspacetile"},"3518":{i:0.000177334334574095,u:"../maestro_command_reference/write.html",a:"write This is a standard alias for  filewrite .",t:"write"},"3519":{i:0.000138879609813074,u:"../maestro_command_reference/writeangle.html",a:"writeangle Write the angles in the angle table to a file.  Syntax: writeangle [\u003cfile_name\u003e ]\n Operands: \u003cfile_name\u003e  The name of the file to which the angles will be written. ",t:"writeangle"},"3520":{i:0.000140706027617598,u:"../maestro_command_reference/writecontact.html",a:"writecontact Write Contacts information to a file.  Syntax: writecontact atomnumber= molecule | workspace delimiter= tab | userdefined userdelimiter= \u003ctext\u003e [\u003cfile_name\u003e ]\n Options: atomnumber This option is deprecated. ",t:"writecontact"},"3521":{i:0.00014127344686269,u:"../maestro_command_reference/writecoupling.html",a:"writecoupling This command is deprecated and should no longer be used. Write the coupling constants in the coupling table to a file.  Syntax: writecoupling [\u003cfile_name\u003e ]\n Operands: \u003cfile_name\u003e  The name of the file to which the coupling constants will be written. ",t:"writecoupling"},"3522":{i:0.00014144972657262,u:"../maestro_command_reference/writedihedral.html",a:"writedihedral Write the dihedrals in the dihedral table to a file.  Syntax: writedihedral [\u003cfile_name\u003e ]\n Operands: \u003cfile_name\u003e  The name of the file to which the dihedrals will be written. ",t:"writedihedral"},"3523":{i:0.000141504490687973,u:"../maestro_command_reference/writedistance.html",a:"writedistance Write the distances in the distance table to a file.  Syntax: writedistance [\u003cfile_name\u003e ]\n Operands: \u003cfile_name\u003e  The name of the file to which the distances will be written. ",t:"writedistance"},"3524":{i:0.000141521503385816,u:"../maestro_command_reference/writehbond.html",a:"writehbond Write H-Bonds information to a file.  Syntax: writehbond atomnumber= molecule | workspace delimiter= tab | userdefined userdelimiter= \u003ctext\u003e [\u003cfile_name\u003e ]\n Options: atomnumber This option is deprecated. ",t:"writehbond"},"3525":{i:0.000141526788534308,u:"../maestro_command_reference/wsassistantapply.html",a:"wsassistantapply Command that applies workspace style settings.  Syntax: wsassistantapply",t:"wsassistantapply"},"3526":{i:0.000141528430204015,u:"../maestro_command_reference/wsassistantapplycontacthbond.html",a:"wsassistantapplycontacthbond Command that applies contacts and hbonds options of workspace assistant.  Syntax: wsassistantapplycontacthbond",t:"wsassistantapplycontacthbond"},"3527":{i:0.000141528940420229,u:"../maestro_command_reference/wsassistantapplyfocus.html",a:"wsassistantapplyfocus Command that applies workspace style settings and sets focus on ligand.  Syntax: wsassistantapplyfocus",t:"wsassistantapplyfocus"},"3528":{i:0.000141529099420202,u:"../maestro_command_reference/wsassistantbindingsurface.html",a:"Command that handles workspace assistant binding site surface options.  Syntax: wsassistantbindingsurface colorscheme= partialcharge | atomtype | chainname | element | molnum | molnumcarbon | residuecharge | residueproperty | residueposition | residuetype | entry | atomcolor | elepotential | ...",t:"wsassistantbindingsurface"},"3529":{i:0.000141529150734966,u:"../maestro_command_reference/wsassistantcontacthbond.html",a:"Command that handles workspace assistant contacts and hbonds options.  Syntax: wsassistantcontacthbond contacttype= ugly | bad | good intraligandcontacts= yes | no receptorligandcontacts= yes | no receptorligandhbonds= yes | no  Options: contacttype What kind of contact type the workspace assistant ...",t:"wsassistantcontacthbond"},"3530":{i:0.000141529172833097,u:"../maestro_command_reference/wsassistantcreatequicksurfaces.html",a:"wsassistantcreatequicksurfaces Command that creates quick surfaces from the workspace selection for each ligand and recetor.  Syntax: wsassistantcreatequicksurfaces [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  The operand is a valid ASL string which specifies atom to be used to generated quick surfaces. ",t:"wsassistantcreatequicksurfaces"},"3531":{i:0.000141529199425414,u:"../maestro_command_reference/wsassistantcreatesurfaces.html",a:"wsassistantcreatesurfaces Command that creates binding site surfaces.  Syntax: wsassistantcreatesurfaces",t:"wsassistantcreatesurfaces"},"3532":{i:0.000141529271523181,u:"../maestro_command_reference/wsassistantdefaultstyle.html",a:"wsassistantdefaultstyle Command that sets default workspace style.  Syntax: wsassistantdefaultstyle",t:"wsassistantdefaultstyle"},"3533":{i:0.000141529498934105,u:"../maestro_command_reference/wsassistantfixreceptor.html",a:"wsassistantfixreceptor Command to fix the receptor in the Workspace.  Syntax: wsassistantfixreceptor",t:"wsassistantfixreceptor"},"3534":{i:0.000141530230385367,u:"../maestro_command_reference/wsassistanthideallsurfaces.html",a:"wsassistanthideallsurfaces Command that Hides all surfaces. WORKSPACEASSISTANTCREATEQUICKSURFACES  Syntax: wsassistanthideallsurfaces",t:"wsassistanthideallsurfaces"},"3535":{i:0.000141532583899553,u:"../maestro_command_reference/wsassistantliganddetection.html",a:"Command that handles workspace assistant ligand detection options.  Syntax: wsassistantliganddetection allowaminoacids= yes | no allowsmallions= yes | no includedresiduecode= \u003ctext\u003e includedresiduecodes= \u003ctext\u003e maximumatomcount= \u003cn\u003e minimumatomcount= \u003cn\u003e residuecode= \u003ctext\u003e residuecodes= \u003ctext\u003e  ...",t:"wsassistantliganddetection"},"3536":{i:0.000141540161076197,u:"../maestro_command_reference/wsassistantmaterial.html",a:"wsassistantmaterial Command to set the the appearance to one of a set of preset definitions. These control the lighting and material properties used in the Workspace.  Syntax: wsassistantmaterial",t:"wsassistantmaterial"},"3537":{i:0.00014156455083098,u:"../maestro_command_reference/wsassistantprimarystyle.html",a:"Command that handles workspace assistant primary style options.  Syntax: wsassistantprimarystyle colorscheme= elementgreen | elementlight | elemententry | bfactor | densityfit | moleculesize | residuetype | entry | singlecolor | elementcustomc | elementcustoml | chainname | moleculenumber ...",t:"wsassistantprimarystyle"},"3538":{i:0.000141643061060291,u:"../maestro_command_reference/wsassistantrendering.html",a:"wsassistantrendering Command to set the quality of workspace rendering. This allows a tradeoff between quality and speed.  Syntax: wsassistantrendering",t:"wsassistantrendering"},"3539":{i:0.000141895773692892,u:"../maestro_command_reference/wsassistantshowallsurfaces.html",a:"wsassistantshowallsurfaces Command that shows all surfaces.  Syntax: wsassistantshowallsurfaces",t:"wsassistantshowallsurfaces"},"3540":{i:0.000142709213643482,u:"../maestro_command_reference/wsassistantwsstyle.html",a:"Command that handles workspace assistant workspace style options.  Syntax: wsassistantwsstyle applycolorschemes= yes | no applydefaultrepresentation= yes | no applyionlabels= yes | no applyionscscheme= yes | no applyionsrepresentation= yes | no applyligandlabels= yes | no applyligandrepresentation= ...",t:"wsassistantwsstyle"},"3541":{i:0.000145327511951763,u:"../maestro_command_reference/xyzaxes.html",a:"Set xyz coordinate axes options.  Syntax: xyzaxes ambient= \u003cx\u003e arrowlength= \u003cx\u003e arrowwidth= \u003cx\u003e axislength= \u003cx\u003e diffuse= \u003cx\u003e display= yes | no emission= \u003cx\u003e labelblue= \u003cx\u003e labelgreen= \u003cx\u003e labelred= \u003cx\u003e shaftwidth= \u003cx\u003e shininess= \u003cx\u003e specular= \u003cx\u003e transparency= \u003cx\u003e xblue= \u003cx\u003e xgreen= \u003cx\u003e xred= \u003cx\u003e ...",t:"xyzaxes"},"3542":{i:0.000102503491306914,u:"../maestro_command_reference/zoom.html",a:"zoom Zoom in or out (i.e. scale up or down)  Syntax: zoom factor= \u003cx\u003e [in | out ]\n Options: factor A zooming (scaling) factor which determines by how much the on-screen structures is scaled. 1.0 is 1 percent, 99.0 is 99 percent, etc. Values are used relative to current size ",t:"zoom"},"3543":{i:7.82440054232224E-05,u:"../phase_command_reference/phase_command_db.htm",a:"Phase provides capabilities for creating a database that can be used for searching for matches to a pharmacophore model. When a database is created, conformers and pharmacophore sites can be stored in the database, to speed up the search. If you intend to search a set of structures more than once ...",t:"Managing 3D Databases from the Command Line"},"3544":{i:0.000119419984925512,u:"../phase_command_reference/phase_command_db_managing.htm",a:"\n            Managing Databases with phase_database\n Databases can be created and managed with the program phase_database. This program performs all the necessary database management tasks. The syntax is as follows: \nSCHRODINGER/phase_database database task [jobName] [options]\n where database is the ...",t:"\n            Managing Databases with phase_database\n"},"3545":{i:0.000115517276672212,u:"../phase_command_reference/phase_command_db_distributing.htm",a:"Apart from the parallel import of structures performed with the splice task, site creation jobs and database search jobs can be split across multiple processors on an appropriately configured cluster. The basic requirements for database creation and searching are as follows: The database must be ...",t:"Distributing Jobs that use a Phase Database"},"3546":{i:0.000131546639357049,u:"../phase_command_reference/phase_command_db_access.htm",a:"When you create a database, you are the owner of all the files and directories associated with that database. As such, you will normally have read and write permissions to the files, and read, write, and execute permissions to the directories. You should therefore be able to modify or search a ...",t:"Granting Access to a Phase Database"},"3547":{i:0.000161189958341946,u:"../phase_command_reference/phase_command_db_structure.htm",a:"The database is stored in a directory, dbName.phdb, which contains all the files associated with the database. The files and directories that are standard parts of the database are described in  Table 1 . You should not generally need to modify these files, but you may find it useful to examine ...",t:"Phase Database Structure"},"3548":{i:9.93546599039973E-05,u:"../phase_command_reference/phase_command_search.htm",a:"Phase provides two ways of searching a set of structures for matches to a hypothesis: searching a plain Maestro or SD file, or creating a database for searching. In both cases, the process involves generating conformers of each structure and creating the site points. For a search on a file, the ...",t:"Searching for Matches from the Command Line"},"3549":{i:8.94770424760787E-05,u:"../phase_command_reference/phase_command_search_screen.htm",a:"The phase_find_matches program can be used to search one or more structure files, a Phase database, or a Phase command-line project, for matches to  one or more pharmacophore hypotheses. The syntax is: \n$SCHRODINGER/phase_screen source hypo jobname [options]\n source is the source of structures that ...",t:"Searching for Matches with phase_screen"},"3550":{i:0.000102252236005507,u:"../phase_command_reference/phase_utilities.htm",a:"Phase Utilities Phase has a collection of utilities which are mostly for hypotheses and alignment. These utilities are described in the topics listed below. The syntax and options descriptions for these utilities can be listed by running the command with the -h option.",t:"Phase Utilities"},"3551":{i:0.000144440846833347,u:"../phase_command_reference/phase_hypo_util.htm",a:"The utility phase_hypo_util converts a hypothesis between single-file format and multi-file format. It also allows you to add, replace, and delete data of a particular type from a single-file hypothesis, and to create a report of all the data in a single-file hypothesis. The syntax of the command is ...",t:"phase_hypo_util"},"3552":{i:0.000139957027049677,u:"../phase_command_reference/phase_cluster_hits.htm",a:"Cluster the structures in a Phase hit file according to the sites that were matched. By default, hits are clustered according to the matched ligand site types. In other words, the Matched Ligand Sites strings in a given cluster are identical, except for the site numbers. For example, two structures ...",t:"phase_cluster_hits"},"3553":{i:0.000130628102232664,u:"../phase_command_reference/align_hypoPair.htm",a:"\n            align_hypoPair Aligns one hypothesis onto another. Alignment is done using least-squares fitting of the matching site points in the two hypotheses, considering all possible mappings. Alignments are summarized to standard output in order of increasing RMSD. By default, only the best ...",t:"\n            align_hypoPair"},"3554":{i:0.000136250242054064,u:"../phase_command_reference/convert_hypoDistToXYZ.htm",a:"\n            convert_hypoDistToXYZ\n The utility convert_hypoDistToXYZ creates a hypothesis .xyz file from a file containing intersite distances. The syntax of the command is as follows: \nconvert_hypoDistToXYZ hypoID where hypoID is the prefix used to identify input and output files. The input file ...",t:"\n            convert_hypoDistToXYZ\n"},"3555":{i:0.000131358518139203,u:"../phase_command_reference/convert_hypoXYZToDist.htm",a:"\n            convert_hypoXYZToDist\n The utility convert_hypoXYZToDist uses a hypothesis .xyz file to create a file containing intersite distances (.dist). The syntax of the command is as follows: \nconvert_hypoDistToXYZ hypoID The output is the file hypoID.dist. ",t:"\n            convert_hypoXYZToDist\n"},"3556":{i:0.000142534538089146,u:"../phase_command_reference/convert_hypoFeatures.htm",a:"\n            convert_hypoFeatures\n The utility convert_hypoFeatures attempts to convert a hypothesis to use a new set of feature definitions. The syntax of the command is as follows: \nconvert_hypoFeatures hypoID featureFile newHypoID where hypoID is the prefix used to name the files in the existing ...",t:"\n            convert_hypoFeatures\n"},"3557":{i:0.000152806307029915,u:"../phase_command_reference/create_hypoConsensus.htm",a:"\n            create_hypoConsensus\n This utility creates a consensus hypothesis from a set of prealigned ligands or a set of hypotheses. The approach involves first performing complete linkage hierarchical clustering on each type of site: cluster all the acceptors, cluster all the donors, and so on. ...",t:"\n            create_hypoConsensus\n"},"3558":{i:0.000177881389901802,u:"../phase_command_reference/create_hypoSDFile.htm",a:"\n            create_hypoSDFile The utility program create_hypoSDFile creates an SD file to help visualize hypotheses that have no reference ligand. To visualize the hypothesis, simply import the SD file into Maestro. The syntax of the command is as follows: \ncreate_hypoSDFile hypoID [-ref] [-mol2]\n ...",t:"\n            create_hypoSDFile"},"3559":{i:0.000153918046323052,u:"../phase_command_reference/create_hypoFiles.htm",a:"\n            create_hypoFiles\n This utility creates the .def, .mae, .xyz and .tab hypothesis files from a single reference ligand structure and a feature definition file. The syntax of the command is as follows: \ncreate_hypoFiles inFile hypoID [fdFile] \n where hypoID is the prefix used to name the ...",t:"\n            create_hypoFiles\n"},"3560":{i:0.000146457971011604,u:"../phase_command_reference/create_xvolShell.htm",a:"\n            create_xvolShell This utility creates a shell of excluded volume spheres to surround the supplied molecules. This shell defines the outer boundary of a shape-based constraint that can be applied when searching for matches to the hypothesis. The assumption is that the supplied molecules ...",t:"\n            create_xvolShell"},"3561":{i:0.000144093175034355,u:"../phase_command_reference/create_xvolClash.htm",a:"\n            create_xvolClash This utility creates excluded volumes using actives and inactives that have been prealigned to a pharmacophore hypothesis. Excluded volumes are placed in locations that would cause steric clashes only for the inactives. The syntax and options descriptions can be listed ...",t:"\n            create_xvolClash"},"3562":{i:0.000143207524752986,u:"../phase_command_reference/create_xvolReceptor.htm",a:"\n            create_xvolReceptor This utility creates excluded volumes from a receptor structure or a portion of a receptor structure. An excluded volume sphere is created for each atom in the receptor structure that satisfies the minimum and maximum distance criteria. The syntax and options ...",t:"\n            create_xvolReceptor"},"3563":{i:0.000142446732739535,u:"../phase_command_reference/phase_complex.htm",a:"\n            phase_complex\n Create a pharmacophore hypothesis from an all-atom fully prepared ligand-receptor complex. Sites are added to the hypothesis when any of the following complementary interactions are feasible: Ligand...Receptor A............D D............A H............H N............P ...",t:"\n            phase_complex\n"},"3564":{i:0.000140647299771516,u:"../phase_command_reference/phase_volCalc.htm",a:"\n            phase_volCalc\n This utility calculates a matrix of overlapping volume values between structures in one or two Maestro files. Volumes are computed by treating each molecule as a set of atomic spheres. The syntax and options descriptions can be listed by running the command with the -h ...",t:"\n            phase_volCalc\n"},"3565":{i:0.00018007614742431,u:"../phase_command_reference/rmsdcalc.htm",a:"\n            rmsdcalc\n This utility computes the RMSD between each structure in a given Maestro file and a corresponding reference structure from a second Maestro file. The correspondence between structures is done by title, so reference titles must be unique, and each structure for which the RMSD ...",t:"\n            rmsdcalc\n"},"3566":{i:0.000140953114813442,u:"../phase_command_reference/flex_align.htm",a:"\n            flex_align This utility uses the shape screening technology to flexibly align a set of structures to a flexible template, then reports the alignments associated with the template conformer that yielded the highest average similarity to all structures. The conformers can be generated ...",t:"\n            flex_align"},"3567":{i:0.000143526135168582,u:"../phase_command_reference/phase_align_core.htm",a:"This utility combines constrained conformational sampling with shape similarity to superimpose a set of ligands onto a rigid template in a consistent manner. The syntax and options descriptions can be listed by running the command with the -h option.  By default, the largest Bemis-Murcko scaffold ...",t:"phase_align_core"},"3568":{i:0.000146711518588516,u:"../phase_command_reference/randsub.htm",a:"\n            randsub\n This utility selects a random subset of lines from a file and writes them to another file. The syntax and options descriptions can be listed by running the command with the -h option. ",t:"\n            randsub\n"},"3569":{i:0.000103587452807991,u:"../phase_command_reference/create_molSites.htm",a:"\n            create_molSites\n This utility creates a CSV file that contains the Phase features and associated atom numbers for the structure in the input Maestro file. The syntax and options descriptions can be listed by running the command with the -h option.  The output file contains lines for ...",t:"\n            create_molSites\n"},"3570":{i:0.000100641380806742,u:"../phase_command_reference/phase_input_files.htm",a:"In addition to structure files, Phase uses a variety of data files. These files are described in the topics listed below. Normally you would not need to edit most of these files, as they are set up using the command-line utilities or from Maestro. However, some of the files used when searching for ...",t:"Phase Input Files"},"3571":{i:0.000185006469589082,u:"../phase_command_reference/phase_input_files_master_data.htm",a:"This file stores various pieces of ligand data that are used throughout the pharmacophore model development workflow. It is named MasterData.tab, and can be updated by the utility pharm_data or by hand. At the top of the file is a description of the data it contains, and a number of rules regarding ...",t:"Phase Master Data File"},"3572":{i:0.000146782509993956,u:"../phase_command_reference/phase_input_files_hypothesis.htm",a:"This file contains all the information that belongs to a single hypothesis, and has a .phypo extension. The file is in gzipped Maestro format, so it can be easily imported to and exported from Maestro. The file contains a hypothesis entry (CT), and may contain a reference ligand, and a set of ...",t:"Phase Hypothesis File"},"3573":{i:0.00021712292022292,u:"../phase_command_reference/phase_input_files_feature_definition.htm",a:"This file contains definitions used to specify pharmacophore features. The default feature definition file, phase_feature.ini, is provided in $SCHRODINGER/mmshare-vversion/data. This file contains commonly used definitions for the six basic feature types. You can create your own feature definition ...",t:"Phase Feature Definition File"},"3574":{i:0.000148092538566966,u:"../phase_command_reference/phase_input_files_feature_frequencies.htm",a:"This file is used to set the minimum and maximum allowed feature frequencies for common pharmacophore perception. It is named FeatureFreq.tab. Each line contains the letter code for the feature type, followed by the minimum and the maximum number of occurrences of that feature in any hypothesis. The ...",t:"Phase Feature Frequencies File"},"3575":{i:0.000143378564375535,u:"../phase_command_reference/phase_input_files_feature_tolerances.htm",a:"This file is used to set feature-matching tolerances. When searching for matches, this file should be named hypoID.tol, where hypoID is the hypothesis identifier used to define other hypothesis-related files. Although this file contains no hypothesis-specific information, the naming convention is ...",t:"Phase Feature-Matching Tolerances File"},"3576":{i:0.000141492073589771,u:"../phase_command_reference/phase_input_files_hypothesis_tolerances.htm",a:"This file is used to set tolerances for the specific features of a hypothesis in a search for matches. For a specific feature, the matching feature in the hit must be within the specified distance of the feature in the hypothesis after the hit is aligned to the hypothesis. The file must be named ...",t:"Phase Hypothesis-Specific Tolerances File"},"3577":{i:0.000139548394642939,u:"../phase_command_reference/phase_input_files_matching_constraints.htm",a:"This file is used to set tolerances for distances, angles, and dihedral angles between features in a search for matches. The file must be named hypoID.cnst, where hypoID is the hypothesis identifier used to name hypothesis-related files. It contains multiple lines, each consisting of a two to four ...",t:"Phase Matching Constraints File"},"3578":{i:0.000179433349215136,u:"../phase_command_reference/phase_input_files_site_mask.htm",a:"This file is used to determine how specific sites or groups of sites are matched in a partial match. The file must be named hypoID.mask, where hypoID is the hypothesis identifier used to name hypothesis-related files. The file must contain one line for each site in the hypothesis, with an integer ...",t:"Phase Site Mask File"},"3579":{i:0.000142707377251239,u:"../phase_command_reference/phase_input_files_hypothesis_rules.htm",a:"Feature rules allow generalized matching according to permitted features and prohibited features for each site in the hypothesis. The file must be named hypoID.rules, where hypoID is the hypothesis identifier used to define other hypothesis-related files. This file will be used when you search for ...",t:"Phase Hypothesis Rules File"},"3580":{i:0.000101761139804164,u:"../phase_command_reference/phase_input_files_excluded_included_vol.htm",a:"There are two separate file formats for excluded and included volumes. Excluded volume data can be stored in a Maestro-format file with the extension .xvol, or in a plain text file (“native format”) with the extension .ev. The Maestro-format file is used when importing and exporting excluded volumes ...",t:"Phase Excluded and Included Volume Files"},"3581":{i:0.000138448263109717,u:"../prime_command_reference/prime_commands.htm",a:"This chapter provides information on the command syntax and input files for various programs that are part of Prime. All the programs are executed by driver scripts, which run under the Schrödinger Job Control facility. For more information on this facility, see the  Job Control Guide . For ...",t:"Prime Command Syntax"},"3582":{i:0.000199697111026866,u:"../prime_command_reference/prime_commands_blast.htm",a:"The blast script provides an interface to the Blast and PSIBlast programs from NCBI (see  http://www.ncbi.nlm.nih.gov/books/NBK21097/  for information), while also supporting standard Schrodinger Job Control options. All options are passed on to the script via an input file.  Syntax ...",t:"blast—Run Blast Searches"},"3583":{i:0.000312978362729605,u:"../prime_command_reference/prime_commands_prime.htm",a:"The prime program can be used to build initial (unrefined) protein models from an alignment to one or more templates, and to refine protein structures, using the Protein Local Optimization Program (PLOP). Structure refinement includes energy minimization, side-chain prediction, helix prediction, and ...",t:"prime—Build and Refine Protein Structures"},"3584":{i:0.00030972055947769,u:"../prime_command_reference/prime_commands_prime_input.htm",a:"The command input file contains a list of keywords that control the execution of the program, one per line. The keywords are listed in the tables below. Generally valid keywords are listed in  Table 2  and protocol-specific keywords are listed in  Table 4 , under the protocol to which they apply. ...",t:"Prime Command Input File"},"3585":{i:0.000176768631906085,u:"../prime_command_reference/prime_commands_prime_constraints.htm",a:"The syntax of a general constraint (CONSTRAINT_i) is:  atom-spec1;atom-spec2; ... ;strength;equilibrium-value From one to five atom specifications can be given, in the format described at the beginning of this chapter. Positional and distance constraints have other specification options, as ...",t:"Prime Constraint Syntax"},"3586":{i:0.000175130255070103,u:"../prime_command_reference/prime_commands_prime_restart.htm",a:"If a loop refinement job fails (one with protocol EXTENDED, LOOP_PAIR, or LONG_LOOP_2), you can restart it by submitting it again from the same directory. The jobname.restart file and the archives of subjobs must be present in the directory, and the directory must be accessible from the host on ...",t:"Restarting an Incomplete Loop Refinement Job"},"3587":{i:0.000224870441320257,u:"../prime_command_reference/prime_commands_prime_examples.htm",a:"Examples of Prime Input Files Example input files for various tasks are given in the topics listed below.",t:"Examples of Prime Input Files"},"3588":{i:0.000167319569146173,u:"../prime_command_reference/prime_commands_prime_examples_building.htm",a:"The following is a sample input file for building on two templates: \nQUERY_OFFSET       0\n1TSV_NUMBER        1\n1TSV_STRUCT_FILE   pdb1TSV.ent\n1TSV_ALIGN_FILE    1TSV.align\nTEMPLATE_NAME      1BPJ_A\n1BPJ_A_NUMBER      2\n1BPJ_A_STRUCT_FILE pdb1BPJ_A.ent\n1BPJ_A_ALIGN_FILE  1BPJ_A.align\n1BPJ_A_HETERO_0  ...",t:"Protein Model Building Input"},"3589":{i:0.000149204656095223,u:"../prime_command_reference/prime_commands_prime_examples_energy.htm",a:"Prime Energy Calculation Input \nSTRUCT_FILE input_structure.maegz\nPRIME_TYPE  ENERGY\nUSE_CRYSTAL_SYMMETRY  no\nUSE_RANDOM_SEED no\nSEED  0\nEXT_DIEL  80.00\nUSE_MEMBRANE  no\n",t:"Prime Energy Calculation Input"},"3590":{i:0.000142825544924031,u:"../prime_command_reference/prime_commands_prime_examples_sidechain.htm",a:"The following example demonstrates a side chain prediction of residues A:100, A:101, A:102, and A:103. \nSTRUCT_FILE input_structure.maegz\nPRIME_TYPE  SIDE_PRED\nSELECT  pick\nRESIDUE_0 A:100\nRESIDUE_1 A:101\nRESIDUE_2 A:102\nRESIDUE_3 A:103\nUSE_CRYSTAL_SYMMETRY  no\nUSE_RANDOM_SEED no\nSEED  0\nEXT_DIEL  ...",t:"Side-Chain Prediction Input"},"3591":{i:0.000138428172657647,u:"../prime_command_reference/prime_commands_prime_examples_minimization.htm",a:"Prime Minimization Input The following example demonstrates the minimization of all hydrogens. \nSTRUCT_FILE input_structure.maegz\nPRIME_TYPE  REAL_MIN\nSELECT  asl = (atom.ele H)\nUSE_CRYSTAL_SYMMETRY  no\nUSE_RANDOM_SEED no\nSEED  0\nEXT_DIEL  80.00\nUSE_MEMBRANE  no\n",t:"Prime Minimization Input"},"3592":{i:0.000129288541745771,u:"../prime_command_reference/prime_commands_prime_examples_loop.htm",a:"The following example demonstrates loop prediction of loop A:102 to A:110. \nSTRUCT_FILE input_structure.maegz\nPRIME_TYPE  LOOP_BLD\nLOOP_0_RES_0  A:102\nLOOP_0_RES_1  A:110\nRES_SPHERE   7.50\nMIN_OVERLAP  0.70\nUSE_CRYSTAL_SYMMETRY  no\nUSE_RANDOM_SEED no\nSEED  0\nEXT_DIEL  80.00\nUSE_MEMBRANE  no\n",t:"Loop Prediction Input"},"3593":{i:0.000135240225443357,u:"../prime_command_reference/mm_gbsa_output.htm",a:"You can run Prime MM-GBSA from the command line with the input file written from the panel. The syntax is as follows: \n$SCHRODINGER/prime_mmgbsa [options] input-file The input file must be a Maestro file. By default, the receptor must be the first entry, followed by one or more ligands (i.e. Glide ...",t:"prime_mmgbsa—Calculate Ligand Binding Energies"},"3594":{i:0.000131574858899163,u:"../prime_command_reference/prime_commands_mmgbsa_input.htm",a:"If you want to use a command input file to store options, you can include any option other than the Job Control options. The input structure should be specified on a line with the following syntax: \nSTRUCT_FILE filename All other options should be placed on separate lines with the preceding dash ...",t:"Prime MM-GBSA Command Input File"},"3595":{i:0.000146496750012806,u:"../prime_command_reference/prime_commands_mmgbsa_asl.htm",a:"All atoms in the ligand have the i_psp_Prime_MMGBSA_Ligand property set to 1, so that ASL expressions can then be used for specifying parts of the structure relative to the ligand. For example, \nfillres within 5 (atom.i_psp_Prime_MMGBSA_Ligand 1)\n selects all residues within 5 Å of the ligand.",t:"ASL Expressions for Prime MM-GBSA"},"3596":{i:0.000225351846474949,u:"../prime_command_reference/prime_commands_ska.htm",a:"The SKA program carries out structural alignment of proteins by aligning protein backbones at different levels of detail.  The ska script provides an interface to the SKA structural alignment program. As with other computational programs in Prime its operation is controlled through simple input ...",t:"ska—Protein Structure Alignment"},"3597":{i:0.000205319072177975,u:"../prime_command_reference/prime_commands_ssp.htm",a:"The ssp script provides an interface to the secondary structure prediction programs SSPro, which is bundled with Prime, as well as PSIPRED, which is available from a third party.  Syntax \n$SCHRODINGER/ssp [options] jobname By default the input is read from the file jobname.inp and the output is ...",t:"ssp—Secondary Structure Prediction"},"3598":{i:0.000185180861205079,u:"../prime_command_reference/prime_commands_sta.htm",a:"The Single Template Alignment (STA) program in PRIME is designed for protein sequences with medium to high sequence identity (\u003e20%). Features of this program include the following: STA differs from standard sequence alignment programs such as BLAST by taking into account secondary structure matching ...",t:"sta—Single Template Alignment"},"3599":{i:0.000122410730707033,u:"../prime_command_reference/prime_utilities.htm",a:"In addition to the command-line programs described in  Prime Command Syntax , Prime provides a number of utilities, which are described in this chapter. These utilities are installed in the utilities directory in your Schrödinger software installation. To run these utilities: On Linux and Mac, open ...",t:"Prime Command-Line Utilities"},"3600":{i:0.000148997517963646,u:"../prime_command_reference/prime_utilities_structalign.htm",a:"\n            Multiple Template Alignment: structalign\n You can specify the input as multiple files in PDB format, or as a Maestro file. The templates should consist of single chains. To use the output files, each must be imported into Find Homologs and selected as one of the templates, replacing the ...",t:"\n            Multiple Template Alignment: structalign\n"},"3601":{i:0.000167114586282769,u:"../prime_command_reference/prime_utilities_seqconvert.htm",a:"\n            Sequence Format Conversion: seqconvert\n This utility converts sequences between any permitted input file format and output file format. The file formats are listed in  Sequence File Formats Used by Prime . This may be useful if autoconversion does not proceed as expected. Syntax: ...",t:"\n            Sequence Format Conversion: seqconvert\n"},"3602":{i:0.000167389677870678,u:"../prime_command_reference/prime_utilities_binding_sites.htm",a:"\n            Structure Alignment: align_binding_sites\n This script performs a pairwise superposition of multiple structures using the C-alpha atoms of selected residues. The reference structure for the alignment is the first structure in the input file. The C-alpha atoms used for the alignment come ...",t:"\n            Structure Alignment: align_binding_sites\n"},"3603":{i:0.000176558195221731,u:"../prime_command_reference/prime_utilities_buildloop.htm",a:"\n            Fast Loop Building: buildloop\n Build a loop quickly using the knowledge-based loop builder. The input can be given either in an input file or as a set of options, with the following syntax: \nbuildloop filename.inp\nbuildloop input-file res1 res2 [options]\n The input file contains a list ...",t:"\n            Fast Loop Building: buildloop\n"},"3604":{i:0.000139244199243421,u:"../prime_command_reference/prime_utilities_database.htm",a:"Prime uses two databases, the PDB database and the BLAST database. As these databases are continually being updated, any installed version might not have the latest contributions. Utilities have been provided for updating these databases from the web sites. You can run these utilities on Windows ...",t:"Prime Database Update Utilities"},"3605":{i:0.000190098641676702,u:"../prime_command_reference/prime_utilities_update_blastdb.htm",a:"\n            Updating the BLAST Database: update_BLASTDB\n This utility updates the BLAST database from a copy on the Schrödinger web site that is synchronized nightly with the BLAST web site, or via FTP from the NCBI web site. The preformatted database files are downloaded. The syntax is: ...",t:"\n            Updating the BLAST Database: update_BLASTDB\n"},"3606":{i:0.000156548209137959,u:"../prime_command_reference/prime_utilities_rsync_pdb.htm",a:"\n            Updating the PDB Datbase: rsync_pdb\n This utility creates or updates a local mirror of the PDB. The syntax is: \n$SCHRODINGER/utilities/rsync_pdb [options] \n For a description of the options, run the command with the -h option.  The PDB is installed in the first location found in the ...",t:"\n            Updating the PDB Datbase: rsync_pdb\n"},"3607":{i:0.000149914711545867,u:"../prime_command_reference/prime_sequence_file_formats.htm",a:"The input file formats are: native (Schrödinger) format\n     FASTA format\n     PDB format 1 Sequences are read from the PDB SEQRES records, if they exist. Otherwise they are read from the ATOM records. If SEQRES records do not exist and residues are missing from the ATOM records, the query sequence ...",t:"Sequence File Formats Used by Prime"},"3608":{i:9.17347381267083E-05,u:"../primex_command_reference/primex_command.htm",a:"PrimeX tasks can be run from the command line by creating a PrimeX input file with the appropriate keywords, and executing the following command: \nprimex [job-options] input-file The only options for this command are the standard Job Control options, represented by job-options. For details on these ...",t:"Running PrimeX Tasks from the Command Line"},"3609":{i:0.000143095678245298,u:"../primex_command_reference/primex_command_global.htm",a:"General keywords are listed in  Table 1 . Each input file must contain these keywords. Other global keywords are described in the topics listed below. ◀  Running PrimeX Tasks from the Command Line PrimeX Command Reference Manual Primex Keywords for Calculation Settings  ▶",t:"PrimeX Input File Global Keywords"},"3610":{i:0.000149952431927937,u:"../primex_command_reference/primex_command_global_calcsettings.htm",a:"Keywords for calculation settings are given in  Table 1 . These keywords correspond to the settings in the Calculation Settings dialog box, with the exception of OPLS_VERSION.  ◀  PrimeX Input File Global Keywords PrimeX Command Reference Manual PrimeX Keywords for Map Settings  ▶",t:"Primex Keywords for Calculation Settings"},"3611":{i:0.000154998906213865,u:"../primex_command_reference/primex_command_global_map.htm",a:"These parameters describe both the extent of the map itself and some aspects of the model and method used to create it. For jobs that produce maps, multiple maps can be specified and the keywords MAP_COEFF_0, MAP_COEFF_1, and so on, can be used, each with a single value, such as 1_1 for an Fo-Fc ...",t:"PrimeX Keywords for Map Settings"},"3612":{i:0.000166841205767232,u:"../primex_command_reference/primex_command_global_reflection.htm",a:"PrimeX Keywords for Reflection Data Settings Reflection data settings are listed in  Table 1 .  ◀  PrimeX Keywords for Map Settings PrimeX Command Reference Manual PrimeX Atom Selection Keywords  ▶",t:"PrimeX Keywords for Reflection Data Settings"},"3613":{i:0.000205676278934497,u:"../primex_command_reference/primex_command_global_selection.htm",a:"PrimeX Atom Selection Keywords These keywords can be used to specify an atom selection, where the interface uses picking tools. The keywords are listed in  Table 1 .   ◀  PrimeX Keywords for Reflection Data Settings PrimeX Command Reference Manual PrimeX Keywords for Noncrystallographic Symmetry  ▶",t:"PrimeX Atom Selection Keywords"},"3614":{i:0.000182742761684033,u:"../primex_command_reference/primex_command_global_symmetry.htm",a:"Keywords for use of noncrystallographic symmetry are listed in  Table 1 . NCS is implemented by defining groups of chains that are related by NCS. Within each group, there can be multiple symmetry-related (equivalent) units. Each such unit can be composed of a number of residues, which do not need ...",t:"PrimeX Keywords for Noncrystallographic Symmetry"},"3615":{i:0.000137193062570085,u:"../primex_command_reference/primex_command_map.htm",a:"PrimeX Keywords for Map Generation The keywords required for a map generation job are: PRIMEX_TYPE MAP_GEN Map settings keywords\n     Reflection data keywords\n     Calculation settings keywords\n     The INCLUDE_H keyword is not required for this job type.",t:"PrimeX Keywords for Map Generation"},"3616":{i:0.000174261159486771,u:"../primex_command_reference/primex_command_real.htm",a:"The keyword groups below must be included for all real-space refinements. Reflection data keywords \n     Calculation settings keywords \n     In addition, the general keywords for real-space refinement, listed in  Table 1 , must be included. ◀  PrimeX Keywords for Map Generation PrimeX Command ...",t:"PrimeX Keywords for Real-Space Refinement"},"3617":{i:0.000174248111099469,u:"../primex_command_reference/primex_command_real_loop.htm",a:"The following keywords are needed for loop predictions, in addition to the general real-space refinement requirements. PRIMEX_TYPE LOOP_BLD Loop prediction keywords, given in  Table 1 .\n       ◀  PrimeX Keywords for Real-Space Refinement PrimeX Command Reference Manual PrimeX Keywords for Side Chain ...",t:"PrimeX Keywords for Loop Prediction"},"3618":{i:0.000137147388396344,u:"../primex_command_reference/primex_command_real_sidechain.htm",a:"The following keywords are needed for side chain predictions, in addition to the general real-space refinement requirements. PRIMEX_TYPE SIDE_PRED Atom selection data keywords, to define the residues for which side chains are to be predicted. Either an atom specification or a residue specification ...",t:"PrimeX Keywords for Side Chain Prediction"},"3619":{i:0.000136906731688351,u:"../primex_command_reference/primex_command_real_minimize.htm",a:"The following keywords are needed for minimizations, in addition to the general real-space refinement requirements. PRIMEX_TYPE REAL_MIN Atom selection data keywords to define the residues to minimize. Either an atom specification or a residue specification can be used to specify a residue. \n    ",t:"PrimeX Keywords for Minimization"},"3620":{i:0.000172794826707949,u:"../primex_command_reference/primex_command_reciprocal.htm",a:"The keyword groups below must be included for all reciprocal-space refinements. Reflection data keywords \n     Calculation settings keywords \n     Map settings keywords. Only keywords for MAP_TYPE reg are allowed. \n     General reciprocal-space refinement keywords, as listed in  Table 1 . (Note that ...",t:"PrimeX Keywords for Reciprocal-Space Refinement"},"3621":{i:0.000169196816925757,u:"../primex_command_reference/primex_command_reciprocal_rigidbody.htm",a:"The following keywords are needed for rigid-body refinements, in addition to the general reciprocal-space refinement requirements. PRIMEX_TYPE RIGID_BODY NCS data keywords\n     Rigid-body refinement keywords, as listed in  Table 1 .\n       ◀  PrimeX Keywords for Reciprocal-Space Refinement PrimeX ...",t:"PrimeX Keywords for Rigid-Body Refinement"},"3622":{i:0.000165610757491529,u:"../primex_command_reference/primex_command_reciprocal_simanneal.htm",a:"The following keywords are needed for simulated annealing refinements, in addition to the general reciprocal-space refinement requirements. PRIMEX_TYPE ANNEAL Atom selection keywords\n     Simulated annealing keywords, as listed in  Table 1 .\n       ◀  PrimeX Keywords for Rigid-Body Refinement PrimeX ...",t:"PrimeX Keywords for Simulated Annealing"},"3623":{i:0.000155920337430563,u:"../primex_command_reference/primex_command_reciprocal_minimize.htm",a:"The following keywords are needed for minimizations, in addition to the general reciprocal-space refinement requirements. PRIMEX_TYPE RECIP_MIN ASL data\n     NCS data\n     Reciprocal-space minimization keywords, as listed in  Table 1 .\n       ◀  PrimeX Keywords for Simulated Annealing PrimeX Command ...",t:"PrimeX Keywords for Reciprocal-Space Minimization"},"3624":{i:0.000154497091304434,u:"../primex_command_reference/primex_command_ligandsolvent.htm",a:"The following keywords are needed for ligand and solvent molecule placement. PRIMEX_TYPE LIGAND Reflection data keywords\n     SEQ_FILE Calculation settings keywords\n     Ligand and solvent placement keywords, as listed in  Table 1 .\n       ◀  PrimeX Keywords for Reciprocal-Space Minimization PrimeX ...",t:"PrimeX Keywords for Ligand and Solvent Placement"},"3625":{i:0.000158913931359316,u:"../primex_command_reference/primex_command_water.htm",a:"The following keywords are needed for ligand and solvent molecule placement. PRIMEX_TYPE ADD_WATER Calculation settings keywords\n     Reflection data keywords \n     Water placement keywords, as listed in  Table 1 .\n       ◀  PrimeX Keywords for Ligand and Solvent Placement PrimeX Command Reference ...",t:"PrimeX Keywords for Water Placement"},"3626":{i:0.000132528674757948,u:"../primex_command_reference/primex_command_rfactor.htm",a:"PrimeX Keywords for R-Factor Calculation The following keywords are needed for R-factor calculations. PRIMEX_TYPE CALC_RFACT Calculation settings keywords\n     Reflection data keywords\n    ",t:"PrimeX Keywords for R-Factor Calculation"},"3627":{i:0.000176142692996449,u:"../primex_command_reference/primex_command_export.htm",a:"The following keywords are needed to export a structure to a PDB file. PRIMEX_TYPE PDB_EXPORT Calculation settings keywords\n     Reflection data keywords\n     Export keywords, as listed in  Table 1   ◀  PrimeX Keywords for R-Factor Calculation PrimeX Command Reference Manual PrimeX Utilities  ▶",t:"PrimeX Keywords for Exporting a Structure to a File"},"3628":{i:0.000140581152299453,u:"../primex_command_reference/primex_command_utilities.htm",a:"PrimeX Utilities Utilities for all products can be found in $SCHRODINGER/utilities. For PrimeX use, the utilities described in the topics listed below may be useful.",t:"PrimeX Utilities"},"3629":{i:0.000147604846559238,u:"../primex_command_reference/primex_command_utilities_mtzprint.htm",a:"\n            mtzprint\n This utility reads a binary .mtz (CCP4) file and writes out a text version of the file. The command syntax is as follows: \nmtzprint -i input-file [-o output-file] [-nref number-of-reflections]\n If the output file is not specified, the file is written to standard output. The ...",t:"\n            mtzprint\n"},"3630":{i:0.000161477949559939,u:"../primex_command_reference/primex_command_utilities_refconvert.htm",a:"\n            refconvert This utility converts between various reflection file formats. The command syntax is: \nrefconvert [options] [MTZ-options] -iinformat input-file -ooutformat output-file The format string defines the formats. There must be no spaces between the format string and the -i or -o ...",t:"\n            refconvert"},"3631":{i:0.000134164102727084,u:"../primex_command_reference/primex_command_utilities_ccp42cns.htm",a:"\n            ccp42cns\n This utility converts a CCP4 map to a CNS map. The command syntax is: \nccp42cns -i ccp4-map-file -o cns-map-file",t:"\n            ccp42cns\n"},"3632":{i:0.000124194820423166,u:"../primex_command_reference/primex_command_utilities_pprep.htm",a:"To run the preparation steps that are necessary before a structure can be used by PrimeX, you can use the prepwizard utility, as follows: \n$SCHRODINGER/utilities/prepwizard -keepfarwat -nohtreat \n These options perform the same treatment as is done from the Input Data panel when you select Assign ...",t:"Protein Preparation Command for PrimeX"},"3633":{i:8.77180188456314E-05,u:"../primex_command_reference/primex_command_utilities_parameter.htm",a:"If you want to write out parameter (topology) files for your ligands, you can use the utility hetgrp_ffgen: \n$SCHRODINGER/utilities/hetgrp_ffgen {2001|2005} input-file -write_cif [-jobname jobname] \n where the first argument is the OPLS force field version, and the input file contains the ligands in ...",t:"Writing PrimeX Parameter Files for Ligands"},"3634":{i:6.13254596701412E-05,u:"../protein_prep_command_reference/pprep_command_tools.htm",a:"The command line tools used for protein preparation are described in this document. For a description of the command options, run the command with the -h option.  On Linux and Mac platforms, open a terminal window and set the SCHRODINGER environment variable to the software installation directory. ...",t:"Protein Preparation Command-Line Tools"},"3635":{i:8.55327943497625E-05,u:"../protein_prep_command_reference/pprep_command_tools_impref.htm",a:"\n            The impref Utility The impref utility is run by the Protein Preparation Wizard to perform the refinement stage of protein preparation. It uses Impact to perform minimizations in which the heavy atoms are restrained with a harmonic potential of 25 kcal mol−1 Å−2 and unrestrained ...",t:"\n            The impref Utility"},"3636":{i:8.84098121270157E-05,u:"../protein_prep_command_reference/pprep_command_tools_prepwizard.htm",a:"\n            The prepwizard Utility If you know what treatment is needed in advance, you can run the Protein Preparation Wizard from the command line, using the utility prepwizard. The syntax of the command is as follows: \nprepwizard [options] [job-options] input-file output-file The -NJOBS n, ...",t:"\n            The prepwizard Utility"},"3637":{i:0.000120400584806,u:"../protein_prep_command_reference/pprep_command_tools_protassign.htm",a:"\n            The protassign Utility\n The protassign script optimizes the hydrogen-bonding network, rotating hydroxyl and thiol hydrogens (including waters), generating appropriate protonation and tautomerization states of His, and performing chi flips in Asn, Gln, and His residues. For details of ...",t:"\n            The protassign Utility\n"},"3638":{i:6.13254596701412E-05,u:"../python_pipeline/pipeline_overview.htm",a:"The Python pipeline is a framework for running jobs that consist of multiple stages that can involve multiple products. This framework consists of a set of Python modules that perform various tasks and make use of the underlying libraries that are used by the products themselves as necessary. The ...",t:"Overview of the Python Pipeline"},"3639":{i:0.000165921578121826,u:"../python_pipeline/pipeline_input_file.htm",a:"In this chapter, the input file is described in detail. Normally, you would use the Write button in one of the Maestro panels to write the input file, and then modify it for your purposes. However, you can construct an input file without using a file written from Maestro. ",t:"The Python Pipeline Input File"},"3640":{i:0.000215526657931842,u:"../python_pipeline/pipeline_input_file_syntax.htm",a:"The input file consists of a number of blocks. Each block has the following syntax \n[ blocktype:blockname ]\n   keyword value\n...\n   keyword value A block is terminated by the start of another block or the end of file. The keyword is separated from the value by a space. Otherwise, spaces and blank ...",t:"Pipeline Input File Syntax"},"3641":{i:0.000133685109397727,u:"../python_pipeline/pipeline_input_file_modules.htm",a:"Available Pipeline Modules and Stages In this section each module is described, and the keywords for each stage available in the module are tabulated. In addition to the tabulated keywords, each stage must have an INPUTS and an OUTPUTS keyword.",t:"Available Pipeline Modules and Stages"},"3642":{i:0.000156214481811181,u:"../python_pipeline/pipeline_input_file_modules_combine.htm",a:"This module combine multiple structure file sets into a single file.  Stage CombineStage This stage combines multiple structure sets into one set, with the option of labeling each ligand by the input set from which it came. The stage takes up to ten input structure files sets and generates one ...",t:"Pipeline Module combine"},"3643":{i:0.000143295874493348,u:"../python_pipeline/pipeline_input_file_modules_convert.htm",a:"This module converts structure files from one format to another. It has a single stage.  Stage ConvertStage This stage converts structure files from one format to another. The formats that are supported are Maestro, PDB, SMILES, either as a SMILES string with an optional title (.smi) or in a CSV ...",t:"Pipeline Module convert"},"3644":{i:0.00014682067146291,u:"../python_pipeline/pipeline_input_file_modules_glide.htm",a:"This module runs Glide grid generation and ligand docking calculations. It is used by VSW. Many of the keywords are the same as in the Glide input file.  Stage GridgenStage This stage generates the receptor grid for Glide docking calculations. The keywords are described in  Table 1 . Correspondences ...",t:"Pipeline Module glide"},"3645":{i:0.000141558279549534,u:"../python_pipeline/pipeline_input_file_modules_gencodes.htm",a:"Generate and store codes for ligands/compounds and variants. Stage GenCodesStage The keywords are described in  Table 2 .   Stage RestoreTitlesStage This stage restores the original titles to the compounds. It is necessary because some stages modify the title for internal tracking purposes.",t:"Pipeline Module gencodes"},"3646":{i:0.000148166130992774,u:"../python_pipeline/pipeline_input_file_modules_filtering.htm",a:"The filtering module provides stages for filtering structures given a set of filtering criteria. Stage ChargeFilterStage The chargefilter module filters ligands based on total molecular charge. Ligands within the charge range are kept; other ligands are filtered out. The keywords for the ...",t:"Pipeline Module filtering"},"3647":{i:0.000148550774296782,u:"../python_pipeline/pipeline_input_file_modules_ligprep.htm",a:"Run Ligprep and manage variants. Stage LigPrepStage This stages runs LigPrep on the input structures. The keywords are described in  Table 1 . Stage PostLigPrepStage This stage limits the number of stereoisomers, removes states penalized by Epik or ionizer, and generates a property that identifies ...",t:"Pipeline Module ligprep"},"3648":{i:0.000143368313351448,u:"../python_pipeline/pipeline_input_file_modules_macromodel.htm",a:"Pipeline Module macromodel This module runs MacroModel conformational search and ring sampling jobs. Stage ConfSearchStage The keywords are described in  Table 1 . Stage SampleRingsStage The keywords are described in  Table 2 .",t:"Pipeline Module macromodel"},"3649":{i:0.000141219349516463,u:"../python_pipeline/pipeline_input_file_modules_prime.htm",a:"This module is used to run Prime MM-GBSA and structure refinement jobs. It is used for covalent docking jobs.  Stage MMGBSAStage Stage for running Prime MM-GBSA on input structures. First structure in the input set is assumed to be the receptor. The stage takes one input structure file set and ...",t:"Pipeline Module prime"},"3650":{i:0.000138439021808007,u:"../python_pipeline/pipeline_input_file_modules_pull.htm",a:"This module extracts a subset of ligands or compounds from a file. It is used by VSW.  Stage PullStage This stage identifies a subset of compounds from one set of ligand structures, and extracts all variants of those compounds from a second set of ligand structures, given the number or percent to ...",t:"Pipeline Module pull"},"3651":{i:9.77144427721797E-05,u:"../python_pipeline/pipeline_input_file_modules_qikprop.htm",a:"This module runs QikProp jobs. Stage QikPropStage This stage runs QikProp jobs. QikProp properties are added to the output structures. The stage takes one set of input structure files and generates one set of corresponding output files. The number of subjobs is equal to the number of input files. ...",t:"Pipeline Module qikprop"},"3652":{i:0.000122983484086408,u:"../python_pipeline/pipeline_input_file_modules_qsite.htm",a:"This module runs QSite jobs. It is used by QPLD. Stage QSiteStage This stage runs a QSite job. The QM region must be defined in terms of ligands or ions: it cannot be defined by hydrogen caps or cuts in the receptor. The input structure file (INPUTS) must be a Maestro file containing one complex or ...",t:"Pipeline Module qsite"},"3653":{i:9.52965697452543E-05,u:"../python_pipeline/pipeline_input_file_modules_rmsd.htm",a:"This module can be used to calculate RMSDs between structures in two sets.  Stage RmsdStage This stage calculates the RMSD between structures in a reference set and structures in a second set, and writes out a file containing the RMSD as a property. The keywords are described in  Table 1 .  ",t:"Pipeline Module rmsd"},"3654":{i:0.00012380418041435,u:"../python_pipeline/pipeline_running.htm",a:"Running the Python Pipeline The topics listed below describe how to run and restart pipeline jobs from the command line.",t:"Running the Python Pipeline"},"3655":{i:0.000159178358881779,u:"../python_pipeline/pipeline_running_command.htm",a:"The generic command for running the pipeline is  \n$SCHRODINGER/run pipeline_startup.py [options] jobname.inp\n For specific workflows, you can use the top-level script that runs the workflow, for example: \n$SCHRODINGER/vsw [options] jobname.inp\n The progress of a pipeline job is as follows. First, ...",t:"The Pipeline Job Command"},"3656":{i:0.000106428039496959,u:"../python_pipeline/pipeline_running_restart.htm",a:"If a pipeline job fails for some reason, it can be restarted at a point that is related to where the failure occurred, provided that the relevant files are available. To ensure that you can restart a job, you must use the -LOCAL option, so that the subjob files are written to a disk system that is ...",t:"Restarting Pipeline Jobs"},"3657":{i:8.17045637176351E-05,u:"../qikprop_command_reference/qikprop_command.htm",a:"To run QikProp from the command line, enter the command: qikprop [options] input-file QikProp accepts the standard Job Control options, and the common options -LOCAL, -WAIT, and -HELP. These options are described in  Running Jobs From the Command Line . For a description of the QikProp command line ...",t:"Running QikProp from the Command Line"},"3658":{i:0.000119871823697475,u:"../qikprop_command_reference/qikprop_output.htm",a:"For every completed QikProp job, the following files are created: jobname.CSV jobname.qpsa jobname.out jobname.log Here, jobname is the stem of the input file name. If you started the job from Maestro, jobname is the name you entered in the Name text box. In addition to these standard files, a ...",t:"QikProp Output Files"},"3659":{i:0.000145346640672912,u:"../qikprop_command_reference/qikprop_command_qplimits.htm",a:"The QPlimits file can be used to set the defaults for some QikProp settings or to customize the ranges of values that determine which molecules are flagged as being dissimilar to other known drugs. This file can be copied from the $SCHRODINGER/qikprop-vversion/data directory to the current working ...",t:"Customizing QikProp with the QPlimits File"},"3660":{i:0.000166211371558551,u:"../qikprop_command_reference/qikprop_command_similarity.htm",a:"QikProp uses similarity in property space to improve predictions of key properties, and to return similar molecules from a database. The similarity calculation uses a normalized Euclidean functional form with a proprietary set of per-property weights. Similarities range from a value of 0.0 (no ...",t:"Use of Similarity in QikProp"},"3661":{i:0.000152898653206609,u:"../qikprop_command_reference/qikprop_command_similarity_improvement.htm",a:"To improve predictions for the key properties solubility (logS) and permeability (logP), similarities in molecular property space are used along with a large set of experimental measurements and the corresponding QikProp predictions. The QikProp prediction is adjusted with a contribution from ...",t:"Improvement of QikProp logS and logP Predictions"},"3662":{i:0.000104648800176053,u:"../qikprop_command_reference/qikprop_command_similarity_retrieval.htm",a:"QikProp uses the same molecular similarity calculation to identify and return names of the n most similar compounds from a CSV file that contains a set of QikProp predictions. The default file is the file Similar.CSV, which is stored in $SCHRODINGER/qikprop-vversion/data. This file was generated by ...",t:"Retrieval of Molecules by Similarity with QikProp Properties"},"3663":{i:0.000106979966194533,u:"../qsite_command_reference/qsite_command.htm",a:"Although you will normally set up QSite jobs using the controls and settings in the Maestro GUI, you can submit jobs either from Maestro or from the command line. The same is true for the Protein Preparation facility. Advantages of running from the command line include: The command-line scripts can ...",t:"Running QSite from the Command Line"},"3664":{i:0.000140156025767891,u:"../qsite_command_reference/qsite_command_files.htm",a:"QSite jobs have a single input file, which is like the Jaguar input file. The input for the QM part of the calculation is included as regular Jaguar sections with their keywords. The input for the MM part is embedded in an mmkey section, and consists of keywords that correspond to the Impact ...",t:"QSite Files"},"3665":{i:0.000113884693955246,u:"../qsite_command_reference/qsite_command_syntax.htm",a:"The qsite command provides the means to submit new QSite jobs and to restart QSite jobs. To run a job, the syntax is: \n$SCHRODINGER/qsite [run-options] jobname[.in] \n The .in suffix for the input file, jobname.in, is optional: if it is not specified, it is added. You want to run the QM part of the ...",t:"The qsite Command"},"3666":{i:0.000135201433331342,u:"../qsite_command_reference/qsite_command_input.htm",a:"The input file for QSite combines the input required for Jaguar and the input required for Impact. The file is in the same format as the Jaguar input file, and the input sections that relate to the QM part of the calculation are the same as in the Jaguar input file. For details on these sections, ...",t:"The QSite Input File"},"3667":{i:0.000162993705742674,u:"../qsite_command_reference/qsite_command_input_gen.htm",a:"In addition to the Jaguar keywords, there are some QSite-specific keywords that can be added to the gen section. These keywords are described in  Table 1 . If you want to print the forces for both the QM and the MM atoms, you can set ip191=2. The forces are printed out in a table labeled “Full QM/MM ...",t:"Additions to the gen Section for QSite"},"3668":{i:0.00014742527070849,u:"../qsite_command_reference/qsite_command_input_qmregion.htm",a:"The qmregion section contains specifications that define the QM region, in terms of frozen-orbital cuts, free ligands, ions, or cofactors, and hydrogen caps. The specifications are made in a free-format table, using the keywords given in  Table 1 . The first five keywords can be combined in any ...",t:"The qmregion Section"},"3669":{i:0.000142105596697917,u:"../qsite_command_reference/qsite_command_input_mmkey.htm",a:"The mmkey section includes keywords for specifying the MM potential (corresponding to choices in the Potential tab of the QSite panel), for controlling the MM minimization (MM Minimization tab), and for constraints (MM Constraints tab). MM potential keywords are listed in  Table 1 , and MM ...",t:"The mmkey Section"},"3670":{i:0.000105166643888221,u:"../qsite_command_reference/qsite_command_input_mopac.htm",a:"This section is used to specify keywords for semiempirical NDDO calculations on the QM region. The keywords are the same as in the semiempirical NDDO input file—see  Keywords Supported in the Semiempirical NDDO Module . In the mopac section, they must be assigned values of 1 (true) or 0 (false). ...",t:"The mopac Section"},"3671":{i:8.36742933768281E-05,u:"../qsite_command_reference/qsite_command_output.htm",a:"The output file from QSite contains a combination of the Jaguar output and the Impact output. Details of the Jaguar output are given in  Jaguar Output .  Near the top of the output, a table of mappings of Jaguar atom numbers to Maestro atom numbers is printed, from the pre program in Jaguar. This is ...",t:"The QSite Output File"},"3672":{i:0.00013036669979237,u:"../shape_screening_command_reference/shape_screening_command.htm",a:"Shape Searches from the Command Line The topics listed below provide information on shape screening from the command line and utilities for generating information for shape screening options.",t:"Shape Searches from the Command Line"},"3673":{i:0.000155874189834702,u:"../shape_screening_command_reference/shape_screening_command_syntax.htm",a:"The command syntax for a shape search is as follows: \n$SCHRODINGER/shape_screen -JOB jobname {CHECKPOINT|-RESTART path|-NO_CHECKPOINT} [program-options] [job-options] \n The main job options are described in  Running Jobs From the Command Line . The program options, other job options, and the ...",t:"The shape_screen Command"},"3674":{i:0.000138135876469047,u:"../shape_screening_command_reference/shape_screening_command_included_volumes.htm",a:"The simplest way to create an included volume file that can be used as a shape query is to rename an .xvol excluded volume file to have the extension .ivol. To create an excluded volume, use the Hypothesis Table panel in Maestro to create a hypothesis, add the desired included volumes as excluded ...",t:"Creating Included Volumes for Shape Queries"},"3675":{i:0.000101157530855492,u:"../shape_screening_command_reference/shape_screening_command_consensus.htm",a:"Shape searches on multiple aligned structures do not work well because of the number of small interatomic distances. A more robust approach is to create a consensus shape, where closely superimposed atoms are replaced by a single representative sphere.  Consensus shapes can be created with the ...",t:"Creating Consensus Shape Queries"},"3676":{i:0.000131856307999991,u:"../sitemap_command_reference/sitemap_command.htm",a:"SiteMap can be run from the command line with the sitemap command. For general information on running jobs from the command line, see  Running Schrödinger Software . The syntax of the sitemap command is as follows: \nsitemap [options] [-prot file.mae] [-i jobname.in]\n The principal arguments are ...",t:"Running SiteMap from the Command Line"},"3677":{i:0.000139578594953593,u:"../sitemap_command_reference/sitemap_command_options.htm",a:"For a description of the command options, run the command sitemap -h. The options are classified into the common options, additional options, and advanced options. The common options include the ones that are set from the SiteMap panel in Maestro. The command options can be placed in a command input ...",t:"SiteMap Command Options and Input File"},"3678":{i:0.000144318887821321,u:"../sitemap_command_reference/sitemap_command_output.htm",a:"The following output is generated by SiteMap: Site-point files (in compressed Maestro format) and map files (.vis and .grd). These files are read by Maestro to display the SiteMaps. For each site, a set of five or six map files is produced, containing the hydrophobic, hydrophilic, donor, acceptor, ...",t:"SiteMap Output"},"3679":{i:0.000102217665424722,u:"../sitemap_command_reference/sitemap_command_adapting.htm",a:"SiteMap provides control over many aspects of the calculations through command-line options, so that you can adapt SiteMap to the systems that you are interested in. The topics listed below describe a number of different scenarios with the relevant command options. Adjusting the Closeness of the Map ...",t:"Adapting SiteMap to Specific Systems"},"3680":{i:0.000124208817061085,u:"../vsw_command_reference/vsw_command_restart.htm",a:"To restart a job, run it from the command line with the -RESTART option: \nvsw -RESTART [options] jobname.inp\n If you omit the -RESTART option, you will be prompted to indicate whether to resume the job where it left off, to restart it from the beginning, or to exit without doing anything. You can ...",t:"Restarting VSW Jobs"},"3681":{i:0.000139701806704524,u:"../vsw_command_reference/vsw_command_output.htm",a:"Output files are created in subdirectories of the working directory. The path to the output files is given at the end of the log file. For each receptor, a pose viewer file (_pv.maegz) is created, containing the receptor and the docked ligands. In addition, these files are merged into a single ...",t:"VSW Output Files"},"3682":{i:0.000101601180106317,u:"../vsw_command_reference/vsw_command_merging.htm",a:"\n            Merging Results of Multiple VSW Jobs\n Although you can include multiple receptors in a single run of the workflow, you may want to merge the results of several runs of the workflow into a single Glide pose viewer file. You can do this with the utility glide_ensemble_merge. In the ...",t:"\n            Merging Results of Multiple VSW Jobs\n"},"3683":{i:6.13254596701412E-05,u:"../quick_reference/cluster_configuration.htm",a:"This document summarizes the steps needed to set up a cluster for running Schrödinger jobs via a queueing system and ensuring user access. It is assumed that the manager node (head node) is the node on which the queue commands will be run. For more information, see the appropriate sections of  ...",t:"Cluster Setup for Schrödinger Jobs"},"3684":{i:8.71756107702934E-05,u:"../install_guide/mogul_config.html",a:"  If you want to run ligand reliability reports from Maestro, you must   have an installed copy of Mogul that is properly licensed. Mogul and its license are not provided with Schrödinger software. Mogul is available from the CCDC web site,  ...",t:"Configuring Mogul for Maestro Use"},"3685":{i:6.71175066426048E-05,u:"../quick_reference/glide_docking_summary.htm",a:"This sheet summarizes the process of docking a set of compounds (ligands) from a file to a PDB target that has a cocrystallized ligand. The process involves preparing the protein, preparing the ligands, setting up a grid, and docking the compounds. Preprocessing is necessary because modeling ...",t:"Glide Docking Quick Reference"},"3686":{i:6.13254596701412E-05,u:"../quick_reference/ligand_preparation_summary.htm",a:"Proper preparation of 3D, all-atom ligand structures is critical to modeling tasks. The preparation involves the following tasks: Add hydrogen atoms. Filter out unsuitable molecules based on their properties. Remove unwanted molecules, such as water, small ions. Neutralize charged groups, then ...",t:"Ligand Preparation Summary"},"3687":{i:8.55716728406209E-05,u:"../quick_reference/nonstandard_job_options.htm",a:"There are several options that affect the overall execution of the job that are not standard Job Control options. These options are supported by many programs but not all. These options are described in  Running Jobs From the Command Line . The support of these options is summarized in  Table 1 . ✻ ...",t:"Nonstandard Job Options Supported, by Product"},"3688":{i:6.13254596701412E-05,u:"../quick_reference/compound_library_prep.htm",a:"This document contains instructions on how to prepare a virtual screening library of compounds for use by Glide or by Phase. The full preparation procedure uses LigPrep, Epik, and QikProp, but you can run the main part of it with just LigPrep. While this procedure can be varied, the instructions ...",t:"Preparing a Library of Compounds for Glide or Phase"},"3689":{i:6.13254596701412E-05,u:"../quick_reference/protein_preparation_summary.htm",a:"This topic summarizes basic protein preparation with the Protein Preparation Wizard. More information on protein preparation is given in the  Protein Preparation Guide . You can open the Protein Preparation Wizard from the Applications menu or Tasks menu or with the toolbar button.   Preprocess: ...",t:"Protein Preparation Summary"},"3690":{i:6.13254596701412E-05,u:"../quick_reference/linux_quick_install.htm",a:"The instructions below are for a new installation of Schrödinger’s Release 2017-1 software on a typical Linux platform. If you need more details or encounter problems, see  Installing the Software on Linux . Checking your system Check that your system has sufficient disk space: df -h To install all ...",t:"Quick Guide to Installation on Linux"},"3691":{i:6.13254596701412E-05,u:"../quick_reference/windows_quick_install.htm",a:"This topic describes how to install Schrödinger’s Release 2017-1 software for use on a single Windows machine. If you need more details or encounter problems, see  Installing the Software on Windows . If you want to run jobs on remote hosts, or perform any other nondefault installation tasks, see ...",t:"Quick Guide to Installation on Windows"},"3692":{i:6.13254596701412E-05,u:"../quick_reference/mac_quick_install.htm",a:"This document describes how to do a default installation of Schrödinger’s Release 2017-1 software for use on a single Mac machine. If you need more details or encounter problems, see  Installing the Software on a Mac . If you want to run jobs on remote hosts, or perform any other nondefault ...",t:"Quick Guide to Installation on a Mac"},"3693":{i:0.000529941253455836,u:"../quick_reference/distributed_jobs.htm",a:"A number of Schrödinger products can distribute work over multiple processors. There are several algorithms for performing the distribution. Some jobs divide the input structures into batches. Each batch is then submitted to a processor for execution as a subjob. The number of processors used and ...",t:"Running Distributed Schrödinger Jobs"},"3694":{i:0.000408351377510264,u:"../quick_reference/running_software.htm",a:"Schrödinger applications can be run from a graphical interface or from the command line. The software writes input and output files to a directory (folder) which is termed the working directory. If you run applications from the command line, the directory from which you run the application is the ...",t:"Running Schrödinger Software"},"3695":{i:8.78950334996946E-05,u:"../quick_reference/schrodinger_utilities.htm",a:"This document contains a complete list of the utilities stored in $SCHRODINGER/utilities in the Schrödinger Software Release 2017-1 distribution, with a brief description and links to command syntax and fuller descriptions. Some utilities are general-purpose utilities, others are specific to a ...",t:"Schrödinger Utilities"},"3696":{i:0.000533179898831575,u:"../quick_reference/running_maestro_jobs.htm",a:"To run a job from Maestro, you open a panel from one of the menus (e.g. Tasks), make settings, and then submit the job to a host or a queueing system for execution. The panel settings are described in the help topics and in the user manuals. When you have finished making settings, you can use the ...",t:"Starting Jobs from Maestro"},"3697":{i:0.000263040499504694,u:"../quick_reference/starting_maestro.htm",a:"If Maestro is not running, you can start it as follows: Linux: Open a terminal window. Set the SCHRODINGER environment variable to the Schrödinger software installation directory: Enter the following command: $SCHRODINGER/maestro \u0026  Windows: Double-click the Maestro icon on the desktop.  You can ...",t:"Starting Maestro"},"3698":{i:0.000127281596726147,u:"../install_guide/software_requirements.htm",a:"Software Requirements This section lists requirements in addition to the general minimum system requirements. You should check the  Supported Platforms  page on the web site and the Knowledge Base article on  hardware requirements  for more information on requirements. ",t:"Software Requirements"},"3699":{i:0.000156614080002392,u:"../install_guide/software_requirements_linux.htm",a:"Basic requirements: If using NFS, file locking must be enabled. \n     RedHat/CentOS requirements: The nfs-utils package must be installed. yum install nfs-utils Ubuntu requirements: The mesa-utils and lsb-core packages must be installed: sudo apt-get install mesa-utils\nsudo apt-get install lsb-core ...",t:"Linux Requirements"},"3700":{i:0.000145374616208673,u:"../install_guide/software_requirements_windows.htm",a:"The following software is required: Microsoft Visual Visual C++ 2013 Redistributable Package for both 32-bit (x86) and 64-bit Maestro executables (x64). This package is included with the software distribution, and can be installed as needed. You will be prompted to install it during installation if ...",t:"Windows Requirements"},"3701":{i:0.000140015648411529,u:"../install_guide/software_requirements_mac.htm",a:"Mac Requirements If you need to compile Prime third-party programs, you must install XCode, including the command-line tools. This requires an Apple Developer account. ",t:"Mac Requirements"},"3702":{i:0.000132341827206483,u:"../install_guide/software_requirements_remote_host.htm",a:"To run jobs on remote hosts, you must set up access to these hosts by allowing use of the ssh command without specifying a password. If you have a firewall, you must allow access across the firewall.  The remote hosts must be configured to meet the following requirements:  A Linux operating system ...",t:"Remote Host Access Requirements"},"3703":{i:0.000184362328298797,u:"../install_guide/software_requirements_queueing_system.htm",a:"To run jobs on a remote host, a queueing system is required. The following queueing systems are supported: PBS Pro\n     Grid Engine, including SGE, Open Grid Scheduler, and Univa GE, minimum version 6.2\n     LSF, minimum version 7.0.2\n     SLURM, minimum version 2.1\n     Torque\n     Information on ...",t:"Supported Queueing Systems"},"3704":{i:0.000255019975489797,u:"../install_guide/software_requirements_prime_thirdparty.htm",a:"To use Prime for homology modeling, you must install or have access to the PDB, the BLAST program and associated sequence databases, and the HMMER program and Pfam database. The required third-party programs, the BLAST database for web-based searching, and the Pfam database are provided in the ...",t:"Prime Third-Party Software and Databases"},"3705":{i:0.000142975787248963,u:"../install_guide/software_requirements_prime_thirdparty_local.htm",a:"If you want to use a local copy of the PDB and BLAST databases, you can download them from the relevant web sites or obtain them from Schrödinger on separate DVDs. Instructions are given in  Installing Prime Third-Party Software and Databases on Linux ,  Installing Prime Third-Party Software and ...",t:"Installing Local Copies of the Prime Third-Party Software and Databases"},"3706":{i:0.000193792787211798,u:"../install_guide/software_requirements_prime_thirdparty_envvars.htm",a:"After you have installed the software, you may need to set environment variables to identify the location of the software, depending on where it is installed. For a default Schrödinger installation that uses web-based searching (does not use a local PDB or BLAST database), you should not need to set ...",t:"Setting Environment Variables for the Prime Third-Party Software and Databases"},"3707":{i:0.000101548725391064,u:"../install_guide/linux_install.htm",a:"Installing the Software on Linux Before installing Schrödinger products and documentation, read  Software Requirements  for information on software requirements. These requirements must be met before installation. If you are installing on a cluster, read  Configuring Clusters . ",t:"Installing the Software on Linux"},"3708":{i:0.000154234459168301,u:"../install_guide/linux_install_access.htm",a:"The software can be obtained on a DVD or downloaded from the Schrödinger web site. You must ensure that it is accessible from each host on which you want to install it. The directory that contains the software for installation will be called the installer directory. When you have completed this ...",t:"Access to the Software on Linux"},"3709":{i:0.000136062001204049,u:"../install_guide/linux_install_installing.htm",a:"When you select the locations for installing the software, you must ensure that the software is accessible from all hosts that are used either to submit jobs or to run jobs. This includes individual nodes on a cluster.  Change to the installer directory. Enter the command ./INSTALL This script ...",t:"Installing the Software and Documentation on Linux"},"3710":{i:0.000121806118486145,u:"../install_guide/linux_install_license.htm",a:"Installation of the license can be done with the Configure Schrodinger Software application. You can copy an existing valid license, install a new license, or request a new license with this application. If you don’t have a license already, or have not been sent a license key, go to  ...",t:"Licensing the Software on Linux"},"3711":{i:0.000128982415372446,u:"../install_guide/linux_install_envvar.htm",a:"Before you can launch Schrödinger software, you must set some environment variables. In addition to those listed below, there may be product-specific environment variables that need to be set—see the requirements section for each product.  To set the SCHRODINGER environment variable, enter the ...",t:"Setting the Environment Variables on Linux"},"3712":{i:0.000116972033037241,u:"../install_guide/linux_install_stereo.htm",a:"To run Maestro in hardware stereo mode, you must set the graphics driver in stereo-capable mode. For information on how to do this, consult the documentation for your graphics card.  As NVIDIA graphics cards are the most commonly used cards for hardware stereo, instructions are given in the ...",t:"Enabling Hardware Stereo Viewing on Linux"},"3713":{i:0.000237999740899176,u:"../install_guide/linux_install_prime_thirdparty.htm",a:"Prime third-party products are included in the web download and are available on the Prime DVD set. They are installed by default. The Pfam database is also installed by default, as well as data required for web-based BLAST searches. PSIPRED is not included or required, but is highly recommended.  ...",t:"Installing Prime Third-Party Software and Databases on Linux"},"3714":{i:0.000171750900395448,u:"../install_guide/linux_install_vmd.htm",a:"To download VMD:  Go to the following web site: http://www.ks.uiuc.edu/Development/Download/download.cgi?PackageName=VMD In the section Version 1.8.7 (2009-08-01) Platforms, click on LINUX OpenGL, CUDA or on LINUX_64 OpenGL, CUDA. The choice depends on whether you want to use the 32-bit version or ...",t:"Installing VMD for Desmond"},"3715":{i:0.000264899463889581,u:"../install_guide/linux_install_qe.htm",a:"Quantum ESPRESSO (QE) is required for periodic DFT calculations in the Materials Science suite. It is not included in the Schrödinger software distribution, so it must be downloaded and installed. A customized version is available for download that contains special XML I/O capabilities that are used ...",t:"Installing and Configuring Quantum ESPRESSO"},"3716":{i:0.000163357982777289,u:"../install_guide/linux_install_pymol.htm",a:"Both Maestro and Canvas can open PyMOL directly. To do so, PyMOL must be installed and the location communicated to the application. The recommended procedure is: Install PyMOL in a location outside $SCHRODINGER, using setup.sh. You must use this script to ensure that the PyMOL installation is ...",t:"Setting Up Access to PyMOL"},"3717":{i:0.000107612809579188,u:"../install_guide/linux_install_uninstall.htm",a:"Uninstalling Schrödinger Software on Linux To uninstall the software for a release, delete the release directory: \nrm -rf install-directory",t:"Uninstalling Schrödinger Software on Linux"},"3718":{i:0.000116822651647321,u:"../install_guide/windows_install.htm",a:"We recommend that you install Schrödinger software as an administrator, and install for all users (AllUsers mode). However, if you do not have administrator privileges, you can install Schrödinger software in single-user (OnlyForMe) mode. To do so, you must have permission to write in the User ...",t:"Installing the Software on Windows"},"3719":{i:0.000138502040482991,u:"../install_guide/windows_install_preparing.htm",a:"Successful installation of Schrödinger Suite 2017-1 may depend on taking action on one or more of the following items. If you are using product management software, you should be aware that Schrödinger software includes files with a .ini extension that are not Windows .ini files. You may have to ...",t:"Preparing for Installation on Windows"},"3720":{i:0.000129523116801398,u:"../install_guide/windows_install_notes.htm",a:"The following notes describe choices that must be made or conditions that must be met when you install the software:  If you are installing the software as administrator, and you browse to create a directory and rename it, you must press F5 to force the dialog box to update the directory to the new ...",t:"Windows Installation Notes"},"3721":{i:0.000182413137537504,u:"../install_guide/windows_install_command_line.htm",a:"If you want to install the software from the command line, without using the graphical interface, you can run the installer in a DOS shell in silent mode, as follows: \nsetup-silent.exe [/install|/remove|/repair] options The options are described in  Table 1 . To check the progress of the ...",t:"Installing From the DOS Command Line"},"3722":{i:0.000133223179538383,u:"../install_guide/windows_install_troubleshooting.htm",a:"If the installation fails with the following error message, it may be that some of the software required for the installation is not registered on your machine.  Error 1720. There is a problem with this Windows Installer package. A script required for this install to complete could not be run. ...",t:"Troubleshooting Installation on Windows"},"3723":{i:0.00011693465608557,u:"../install_guide/windows_install_licensing.htm",a:"You do not need to do anything to set up licensing if you obtained the free version of Maestro as an academic user. Otherwise, you need to install a license. Installation of the license can be done with the Configure Schrodinger Software application. You can copy an existing valid license, install a ...",t:"Licensing the Software"},"3724":{i:0.000224794572123553,u:"../install_guide/windows_install_prime_thirdparty.htm",a:"Prime allows you to do both web-based searches of the BLAST and PDB databases and searches of a local copy of these databases. The required Prime third-party software is included in the Prime installer, and is installed into the thirdparty folder of the installation by default. The databases needed ...",t:"Installing Prime Third-Party Software and Databases on Windows"},"3725":{i:0.000120777017960084,u:"../install_guide/windows_install_pymol.htm",a:"Both Maestro and Canvas can open PyMOL directly. To do so, PyMOL must be installed and the location communicated to the application. The recommended procedure is: Install PyMOL in a location outside the Schrödinger software installation. Add the PyMOL location to the PATH environment variable.  Set ...",t:"Setting Up Access to PyMOL on Windows"},"3726":{i:0.000113478557431035,u:"../install_guide/windows_install_stereo.htm",a:"To run Maestro in hardware stereo mode, you must set the graphics driver in stereo-capable mode. For information on how to do this, consult the documentation for your graphics card.  As NVIDIA graphics cards are the most commonly used cards for hardware stereo, instructions are given in the ...",t:"Enabling Hardware Stereo Viewing on Windows"},"3727":{i:9.34790847098602E-05,u:"../install_guide/windows_install_uninstall.htm",a:"Before uninstalling Schrödinger software, ensure that all Schrödinger applications and supporting programs are not running: this includes utilities, Maestro, Schrodinger Command Prompt or SchrodingerShell windows, and any other Schrödinger applications. If remote jobs are running, you should wait ...",t:"Uninstalling Schrödinger Software on Windows"},"3728":{i:0.000115161494525768,u:"../install_guide/mac_install.htm",a:"The topics listed below provide information on installing and uninstalling Schrödinger software and the third-party databases needed for protein modeling.  After the software is installed, you must also install the license. You should receive instructions by email for obtaining and installing the ...",t:"Installing the Software on a Mac"},});