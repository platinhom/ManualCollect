define({"1609":{i:0.000140913091450309,u:"../combiglide_command_reference/combiglide_command_combgen_input_chain.htm",a:"The Chain command specifies the chain to be attached at a given attachment point on the core-containing molecule. The chain can consist of multiple fragments, joined in a linear sequence.  \nChain: chain-name min-frags max-frags from-name to-name The fourth and fifth parameters apply only when a core ...",t:"The combgen Chain Command"},"1610":{i:0.000140249401929852,u:"../combiglide_command_reference/combiglide_command_combgen_input_frag.htm",a:"The Frag command specifies the fragment library that is to be used to attach fragments to the specified chain at the specified fragment number. There must be a Frag command for each fragment, from fragment 1 to max-frags, of each specified chain. The syntax of the Frag command is as follows: \nFrag ...",t:"The combgen Frag Command"},"1611":{i:0.000137628880779367,u:"../combiglide_command_reference/combiglide_command_combgen_input_vlib.htm",a:"Vlib commands are used to specify virtual fragment libraries, which are defined to be subsets of normal, full fragment libraries. A virtual fragment library can be specified in a Frag command for the purpose of limiting fragment selections in combinatorial generations.  The syntax of the Vlib ...",t:"The combgen Vlib Command"},"1612":{i:0.000129044229238982,u:"../combiglide_command_reference/combiglide_command_combiglide.htm",a:"You can run combinatorial screening from the command line with the combiglide command. The syntax is: \n$SCHRODINGER/combiglide [options] jobname\n The best way to run combinatorial screening manually is to create input files using Maestro, modify them as needed, and use the above syntax to launch a ...",t:"Combinatorial Screening"},"1613":{i:0.000135156581613923,u:"../combiglide_command_reference/combiglide_command_libselector.htm",a:"The selection of a full combinatorial library starting with a docked selection from a much larger virtual combinatorial space can be performed with the utility libselector. A full description of library selection is given in  Combinatorial Screening: Focusing the Library .  The libselector utility ...",t:"Library Selection"},"1614":{i:0.000129082712357554,u:"../combiglide_command_reference/combiglide_command_libselector_qpfilter.htm",a:"The custom QikProp filter file consists of a set of specification lines with one of the following forms  property-nameminmax property-nameopvalue where property-name is the name of the QikProp property as it appears in a Maestro file, min and max are the minimum and maximum values for the property ...",t:"The libselector QikProp Filter File"},"1615":{i:0.000137764701687092,u:"../combiglide_command_reference/combiglide_command_libselector_include_exclude.htm",a:"The include and exclude files have a common format. The file consists of one or more lines that define a position; each such line is followed by one or more lines defining a reagent. The position definition line has the following format: \nposition_name: name where name is the name of the position. ...",t:"The libselector Include and Exclude Files"},"1616":{i:0.000140690280022138,u:"../combiglide_command_reference/combiglide_command_libselector_actives.htm",a:"Actives files are specified with either the -a option or the -A option. These files provide a list of specifications of which compounds in the library are known active.  For an active file specified by -a filename, the specification of an active consists of a list of comma-separated integers. Each ...",t:"The libselector Actives File"},"1617":{i:0.000142333292975128,u:"../combiglide_command_reference/combiglide_command_libselector_reagent.htm",a:"The main purpose of this file is to provide lists of reagents that the program selected for each combinatorial position. In addition, it provides information about the overall run and the reagents, and also gives a list of “runners up” at each position: reagents that might be selected if the maximum ...",t:"The libselector Reagent File"},"1618":{i:0.000145206393173347,u:"../combiglide_command_reference/combiglide_command_libselector_reagent_header.htm",a:"This section always includes invocation: and args: lines, giving the program name and arguments as it was executed. It also includes values for various library sizes: lib_size: size of the library selected by libselector ext_size: the maximum library size buildable from the output of CombiGlide ...",t:"Header Section of the libselector Reagent File"},"1619":{i:0.000102469167163654,u:"../combiglide_command_reference/combiglide_command_libselector_reagent_position.htm",a:"Each a position section starts with a position_name: line, then a reagent_filename: line, which specifies the name of the .bld file used to supply reagents at this position. A list of user-excluded reagent names at this position, if any, comes next. Following this, the file gives the best and worst ...",t:"Position Sections of the libselector Reagent File"},"1620":{i:0.000123564818776106,u:"../combiglide_command_reference/combiglide_utilities.htm",a:"The CombiGlide distribution includes a number of utilities, which are installed into the utilities directory of the installation. For information on command options, run the command with the -h option. See  Running Schrödinger Software  for information on using the command line. The utilities are ...",t:"CombiGlide Command-Line Tools"},"1621":{i:0.0001228530864964,u:"../combiglide_command_reference/combiglide_utilities_cg_add_chem_features.htm",a:"\n            cg_add_chem_features\n This utility adds chemical features to CombiGlide reagent files that were originally prepared without them, so that chemical feature analysis can be performed on an already-completed CombiGlide run. Chemical features are added to all newly prepared reagent files ...",t:"\n            cg_add_chem_features\n"},"1622":{i:0.000121520539234573,u:"../combiglide_command_reference/combiglide_utilities_chem_features.htm",a:"\n            chem_features\n This utility lists the chemical feature types present in the input structures. Several definitions of feature types can be used: the CombiGlide definition, the Phase definition, or a user-specified definition. See  Features and Types in Library Analysis  for a description ...",t:"\n            chem_features\n"},"1623":{i:8.71496743884325E-05,u:"../combiglide_command_reference/combiglide_utilities_cg_combine_bld.htm",a:"\n            cg_combine_bld\n This utility combines a set of reagent (.bld) files that were created by the Reagent Preparation procedure so that the combined file can be used as a reagent file at a single position in combinatorial enumeration or screening. Structures whose R-groups are identical to ...",t:"\n            cg_combine_bld\n"},"1624":{i:9.90797943694808E-05,u:"../covalent_docking_command_reference/covalent_docking_command.htm",a:"Covalent Docking Command Line Use Covalent docking jobs can be run from the command line. You can also set up a custom reaction chemistry in a file that can be used either from the command line or when setting up a job in Maestro. These capabilities are described in the topics listed below.",t:"Covalent Docking Command Line Use"},"1625":{i:0.00017765853909858,u:"../covalent_docking_command_reference/covdock_command.htm",a:"Command-line covalent docking jobs can be set up with command options, or with an input file, or both. The syntax of the command is: \ncovalent_docking [input-file] [options] receptor-file ligand-file attachment-residue where: input-file is an optional input file with extension .inp. This file can be ...",t:"Running Covalent Docking from the Command Line"},"1626":{i:0.000186914528262615,u:"../covalent_docking_command_reference/covdock_custom_chem.htm",a:"If you want to use a reaction other than the predefined reactions, you can define your own custom chemistry, by using keywords that you add to a file, one keyword per line. You can also use the corresponding command options to define a custom chemistry. However, storing the keywords in a file is ...",t:"Custom Chemistry Definitions for Covalent Docking"},"1627":{i:0.000191870619201271,u:"../covalent_docking_command_reference/covdock_custom_chem_groups.htm",a:"The first task is to define the ligand reactive group and the reactive residue on the receptor. This task is done with the LIGAND_SMARTS_PATTERN and RECEPTOR_SMARTS_PATTERN keywords. You can only have one instance of the RECEPTOR_SMARTS_PATTERN keyword, but you can have multiple instances of the ...",t:"Defining Custom Reactive Groups for Covalent Docking"},"1628":{i:0.000129906012121538,u:"../covalent_docking_command_reference/covdock_custom_chem_reaction.htm",a:"With the receptor and ligand reactive groups defined, the next stage is to define the reaction. This involves specifying the changes in the bonding and charges that have to be made to create the covalently bound complex from the receptor and the ligand, and can be viewed as a sequence of steps.  ...",t:"Defining a Custom Reaction for Covalent Docking"},"1629":{i:9.8133943122307E-05,u:"../covalent_docking_command_reference/covdock_custom_chem_saving.htm",a:"You can save the custom chemistry definition in a file. The file must contain the complete definition, and can also contain comment lines, which begin with a # symbol. The file name must have a .cdock extension.  Below is an example of the complete chemistry definition for an epoxide opening from ...",t:"Saving and Using the Custom Chemistry for Covalent Docking"},"1630":{i:6.13254596701412E-05,u:"../desmond_command_reference/desmond_intro_command.htm",a:"Desmond Command-Line Introduction This manual describes the use of Desmond from the command line in the Schrödinger environment: the programs, utilities, and files needed to run jobs with the Schrödinger Job Control facility. The Desmond backend uses other files and syntax when executing jobs, such ...",t:"Introduction to Desmond"},"1631":{i:0.000130240039030512,u:"../desmond_command_reference/desmond_command.htm",a:"Desmond jobs may be started from the command-line. The mechanisms for running jobs from the command line are described in this chapter. You might wish to run Desmond from the command line for any of the following reasons: To exercise greater control over Desmond behavior\n     To debug an aberrant ...",t:"Running Desmond Simulations from the Command Line"},"1632":{i:0.000125209726521911,u:"../desmond_command_reference/desmond_command_syntax.htm",a:"Desmond is run from the command-line by executing the script desmond, which is located in the $SCHRODINGER directory. The desmond script determines the proper executables to run for the host being used. Additional utility programs are provided in the $SCHRODINGER/utilities directory. The syntax for ...",t:"The desmond Command"},"1633":{i:0.000160343131232734,u:"../desmond_command_reference/desmond_command_multisim.htm",a:"\n            Running Multiple Desmond Simulations with MultiSim Molecular dynamics studies usually involve performing a series of calculations. For example, a sequence of minimization, thermalization, and relaxation calculations followed by the production simulation itself is usually undertaken for ...",t:"\n            Running Multiple Desmond Simulations with MultiSim"},"1634":{i:0.000136259875345512,u:"../desmond_command_reference/desmond_command_multisim_examples.htm",a:"A simple multisim command can take the form: \n$SCHRODINGER/utilities/multisim -i input.cms -m input.msj -HOST mycluster -JOBNAME multistage\n which runs the multisim utility with the starting structure from input.cms. The instructions for different stages of multisim are provided in input.msj. The ...",t:"Examples of Running MultiSim"},"1635":{i:0.000138824625060165,u:"../desmond_command_reference/desmond_command_multisim_jobfile.htm",a:"An example .msj file is given below. The file syntax is described in full in  The multisim Utility . The file is modular, consisting of a series of stages, each of which contains a list of keywords and value settings enclosed within braces. Lines beginning with # are comments and hence are ignored.  ...",t:"Sample MultiSim Job (.msj) File"},"1636":{i:0.000137253491582567,u:"../desmond_command_reference/desmond_command_multisim_intermediate.htm",a:"In general, the files from each stage are copied back to the launch directory as a gzipped tar archive with the name jobname_stage-number.tgz. The production simulation stage is treated differently and the files are directly copied back without being archived. This treatment would be similar to a ...",t:"Treatment of Intermediate Files by MultiSim"},"1637":{i:0.000163849858268036,u:"../desmond_command_reference/desmond_command_system_builder.htm",a:"\n            Building a Desmond Model System from the Command Line To prepare a model system from the command line, you can use the system builder utility, system_builder,. You can choose to add solvent, ions, and insert the solute into a membrane. The system_builder utility takes a composite system ...",t:"\n            Building a Desmond Model System from the Command Line"},"1638":{i:0.000148474225657978,u:"../desmond_command_reference/desmond_command_system_builder_reading.htm",a:"The first five sections read in all the structural information for the solute, solvent, and ions. To locate the files that contain this information, the current directory is searched first, then the directory $SCHRODINGER/mmshare-vversion/data/system_builder. The first section reads the solute and ...",t:"Reading the Structures in the System Builder File"},"1639":{i:0.000143719044060824,u:"../desmond_command_reference/desmond_command_system_builder_membrane.htm",a:"The keyword membranize instructs the system builder to create a membrane patch around the current solute structure. \nmembranize filename x-buf y-buf The first input parameter is the name of the file that includes the membrane template and its equilibrating solvent. The other two parameters x-buf and ...",t:"Adding a Membrane in the System Builder File"},"1640":{i:0.000142312526004152,u:"../desmond_command_reference/desmond_command_system_builder_box.htm",a:"The box shape and dimensions can be specified either in terms of an absolute size or in terms of a buffer distance.  The keyword boundary_conditions is used to define a box with specified absolute dimensions. The command using this keyword can be one of the following: \nboundary_conditions cubic ...",t:"Setting the Box Shape and Dimensions in the System Builder File"},"1641":{i:0.000142103868896328,u:"../desmond_command_reference/desmond_command_system_builder_ffld.htm",a:"The command set_oplsaa_version can be used to specify OPLSAA version. Currently only OPLS_2005 (value: 2005) is supported. \nset_oplsaa_version 2005\n By default, force-field parameters that are already present in the solute CTs (the ffio_ff block) are replaced. The following setting can be used to ...",t:"Setting Force Field Information in the System Builder File"},"1642":{i:0.000142774109604893,u:"../desmond_command_reference/desmond_command_system_builder_ions.htm",a:"The addition of ions to the system is governed by several keywords: add_ion, ion_location, exclude_ion_from, add_salt, and neutralize. \n            Two commands using the keyword add_ion can be used to add specific numbers of positive and negative ions. \nadd_ion positive 5\nadd_ion negative 5\n The ...",t:"Setting the Number and Location of Ions in the System Builder File"},"1643":{i:0.000145348422459219,u:"../desmond_command_reference/desmond_command_system_builder_solvent.htm",a:"\n            This command is used to initiate the solvation of the current solute structure, which includes the ions and the membrane. \nsolvate\n The keyword solvate is used to solvate the current solute structures using the solvent system defined in the solvent_desmond_oplsaa_typer section. The ...",t:"Adding Solvent in the System Builder File"},"1644":{i:0.000102509417664155,u:"../desmond_command_reference/desmond_command_system_builder_output.htm",a:"This command is used to write the output to a “maeff” (Maestro + force-field) file, otherwise known as a composite model system (CMS) file, which has the extension .cms.  \nwrite_maeff_file filename The keyword write_maeff_file writes the current composite structures and their force field parameters ...",t:"Writing the Output File in the System Builder File"},"1645":{i:0.000151046701218557,u:"../desmond_command_reference/viparr.htm",a:"The Desmond installation includes two utilities, viparr and build_constraints that can be used to add or adjust the force field parameters and the accompanying constraints for chemical systems prior to simulating them with Desmond. Both programs read and write Maestro structure files.  Viparr is a ...",t:"Alternate Force Field Parameters and Constraints for Desmond Simulations"},"1646":{i:0.000230981991414726,u:"../desmond_command_reference/viparr_utility.htm",a:"To run viparr, use the following command: \n$SCHRODINGER/run -FROM desmond viparr.py [options] input-file output-file where input-file and output-file are the input and output structure (CMS) files, respectively. This utility does not run under Job Control. It does not take much time, so it can be ...",t:"The viparr Utility"},"1647":{i:0.000176376681592288,u:"../desmond_command_reference/viparr__build_constraints.htm",a:"To create a constraint block use the following command: $SCHRODINGER/run -FROM desmond build_constraints.py [options] input-file output-file where input-file is a structure file that has been previously processed with viparr and output-file is a new structure file for the system with the constraints ...",t:"The build_constraints Utility"},"1648":{i:0.000135170229340749,u:"../desmond_command_reference/viparr_files.htm",a:"The input structure file should contain all the atoms in the chemical system that are to be simulated, including hydrogen atoms, water molecules, ions, and so on. The chemical system may contain a number of structures (also called connection tables or CTs). Residues (including water molecules and ...",t:"Input and Output Files for viparr"},"1649":{i:0.000128333032569611,u:"../desmond_command_reference/viparr_multiff.htm",a:"Multiple force fields can be specified using viparr. Common scenarios for this are outlined below. Different force fields for different parts of a chemical system In this scenario, one force field is used for one part of a chemical system (e.g., the protein) and another force field for another part ...",t:"Specifying Multiple Force Fields with viparr"},"1650":{i:0.000135087796607965,u:"../desmond_command_reference/desmond_viparr_userff.htm",a:"A force field is composed of the following files: a template file a force-field parameter file, generally for each component of the force field. Angles, proper dihedrals, van der Waals, etc. are examples of force field components a set of plugin programs that process the parameter files a rules ...",t:"User-Defined Force Fields in Viparr"},"1651":{i:0.000131992829240817,u:"../desmond_command_reference/viparr_amber_charmm.htm",a:"You can convert Amber or Charmm topology and force-field files into Desmond format, using the scripts ff_charmm_to_viparr.py and ff_amber_to_viparr.py. Tutorials for performing these conversions are available on the web, for Amber  here  and for Charmm  here .",t:"Converting Amber and Charmm Files to Desmond Format"},"1652":{i:9.87250762191959E-05,u:"../desmond_command_reference/viparr_issues.htm",a:"Two or more geometrically identical hydrogen atoms (such as in CH2 or CH3) are treated identically. If the force field needs to treat them differently, you must ensure that the residue name exactly matches the force field template name. When you import a structure into Maestro, make sure you correct ...",t:"Known Issues with Force Fields in Desmond"},"1653":{i:0.000114923097403625,u:"../desmond_command_reference/desmond_utilities.htm",a:"Desmond Utilities The Desmond distribution contains a number of utilities for performing a range of specific tasks, apart from those described previously. These utilities are described in the topics listed below.",t:"Desmond Utilities"},"1654":{i:0.000170761532984882,u:"../desmond_command_reference/desmond_utilities_solvate_pocket.htm",a:"\n            solvate_pocket The solvate_pocket utility is a tool for solvating subregions of a system with water, and in particular to solvate buried regions in a protein or protein-ligand complex. To solvate such regions in a thermodynamically consistent manner,  solvate_pocket uses a grand ...",t:"\n            solvate_pocket"},"1655":{i:0.000150093905454227,u:"../desmond_command_reference/desmond_utilities_solvate_pocket_methodology.htm",a:"In grand canonical methods, a value of the chemical potential is set and the simulation samples the number of water molecules in a manner consistent with the chemical potential and the specified temperature. In principle, even the water in buried pockets is in equilibrium with bulk water and so one ...",t:"Methodology of solvate_pocket"},"1656":{i:0.000142523339741223,u:"../desmond_command_reference/desmond_utilities_solvate_pocket_syntax.htm",a:"The syntax of the solvate_pocket command is as follows: \n$SCHRODINGER/utilities/solvate_pocket [options] [-NJOBS subjobs] -spd command-file -icms input-cms-file -ocms output-cms-file Here, command-file is the name of the command file for solvate_pocket, which has the extension .spd, and is described ...",t:"Command Syntax for solvate_pocket"},"1657":{i:0.000181962831878073,u:"../desmond_command_reference/desmond_utilities_solvate_pocket_file.htm",a:"The solvate_pocket utility uses a keyword = value syntax that is at least nominally consistent with Ark syntax. This means that you can use the same keywords in both the solvate_pocket command file and in the solvate_pocket stage of the multisim input file. Comments are lines that begin with a # ...",t:"Command File Syntax for solvate_pocket"},"1658":{i:0.000146761582822098,u:"../desmond_command_reference/desmond_utilities_manipulate_trj.htm",a:"This script can be used to generate a new trajectory from a list of input trajectories. The trajectory includes the .cms and .idx files that are needed to display the trajectory in Maestro. The command syntax is as follows: \n$SCHRODINGER/run -FROM desmond manipulate_trj.py [options] [-mode ...",t:"manipulate_trj.py"},"1659":{i:0.000165051620405496,u:"../desmond_command_reference/desmond_utilities_mold_gpcr_membrane.htm",a:"The utility mold_gpcr_membrane.py can be used to embed a GPCR in a membrane. With more GPCR X-ray structures being determined over the last few years and the inherent flexibility of GPCR structures, there is great interest in simulating them, particularly within a membrane. Properly constructing the ...",t:"mold_gpcr_membrane.py"},"1660":{i:0.000149759760310043,u:"../desmond_command_reference/desmond_utilities_trajectory_extract_frame.htm",a:"The trajectory_extract_frame.py script can be used to extract selected frames from a trajectory into a series of output structure files. To run this script, use the following command: \n$SCHRODINGER/run -FROM desmond trajectory_extract_frame.py [options] cmsfile trjdir For information on the command ...",t:"trajectory_extract_frame.py"},"1661":{i:0.000147054022224491,u:"../desmond_command_reference/desmond_utilities_desmond_restraints.htm",a:"This command-line script allows you to add or remove distance, angle and dihedral angle restraints to a CMS file for use in a Desmond simulation. The restraints can be flat-bottomed (i.e. 0 for some range around the equilibrium value) if the width parameter is specified. The syntax of the command ...",t:"desmond_restraints.py"},"1662":{i:0.000152796975173735,u:"../desmond_command_reference/desmond_utilities_rebuild_cms.htm",a:"This utility creates a full model system from either the component CTs (solute, membrane, and solvent) or a full system CT. To generate the full model system with all CTs from a set of components, run the following command: \n$SCHRODINGER/run -FROM desmond rebuild_cms.py -make_full_ct input.cms ...",t:"rebuild_cms.py"},"1663":{i:0.000117181163168121,u:"../desmond_command_reference/desmond_utilities_other.htm",a:"In addition to the utilities described above, there are some other useful scripts available with the distribution, listed below. These should be run with $SCHRODINGER/run. Use the -h option to see the usage message. trajectory_cluster.py—cluster frames from a trajectory. A graphical interface is ...",t:"Other Desmond Scripts"},"1664":{i:0.000129148707147483,u:"../desmond_command_reference/multisim.htm",a:"The multisim utility is useful for running tasks that consist of a sequence of steps, such as relaxation of a system followed by a production simulation. Maestro runs multisim for jobs that include multiple stages. This appendix provides detailed information on how to run multisim and the format of ...",t:"The multisim Utility"},"1665":{i:0.000155798415674691,u:"../desmond_command_reference/multisim_running.htm",a:"The basic usage information for multisim, including examples, is given in  \n            Running Multiple Desmond Simulations with MultiSim . This section describes more advanced multisim features such as template multisim commands, node locking, restarting multisim jobs, and obtaining information ...",t:"Running multisim"},"1666":{i:0.000139695157816029,u:"../desmond_command_reference/multisim_running_template.htm",a:"Most .msj files produced by Maestro end with a commented out example of the command needed to run the job. For example:  \n$SCHRODINGER/utilities/multisim -JOBNAME example -HOST master-job-host -SUBHOST subjob-host -maxjob 0 -cpu \"2 2 2\" -i example.cms -m example.msj -c example.cfg -o ...",t:"Template multisim Commands"},"1667":{i:0.00015973660327124,u:"../desmond_command_reference/multisim_running_nodelock.htm",a:"\n            Node locking involves requiring all subjobs to run on the same nodes (CPUs) as the master job. Node locking can be turned on by adding -mode umbrella to the command line. This feature can be useful on busy computer systems that are controlled by a queuing system, because only the master ...",t:"Node Locking multisim Jobs"},"1668":{i:0.00014674658086283,u:"../desmond_command_reference/multisim_running_restarting.htm",a:"The multisim job periodically writes out a checkpoint file, which records the current state of the workflow. The checkpoint file is named jobname-multisim_checkpoint. This file does not include data produced by subjobs. The checkpoint file is copied back to the job launch directory when the master ...",t:"Restarting multisim Jobs"},"1669":{i:0.000141734905531328,u:"../desmond_command_reference/multisim_running_information.htm",a:"To obtain information on the contents of a multisim_checkpoint file, you can use the multisim command with the -probe option: \n$SCHRODINGER/utilities/multisim -probe myjob-multisim_checkpoint \n This command summarizes the contents of the checkpoint file without submitting a job to continue the ...",t:"Obtaining Information from multisim Checkpoint Files"},"1670":{i:0.000137037474378655,u:"../desmond_command_reference/multisim_file.htm",a:"The multisim input file (.msj file) generally adheres to the Ark format from D. E. Shaw Research. This is the same syntax that is used in Desmond configuration (.cfg) files, which are described in brief in  Desmond User’s Guide . Ark format is completely compatible with the syntax used in multisim ...",t:"The multisim File Syntax"},"1671":{i:0.000167293925955522,u:"../desmond_command_reference/multisim_file_general.htm",a:"General multisim Keywords The keywords that can be used in any stage of the multisim job are listed in  Table 1 .  ◀  The multisim File Syntax Desmond Command Reference Manual Desmond-Specific Common multisim Keywords  ▶",t:"General multisim Keywords"},"1672":{i:0.000148638797434081,u:"../desmond_command_reference/multisim_file_desmond.htm",a:"The stages that run Desmond directly (minimize, replica_exchange, lambda_hopping, and simulate) accept a common set of keywords in addition to keywords specific to the Desmond task. Keywords that are supported in the front-end config file (see  The Desmond Configuration File ) can be used directly ...",t:"Desmond-Specific Common multisim Keywords"},"1673":{i:0.000243569807437682,u:"../desmond_command_reference/multisim_file_restrain.htm",a:"The restrain keyword specifies the atom sets to be restrained and parameters for the restraint. Restraints set in all stages except the system_builder stage apply only to the current stage. Restraints set in the system_builder stage are “permanent”—they are inherited by all subsequent stages. ...",t:"The restrain multisim Keyword"},"1674":{i:0.00018125472006542,u:"../desmond_command_reference/multisim_file_atom_group.htm",a:"The atom_group keyword can be used to define atoms groups within the .cms file. Atom groups can be restrained or associated with particular thermostats. The atom group is defined by the atom-level property i_ffio_grp_name. This keyword can be set to the following values: none—Remove all atom groups. ...",t:"The atom_group multisim Keyword"},"1675":{i:0.000169287548924693,u:"../desmond_command_reference/multisim_file_task.htm",a:"The .msj file should start with a task stage to specify the type of job. Although Multisim can determine the type of job based on the input structure file provided, this can lead to unpredictable behavior if the file was previously used by a different type of job. Explicitly stating the job type ...",t:"The task Stage in the multisim File"},"1676":{i:0.00014560368074644,u:"../desmond_command_reference/multisim_file_system_builder.htm",a:"Keywords for the system_builder stage are listed in  Table 1 . The keywords restrain ( The restrain multisim Keyword ) and atom_group ( The atom_group multisim Keyword ) can also be used in this stage. When they are used, the settings are persistent: they apply to all subsequent stages unless ...",t:"The system_builder Stage in the multisim File"},"1677":{i:0.000130226643906496,u:"../desmond_command_reference/multisim_file_build_geometry.htm",a:"This stage can be used to build the geometry of a simulation system from its components. It provides a greater degree of flexibility in building a system than the system_builder stage, but it only operates on the geometry, not the force field. All keywords for the system_builder stage are accepted ...",t:"The build_geometry Stage in the multisim File"},"1678":{i:0.000121162392730998,u:"../desmond_command_reference/multisim_file_assign_forcefield.htm",a:"This stage can be used to assign the force field to a model system. You can either keep or replace existing assignments. The keywords are given in  Table 1 . ◀  The build_geometry Stage in the multisim File Desmond Command Reference Manual The simulate, replica_exchange, and lambda_hopping Stages in ...",t:"The assign_forcefield Stage in the multisim File"},"1679":{i:0.000108832843200676,u:"../desmond_command_reference/multisim_file_desmond_stages.htm",a:"The keywords that are specific to the simulate, replica_exchange, and lambda_hopping stages are listed in  Table 1 . In addition, the keywords as described in  Parameters for Replica Exchange Simulations  can be used in the replica_exchange stage. The keywords restrain ( The restrain multisim ...",t:"The simulate, replica_exchange, and lambda_hopping Stages in the multisim File"},"1680":{i:9.02604667998589E-05,u:"../desmond_command_reference/multisim_file_minimize.htm",a:"The keywords that are specific to the minimize stage are described in  Parameters for Minimization in the Desmond config File . The keyword restrain ( The restrain multisim Keyword ) can also be used in this stage. When it is used, the settings are temporary: they apply only to the current stage. ",t:"The minimize Stage in the multisim File"},"1681":{i:0.00012261366481114,u:"../desmond_command_reference/multisim_file_solvate_pocket.htm",a:"The keywords for the solvate_pocket stage are listed in  Table 1 . The only keywords that can be set directly within the solvate_pocket stage are spd_file, ligand_file, fep.lambda, and backend. The other keywords in the table should be set in the backend block. This stage runs the solvate_pocket ...",t:"The solvate_pocket Stage in the multisim File"},"1682":{i:0.00013445148364968,u:"../desmond_command_reference/multisim_file_extern.htm",a:"The extern stage provides an extremely flexible way to include your own Python code in a multisim run. The code can be embedded in the .msj file as a string value assigned to the command keyword. For example: \nextern {\n        command = \"\nimport os;\ndef main( current_stage, job ):\n    os.system( ...",t:"The extern Stage in the multisim File"},"1683":{i:0.000127912376454536,u:"../desmond_command_reference/multisim_file_analysis.htm",a:"The analysis Stage in the multisim File Keywords for the analysis stage are listed in  .  ◀  The extern Stage in the multisim File Desmond Command Reference Manual The pl_analysis Stage in the multisim File  ▶",t:"The analysis Stage in the multisim File"},"1684":{i:0.000178882621145846,u:"../desmond_command_reference/multisim_file_pl_analysis.htm",a:"This stage performs an analysis of protein and ligand interactions. There is one keyword, ligand_asl, which specifies an ASL expression for the ligand. The interactions can be graphically explored in the Simulation Interactions Diagram panel—see  Analysis of Protein-Ligand Interactions from a ...",t:"The pl_analysis Stage in the multisim File"},"1685":{i:0.000215116354997056,u:"../desmond_command_reference/multisim_file_fep_analysis.htm",a:"Keywords for the fep_analysis stage are listed in  Table 1 .  The free energy can be plotted as different functions of the simulation time. The following settings are added to control these new functionalities: \n    bennett = {\n       forward_time = {\n          name  = \"freeenergy_time\"\n          ...",t:"The fep_analysis Stage in the multisim File"},"1686":{i:0.000151329063744721,u:"../desmond_command_reference/multisim_file_vrun.htm",a:"This stage runs vrun with the Desmond trajectory from the last simulate stage. The vrun stage should only be used with non-FEP simulations. For FEP simulations, you should use the fep_vrun stage, which has the same syntax. All the parameters from the simulate stage can be used with these stages, but ...",t:"The vrun and fep_vrun Stages in the multisim File"},"1687":{i:0.000104204209909903,u:"../desmond_command_reference/multisim_file_trim.htm",a:"The purpose of the trim stage is to automatically delete unwanted stage data files. A common scenario is that most of the relaxation stage files are not needed if the job is successful. Adding a properly-set trim stage at the end of the job automatically removes the these files before they are ...",t:"The trim Stage in the multisim File"},"1688":{i:0.000194794725600663,u:"../desmond_command_reference/desmond_config_file.htm",a:"The configuration file (hereafter referred to as a config file) describes the nature of the calculation that the Desmond backend should perform. Starting with the 2010 release, there are two styles of config files: a user facing, “front-end” style that is designed to make it easier for users to work ...",t:"The Desmond Configuration File"},"1689":{i:0.000214740313337953,u:"../desmond_command_reference/desmond_config_file_ark.htm",a:"Ark uses a free format syntax, in that is there are no indentation or alignment requirements. Spaces (including some control characters, e.g., tab, return, new line.) are useful only for separating keys and values. The Ark format syntax is case-sensitive, so keys and values with different ...",t:"Ark Format Syntax Summary"},"1690":{i:0.000162012537273018,u:"../desmond_command_reference/desmond_config_file_units.htm",a:"The units used in the configuration file are: time: ps\n     distance: angstroms\n     energy: kcal/mol\n     pressure: bar\n     surface tension: bar angstroms\n     temperature: kelvin\n     Time can be specified as a positive real number or as the string inf, meaning infinity, or “never”.",t:"Units in the Desmond config File"},"1691":{i:0.000187474878143414,u:"../desmond_command_reference/desmond_config_file_macros.htm",a:"A macro works as a place-holder, and is replaced by a corresponding value after macro expansion is performed (during conversion of the front-end config file into the back-end config file). The name of a macro starts with a $ character, followed by a sequence of alphanumeric characters. A macro can ...",t:"Macros in String Values in the Desmond config File"},"1692":{i:0.000142590644688628,u:"../desmond_command_reference/desmond_config_file_common.htm",a:"All currently supported parameters are listed and explained below. Each parameter is in a separate subsection. fep Common usage: \nfep = {\n   lambda   = \"default:12\"\n   i_window = ?\n   output   = {\n      name     = \"$JOBNAME$[_replica$REPLICA$].dE\"\n      first    = 0.0\n      interval = 1.2\n   }\n}\n ...",t:"Common Front-End Parameters in the Desmond config File"},"1693":{i:0.000146197375206612,u:"../desmond_command_reference/desmond_config_file_mini.htm",a:"All common parameters can be set in a config file used for a minimization job without causing errors, but understandably, not every common parameter makes sense for minimization, e.g., annealing, temperature, timestep. Such parameters, if set in the config file, are ignored in minimization ...",t:"Parameters for Minimization in the Desmond config File"},"1694":{i:0.000137049149769593,u:"../desmond_command_reference/desmond_config_file_repexch.htm",a:"All common parameters can be set in a config file used for a replica exchange simulation job without causing errors.  replica  The replica parameter sets the simulation configuration for each replica. There are two forms for setting this parameter. The first is for replica exchange calculations in ...",t:"Parameters for Replica Exchange Simulations"},"1695":{i:0.000160476065569378,u:"../desmond_command_reference/desmond_config_file_metadynamics.htm",a:"All common parameters can be set in a config file used for a replica exchange simulation job without causing errors.  \n            meta The meta block is used to set up a metadynamics simulation. The block must include a definition of the collective variables (CVs), the Gaussian potential, the time ...",t:"Parameters for Metadynamics Simulations"},"1696":{i:8.40606085588033E-05,u:"../desmond_command_reference/desmond_config_file_vrun.htm",a:"All common parameters that can be set in a config file can be used for a vrun job without causing errors.   vrun_frameset The vrun_frameset parameter is used to set the path of the MD simulation trajectory that should be analyzed. e.g., \nvrun_frameset = /home/joeuser/Desmond_files/my_study_trj\n ...",t:"Parameters for vrun"},"1697":{i:0.000106118099114176,u:"../desmond_command_reference/desmond_cl_analysis.htm",a:"This appendix documents the command line usage of two related Python scripts and the syntax of two file formats used for analysis of simulation quality. The two Python scripts are simulation_block_data.py and simulation_block_test.py, and are located in the directory  ...",t:"Analyzing a Desmond Simulation from the Command Line"},"1698":{i:0.00018624853037303,u:"../desmond_command_reference/desmond_cl_analysis_simblockdata.htm",a:"This command determines simulation properties from the input .log file and block averages from the input .ene file, and writes the results to the output .sba file. The syntax is as follows: \nsimulation_block_data.py [-n block-length] [-s simboxfile] -e enefile -l logfile -c sbafile The options are ...",t:"simulation_block_data.py"},"1699":{i:0.000142020450529675,u:"../desmond_command_reference/desmond_cl_analysis_simblocktest.htm",a:"This command evaluates the results in an input.sba file using tests specified in an .sbt file. The output file is a plain text file that prints the job details block from the .sba file and then provides information on whether block averages are within the tests specified in the .sbt file. The syntax ...",t:"simulation_block_test.py"},"1700":{i:0.000145105689755904,u:"../desmond_command_reference/desmond_cl_analysis_sba.htm",a:"The .sba file contains properties obtained from the .log file and block averages from the .ene file. It has a header block followed by the job details block and then by data blocks. The header block contains the information on the energy and log files and has the following format: \nVersion: version ...",t:"Desmond Simulation Block Analysis (.sba) File Syntax"},"1701":{i:0.000102440653360857,u:"../desmond_command_reference/desmond_cl_analysis_sbt.htm",a:"Simulation block test (.sbt) files are used to test the data in .sba files and determine the stability of the simulation. These files contain the test parameters for various properties. A sample test set is as follows: \nE { sd = 5.0 slope = 4.3 average = -435320.2 average_tol = 4000.0 }\n This block ...",t:"Simulation Block Test (.sbt) File Syntax"},"1702":{i:8.77888911487907E-05,u:"../epik_command_reference/epik_command.htm",a:"Epik has many features that can be used from the command line, supported by various parameter data files. The basics of Epik command line usage are described in the topics listed below. Details of the theory and its implementation and the data structures are given in other sections of this manual.",t:"Running Epik from the Command Line"},"1703":{i:0.000124528545182675,u:"../epik_command_reference/epik_command_syntax.htm",a:"Epik can be run using the  epik command. The syntax for this command is shown below. \nepik [options] -imae input-file -omae output-file The input and output files are required and must be specified using the -imae and -omae options respectively. Only Maestro-formatted files are supported. Input and ...",t:"The epik Command"},"1704":{i:0.00012183630588957,u:"../epik_command_reference/epik_command_examples.htm",a:"The Epik panel in Maestro is a convenient and general tool for running Epik, particularly for small batches of molecules. Epik can also be run from the command line, and thus run from user-written scripts. The default behavior of Epik is to find pKa values for the input structures. To run this ...",t:"Epik Command Line Examples"},"1705":{i:0.000120162032553634,u:"../epik_command_reference/epik_command_distributing.htm",a:"If you are running epik on many ligands, you can reduce the turnaround time by automatically distributing the calculation over multiple subjobs The epik command divides the collection of input structures into a specified number of sets, each of which is run in a single subjob. You can use either ...",t:"Distributing Epik Jobs"},"1706":{i:0.000155029256364168,u:"../epik_command_reference/epik_command_file.htm",a:"You can run Epik with a command file containing commands for the settings, rather than using command-line options. Values given on the command line override values in the command file. This file is in keyword-value format; the keywords are described in  Table 1 .  ◀  Distributing Epik Jobs Epik ...",t:"Epik Command File"},"1707":{i:9.42706938504215E-05,u:"../epik_command_reference/epik_command_utilities.htm",a:"A number of utilities that are provided with Epik, but are not part of Epik itself, might be useful in conjunction with Epik. These utilities are available in $SCHRODINGER/utilities, and include: proplister—extracts requested properties from Maestro-formatted files ligfilter—selects structures from ...",t:"Other Utilities for Use with Epik"},"1708":{i:0.00018939847600025,u:"../epik_command_reference/epik_methodology.htm",a:"The combination of two closely related linear free-energy approaches based upon the Hammett equation for aromatic molecules and the Taft equation for aliphatic molecules has been adopted for use in Epik to predict the pKa values of organic acids and bases. The methodology for pKa prediction and ...",t:"Epik Methodology"},"1709":{i:0.000177466224090372,u:"../epik_command_reference/epik_methodology_pka.htm",a:"Epik pKa Prediction Epik’s pKa prediction is based upon the Hammett and Taft equations. The implementation used largely follows that described in pKa prediction for Organic Acids and Bases (Perrin, D.D.; Dempsey, B.; Serjeant, E.P.; Chapman and Hall, London (1981)).",t:"Epik pKa Prediction"},"1710":{i:0.000209649711397815,u:"../epik_command_reference/epik_methodology_pka_overview.htm",a:"Hammett and Taft equations are intended to predict microscopic pKa values. That is, given a molecular protonation state, what are the pKa values for the first addition or removal of a proton from the various ionizable functional groups? The same pKa prediction for a functional group applies to both ...",t:"Overview of Hammett and Taft Prediction of pKa Values"},"1711":{i:0.000124179087610728,u:"../epik_command_reference/epik_methodology_pka_rho.htm",a:"Each acid_base block’s r value is intended to describe the perturbations introduced by adding substituents to specific atoms, enumerated within the block using the subs_atoms designator. The r value from the primary match is first used for substituents attached to atoms explicitly listed in the ...",t:"r Values"},"1712":{i:0.000192068488704348,u:"../epik_command_reference/epik_methodology_pka_sigma.htm",a:"In addition to the s values for heteroaromatic atoms and topological patterns for rings mentioned earlier, s terms come from substituents. The perturbing influence of a substituent depends on whether it is connected to an aliphatic portion or an aromatic portion of the acid_base pattern in use.  ...",t:"s Values for Substituents"},"1713":{i:0.000115418861591187,u:"../epik_command_reference/epik_methodology_pka_charge.htm",a:"In cases where multiple mesomeric representations can reasonably be used, the molecule is typically best represented as a combination of the various mesomeric forms. An individual mesomeric form frequently provides an inaccurate description. In addition, the effective weighting of the different ...",t:"Charge Spreading"},"1714":{i:0.000126498949112347,u:"../epik_command_reference/epik_methodology_tautomerization.htm",a:"Tautomers are an important class of isomers that can interconvert under physiological conditions. Tautomeric forms have different chemical properties and interact differently. For instance, one tautomeric form may interact with the active site of a protein more strongly than the other forms. ...",t:"Tautomerization in Epik"},"1715":{i:0.000114594925047901,u:"../epik_command_reference/epik_methodology_tautomerization_matching.htm",a:"The current structure is examined for all matches of all tautomeric patterns in the tautomer database. All matches are cross-examined to see if the atoms are completely contained within another match. If so, the match containing the smaller number of atoms is eliminated. If they are the same size, ...",t:"Tautomer Pattern Matching"},"1716":{i:0.000124169919013367,u:"../epik_command_reference/epik_methodology_tautomerization_structures.htm",a:"For each match, all tautomers in the tautomer set should be considered. Structures in which more than one match has been found have multiple locations in the structure that can be tautomerized, and all combinations of tautomers that are compatible should be considered. Double bonds that can shift to ...",t:"Structure Generation"},"1717":{i:0.000107199707110066,u:"../epik_command_reference/epik_methodology_standard.htm",a:"Epik comes with an extensive set of pKa parameters built into the program. In addition, the parameter files pKa_water_HT_data and pKa_DMSO_HT_data in $SCHRODINGER/mmshare-vversion/data/mmpKa may be used to update the parameter sets without needing to update the executable itself. The tautomer ...",t:"Standard Epik Parameters"},"1718":{i:9.16999585605137E-05,u:"../epik_command_reference/epik_methodology_custom.htm",a:"You can use custom parameter files to add to or override the standard parameters in Epik. The process is somewhat involved and the interaction between various data structures can be complex. You should be aware that, due mainly to the complex hierarchy involved in matching suitable patterns, changes ...",t:"Custom Epik Parameters"},"1719":{i:0.000157174971100329,u:"../epik_command_reference/epik_struct_adjust.htm",a:"In addition to estimating the pKa values for a given structure, Epik can adjust structures to attempt to generate a collection of structures consistent with the pH, while eliminating minimally contributing structural variations. The adjustment process involves both tautomerization and ionization. In ...",t:"Structural Adjustment in Epik"},"1720":{i:0.000186169833746819,u:"../epik_command_reference/epik_struct_adjust_penalties.htm",a:"Tautomerization methodology and the estimation of tautomer populations are described in  \n            The tautomerizer Utility\n . pKa values are estimated using the methods described in  Running Epik from Maestro . pKa penalties for each structure are estimated using the methods described in  \n      ...",t:"Penalties and Populations for Ionization State and Tautomeric Forms"},"1721":{i:0.000125057591225193,u:"../epik_command_reference/epik_struct_adjust_variations.htm",a:"The process for generating collections of tautomeric and ionic structural variations on the input structure is iterative, with each iteration involving a tautomeric stage and an ionization stage. In describing the procedure for adjusting the structures generated from a single input structure, it is ...",t:"Creating Structural Variations and Estimating Populations"},"1722":{i:9.67600018751391E-05,u:"../epik_command_reference/epik_struct_adjust_metals.htm",a:"In protein binding sites that contain metal atoms, a drug-like molecule will often bind such that the metal replaces one of its protons that would normally have a high pKa value. The high pKa values mean that such deprotonated states have low populations in bulk solution and thus Epik’s procedure to ...",t:"Structural Adjustment for Metal Binding"},"1723":{i:0.00011815101714894,u:"../epik_command_reference/sequential_pka.htm",a:"Epik’s sequential pKa estimation capability allows you to calculate the microscopic pKa values at which protons may be successively added or removed from a molecule. This can be useful for predicting or comparing with experimental pKa values. Some types of experiments such as titrations measure ...",t:"Sequential pKa Estimation"},"1724":{i:8.64335734654294E-05,u:"../epik_command_reference/sequential_pka_script.htm",a:"The compare_epik_results.py script can be used to compare the results of an Epik sequential pKa calculation with a standard set of pKa values. The sequential pKa calculation can be run using the command: \n$SCHRODINGER/epik -ph 7.0 -scan -imae input.mae -omae epik-output.mae \n where input.mae is a ...",t:"The compare_epik_results.py Script"},"1725":{i:0.000184444367968976,u:"../epik_command_reference/epik_pKa_data_file.htm",a:"This topic describes the encoding of pKa information in a solvent parameter file for Epik. The default parameter files for water and DMSO are not user-accessible. You may use your own parameter files to add to, or replace, the default parameter sets for these solvents or to describe new solvents.",t:"Epik pKa Data File Format"},"1726":{i:0.000179646992173302,u:"../epik_command_reference/epik_pKa_data_file_basic.htm",a:"The solvent parameter file has three basic elements: comment line\n     information lines\n     data blocks\n     Any line beginning with a # symbol is regarded as a comment. Information is provided by lines containing name: value pairs. name: Hammett_Taft_water\n        \nshort_name: H20\n Only one name: ...",t:"Basic Elements of the pKa Data File"},"1727":{i:0.000140917978251428,u:"../epik_command_reference/epik_pKa_data_file_smarts.htm",a:"The SMARTS patterns in these blocks have some restrictions placed on them. Patterns must show the acidic form. The conjugate base form is generated automatically from the acidic SMARTS pattern. The first atom must be the acidic hydrogen and be represented as: [#1]. The second atom in the pattern ...",t:"Notes about SMARTS patterns for acid_base and special_sigma blocks"},"1728":{i:0.000101254138708595,u:"../epik_command_reference/epik_pKa_data_file_groups.htm",a:"The parameter file must contain at least one acid_base group. Multiple groups may match for a particular ionizable location. One is selected based upon its priority, size, proximity of substitution locations to base atom, and extent of unsaturation between substitution locations and the base atom. ...",t:"Notes about acid_base groups"},"1729":{i:0.000133212827971067,u:"../epik_command_reference/epik_taut_db_form.htm",a:"The default tautomer database is not accessible to users. However, you can provide your own file to either completely override or add patterns to the default tautomer collection. At the top level of the tautomer database file the following four items can be present: name, clear_standard, group_def, ...",t:"Epik Tautomer Database Format"},"1730":{i:9.69983983045256E-05,u:"../epik_command_reference/epik_properties.htm",a:"This topic lists most of the properties generated by Epik. Epik can generate a number of structure-level and atom-level properties, depending on the options that are used, particularly the mode. The mode can be one of the following:  Query (Q)—predict pKa values for the input structure (run without ...",t:"Epik Properties"},"1731":{i:0.000106523442550641,u:"../epik_command_reference/epik_compare_results.htm",a:"The compare_epik_results.py script can be used to compare the results of an Epik sequential pKa calculation with a standard set of pKa values. The sequential pKa calculation can be run using the command: \n$SCHRODINGER/epik -ph 7.0 -scan -imae input.mae -omae epik-output.mae \n where input.mae is a ...",t:"The compare_epik_results.py Script"},"1732":{i:6.13254596701412E-05,u:"../fep_command_reference/fep_mapper_commandline.htm",a:"The first step is to write out the input files. You can do this by setting up the job in the FEP Mapper panel first (see  Setting Up and Running an FEP Mapper Job ), and then do the following: Click the arrow next to the Settings button. Choose Write from the menu. The files are written into the ...",t:"Running FEP Mapper Jobs from the Command Line"},"1733":{i:8.73896710462275E-05,u:"../fep_command_reference/fep_mapper_files.htm",a:"FEP Mapper Input and Output Files and Directories  The input files and directories are listed below: The output files and directories are listed below.:",t:"FEP Mapper Input and Output Files and Directories "},"1734":{i:6.13254596701412E-05,u:"../fep_command_reference/fep_mapper_troubleshooting.htm",a:" FEP jobs may fail due to various technical reasons. If you see the following commonly occurring technical failures, please follow the suggestions to debug.  To get technical support, create a postmortem and file a support request at  http://www.schrodinger.com/supportcenter . See  Knowledge Base ...",t:"Troubleshooting FEP Mapper Jobs "},"1735":{i:8.94770424760787E-05,u:"../field_based_qsar_command_reference/fqsar_command_line.htm",a:"The field-based QSAR models can be built and tested from the command line with the utility phase_fqsar. The command syntax is  \nphase_fqsar inFile outFile actProp {-build|-test} [options]\n On Linux and Mac hosts, you should open a terminal window, set the SCHRODINGER environment variable and prefix ...",t:"Running Field-Based QSAR from the Command Line"},"1736":{i:9.93546599039973E-05,u:"../field_based_qsar_command_reference/fqsar_command_line_qm_fields.htm",a:"Quantum mechanical electrostatic fields can be generated with Jaguar, using the script jag_qsar.py. This script runs both phase_fqsar and Jaguar to generate the input, run the Jaguar jobs, and build the model. The command syntax is: \nrun -FROM phase jag_qsar.py [options] inFile actProp \u0027\"buildOpt\"\u0027 ...",t:"Using QM Electrostatic Fields for Field-Based QSAR"},"1737":{i:9.37711422917075E-05,u:"../general_utilities/general_utilities.htm",a:"This document describes the general utilities that are available in the utilities directory of the installation. Utilities that are part of a specific product are described with that product. Utilities are intended to run in a Unix shell, and the syntax and descriptions are given on this basis. The ...",t:"General Utilities"},"1738":{i:0.000152678804479331,u:"../general_utilities/general_utilities_structure.htm",a:"This section describes the general utilities available for conversion between various file formats for molecular structures. These utilities are used by Maestro for structure conversion when importing or exporting structures. Canvas also has a structure conversion utility,  canvasConvert, for ...",t:"Utilities for Structure Format Conversion"},"1739":{i:0.000166244549339456,u:"../general_utilities/general_utilities_structconvert.htm",a:"\n            Conversion Between Various Formats: structconvert\n This utility converts between Maestro, MDL SD, PDB, Sybyl Mol2, SMILES, and MacroModel format files. The entire contents of the file are converted, with the exception that only the first structure is written when writing to PDB format. ...",t:"\n            Conversion Between Various Formats: structconvert\n"},"1740":{i:0.000165617889963546,u:"../general_utilities/general_utilities_structcat.htm",a:"\n            Merging Files with Format Conversion: structcat\n This utility merges several files of the same type and writes them out to a single file, with format conversion if the file type is different. If the output file type is PDB, multi-structure input files are split into separate PDB files, ...",t:"\n            Merging Files with Format Conversion: structcat\n"},"1741":{i:0.00026585045954492,u:"../general_utilities/general_utilities_pdbconvert.htm",a:"\n This section describes the command-line utility version of the program that converts files between PDB, MacroModel, and Maestro formats. For information on PDB conversion within the Maestro GUI, see  PDB Conversion and Converters . The syntax of the command is: pdbconvert [options] -ifmtinputfile ...",t:"Conversion To and From PDB Format: pdbconvert \n"},"1742":{i:0.000187186558653511,u:"../general_utilities/general_utilities_pdbconvert_behavior.htm",a:"Three sets of criteria are used for the placement of bonds in the conversion from PDB: a set of standard residue templates, the CONECT records of the PDB file, and geometry. Nonstandard PDB conventions are also interpreted to assist in bond placement. Bonds to metals are converted to zero-order ...",t:"Conversion Behavior for Importing PDB Files"},"1743":{i:0.000139223132018732,u:"../general_utilities/general_utilities_pdbconvert_errors.htm",a:"When running pdbconvert from UNIX, you will receive numerical messages (2, 1, 0) indicating the status of an attempted PDB conversion. These messages are equivalent to Maestro’s dialog box warnings. The message numbers are defined as follows:  ◀  Conversion Behavior for Importing PDB Files General ...",t:"Conversion Error Codes for pdbconvert"},"1744":{i:0.000134530402643449,u:"../general_utilities/general_utilities_pdbconvert_templates.htm",a:"The pdbconvert program obtains connectivity and bond order information for standard residues from a standard residue template file. Version 2 (unremediated) and Version 3 (remediated) PDB formats are both supported, in files at the following locations: ...",t:"Using Templates for Importing Nonstandard Residues"},"1745":{i:0.000153940803811023,u:"../general_utilities/general_utilities_pdbconvert_correcting.htm",a:"Specific errors in standard PDB structures, such as missing bonds, extraneous bonds or incorrect bond orders, can be corrected by using the errata initialization file, which is read by pdbconvert. This file is named mmpdb_errata.ini, and is stored in $SCHRODINGER/mmshare-vversion/data/mmpdb. The ...",t:"Correcting Specific Errors in PDB Structures"},"1746":{i:0.000192331439961222,u:"../general_utilities/general_utilities_sdconvert.htm",a:"\n            Conversion To and From SD Format: sdconvert Convert between MDL SD, Maestro, and MacroModel format files. The syntax is: sdconvert [options] -ifmtinputfile -ofmtoutputfile where fmt is one of sd, mae (Maestro) or mm (MacroModel). Either the input or output file must be an SD file. If ...",t:"\n            Conversion To and From SD Format: sdconvert"},"1747":{i:0.000158498615850499,u:"../general_utilities/general_utilities_mol2convert.htm",a:"\n            Conversion To and From Mol2 Format: mol2convert \n Convert structure files between Maestro and Sybyl Mol2 format. The syntax is: \nmol2convert [-n structrange] {-imae|-imol2} inputfile      {-omae|-omol2} outputfile The input and output files must be specified.  Example: mol2convert -imae ...",t:"\n            Conversion To and From Mol2 Format: mol2convert \n"},"1748":{i:0.000148174016748364,u:"../general_utilities/general_utilities_uniquesmiles.htm",a:"\n            Conversion To and From SMILES: uniquesmiles\n This utility generates Unique SMILES strings for the input structures, and can remove repeated strings from the output.  You can specify either a Maestro file (.mae) or a SMILES file (.smi) or both as the output files. If you specify a ...",t:"\n            Conversion To and From SMILES: uniquesmiles\n"},"1749":{i:0.000145568767056133,u:"../general_utilities/general_utilities_extractfilter.htm",a:"This section describes utilities for extracting a subset of structures from a structure file or a database. The first two utilities, maesubset and sdsubset, extract structures by index or title. The third utility, getpdb, extracts a structure or a chain from the PDB database.The fourth utility, ...",t:"Structure Extraction and Filtering Utilities"},"1750":{i:0.000149140161592853,u:"../general_utilities/general_utilities_maesubset.htm",a:"\n            Extracting Structures from a Maestro File: maesubset This utility extracts a subset of structures from a Maestro format input file, by index or by title. The syntax is: maesubset {-n range|-range_file file} full-file \u003e subset-filemaesubset -t {title|titlefile} full-file \u003e ...",t:"\n            Extracting Structures from a Maestro File: maesubset"},"1751":{i:0.000161907563413255,u:"../general_utilities/general_utilities_sdsubset.htm",a:"\n            Extracting Structures from an SD File: sdsubset \n This utility extracts a subset of structures from an SD format input file. The input and output files can be compressed (.sdf.gz or .sdfgz) or uncompressed format (.sdf). If you provide both a list of structure indices or ranges and a ...",t:"\n            Extracting Structures from an SD File: sdsubset \n"},"1752":{i:0.00027119176740157,u:"../general_utilities/general_utilities_getpdb.htm",a:"\n            Extracting Proteins from the PDB: getpdb The getpdb utility extracts entire proteins or single chains from the PDB database, either as installed locally, or from the RCSB web site. The syntax is: \n$SCHRODINGER/utilities/getpdb [options] id1 [id2 ...] \n The id is in the form ...",t:"\n            Extracting Proteins from the PDB: getpdb"},"1753":{i:0.000415223708970388,u:"../general_utilities/general_utilities_ligfilter.htm",a:"\n            Filtering Structures by Property: ligfilter The ligfilter utility filters a structure file based on properties and descriptors. Despite the name, ligfilter can be used to filter protein structures as well as ligand structures. It can filter on any Maestro property, a set of predefined ...",t:"\n            Filtering Structures by Property: ligfilter"},"1754":{i:0.000195451493453334,u:"../general_utilities/general_utilities_merge_duplicates.htm",a:"\n            Removing Duplicate Structures: merge_duplicates\n This script merges structures from the specified structure files. It removes duplicates based on the unique SMILES string. Before generating the SMILES, structures can be optionally desalted and neutralized. Properties for duplicate ...",t:"\n            Removing Duplicate Structures: merge_duplicates\n"},"1755":{i:0.000159497491489163,u:"../general_utilities/general_utilities_property.htm",a:"Property Utilities This section lists utilities that operate only on the properties in a structure file. ",t:"Property Utilities"},"1756":{i:0.000151017991703131,u:"../general_utilities/general_utilities_proplister.htm",a:"\n            Listing of Properties:proplister \n This utility lists properties in Maestro, SD, Mol2, or PDB files. The syntax is: proplister [options]input-files",t:"\n            Listing of Properties:proplister \n"},"1757":{i:0.000154605591000037,u:"../general_utilities/general_utilities_maestro.htm",a:"Utilities for Maestro Files This section lists various utilities that require a Maestro file as input.",t:"Utilities for Maestro Files"},"1758":{i:0.000169758194866483,u:"../general_utilities/general_utilities_ring_conf.htm",a:"\n            Ring Conformations: ring_conf It can be difficult, or at least computationally demanding, to find low-energy conformations for the flexible ring systems within a structure. The ring_conf tool attempts to do so by identifying ring systems in the structure, then seeking suitable ring ...",t:"\n            The ring_conf Utility"},"1759":{i:0.000138189008485625,u:"../general_utilities/general_utilities_maevalidate.htm",a:"\n            Validating Maestro Format: maevalidate \n This utility validates the format of a Maestro file, detecting structure blocks that have incorrect syntax. The return code is nonzero if the file has incorrect syntax. The utility can be used to filter out badly formed structure blocks. The ...",t:"\n            Validating Maestro Format: maevalidate \n"},"1760":{i:0.000141509461049306,u:"../general_utilities/general_utilities_unique_names.htm",a:"\n            Assigning Unique Names: unique_names \n This program takes files in Maestro format and adjusts the numeric suffixes for structure titles and entry names to make them unique. This is useful for post-processing output from programs, such as LigPrep and MacroModel, that produce structures ...",t:"\n            Assigning Unique Names: unique_names \n"},"1761":{i:0.000142358118700253,u:"../general_utilities/general_utilities_ligand_interaction_diagram.htm",a:"\n            Protein-Ligand Interactions: ligand_interaction_diagram\n This program reads a Maestro file containing a protein receptor and a ligand, and generates a diagram of the interactions between the two, as an image file. The syntax of the command is: \nligand_interaction_diagram -i infile -o ...",t:"\n            Protein-Ligand Interactions: ligand_interaction_diagram\n"},"1762":{i:0.000142032873457142,u:"../general_utilities/general_utilities_maeproj.htm",a:"Utilities for Maestro Projects This section describes utilities for Maestro project management. ",t:"Utilities for Maestro Projects"},"1763":{i:0.000142477878407177,u:"../general_utilities/general_utilities_project_convert.htm",a:"\n            Converting a Maestro Project to the Current Version: project_convert \n            \n This utility converts a project to the current version. This utility is run automatically from Maestro, under Job Control, when you open a project from a previous release. The syntax is:  ...",t:"\n            Converting a Maestro Project to the Current Version: project_convert \n            \n"},"1764":{i:0.000141932154339795,u:"../general_utilities/general_utilities_project_create.htm",a:"\n            Creating a Maestro Project from Files: project_create This utility creates a project using specified structure files. The syntax is: \n$SCHRODINGER/run project_create structure-file [-t type] project.prj \n$SCHRODINGER/run project_create -f file-list [-t type] project.prj\n$SCHRODINGER/run ...",t:"\n            Creating a Maestro Project from Files: project_create"},"1765":{i:0.000142002668410588,u:"../general_utilities/general_utilities_project_append.htm",a:"\n            Appending Structures to a Maestro Project: project_append This utility appends the structures in the specified structure files to a project. The syntax is: \n$SCHRODINGER/run project_append structure-file [-t type] project.prj \n$SCHRODINGER/run project_append -f file-list [-t type] ...",t:"\n            Appending Structures to a Maestro Project: project_append"},"1766":{i:0.000142797263027343,u:"../general_utilities/general_utilities_project_extract.htm",a:"\n            Extracting Data from a Corrupted Maestro Project: project_extract This utility extracts usable data from a corrupted Maestro project. The syntax is: \nproject_extract -i corrupted-project.prj  -o new-project.prj [-e data-types]\n where -i and -o specify the path to the corrupted project ...",t:"\n            Extracting Data from a Corrupted Maestro Project: project_extract"},"1767":{i:0.000143089579039746,u:"../general_utilities/general_utilities_project_version.htm",a:"\n            Reporting the Maestro and Release Version of a Project: project_version\n This utility lists the Maestro version and release that could have produced a project. The syntax is: \nproject_version project1 [project2 ...]\n Each project is listed with the Maestro version and the release name ...",t:"\n            Reporting the Maestro and Release Version of a Project: project_version\n"},"1768":{i:0.000143326703906883,u:"../general_utilities/general_utilities_general.htm",a:"General-Purpose Utilities This section describes utilities that are for general use, and are not specific to Schrödinger software. ",t:"General-Purpose Utilities"},"1769":{i:0.000146312952858626,u:"../general_utilities/general_utilities_ziputil.htm",a:"\n            Creating and Extracting Zip Archives: ziputil\n This utility can be used to create and extract zip archives with compression. It is particularly useful when built-in utilities are not capable of handling large archives, such as those that exceed the 4GB limit for normal zip format.  The ...",t:"\n            Creating and Extracting Zip Archives: ziputil\n"},"1770":{i:0.000102782716220249,u:"../general_utilities/general_utilities_winunix.htm",a:"A subset of Unix commands is available on Windows in the Schrodinger Command Prompt window. These commands are in the default path in this window, so they can be used just as they are on Unix. The supported commands are:   The options and behavior are in most cases like their Unix or Linux ...",t:"Unix Utilities for Windows"},"1771":{i:0.000109772153116194,u:"../glide_command_reference/glide_command.htm",a:"This manual contains information on running Glide from the command line. Although you will usually set up Glide jobs using the controls and settings in the Maestro GUI, you sometimes might want to submit jobs from the command line for the following reasons: The command-line scripts can run all ...",t:"Running Glide from the Command Line"},"1772":{i:0.000227972214121311,u:"../glide_command_reference/glide_command_glide.htm",a:"The glide command is used for both receptor grid generation and ligand docking jobs. For ligand docking, it can run both single processor and distributed docking jobs. The syntax of the command is as follows: \nglide [options] input-file For a description of the command options, run the command glide ...",t:"The glide Command"},"1773":{i:0.000177270562031383,u:"../glide_command_reference/glide_command_files.htm",a:"Location of Files and Working Directory For Glide jobs, Maestro normally writes input files to a subdirectory of the directory from which you launched Maestro (the Maestro working directory). This subdirectory (folder) is named with the job name. The output files are also written to this ...",t:"Glide Job Files and Directories"},"1774":{i:0.00014035222293853,u:"../glide_command_reference/glide_command_restart.htm",a:"The Job Control facility can automatically restart failed Glide subjobs that were run with the glide command. The number of times a failed subjob is retried is set by the SCHRODINGER_MAX_RETRIES environment variable, whose default is 3. This environment variable is described in  Job Control ...",t:"Restarting Glide Docking Jobs"},"1775":{i:0.000145950442776699,u:"../glide_command_reference/glide_command_utilities.htm",a:"Glide Utilities Glide has three command-line utilities, kept in the utilities subdirectory of the installation: glide_sort, glide_merge, and glide_rescore. These utilities are described in the following topics:",t:"Glide Utilities"},"1776":{i:0.000193396907275877,u:"../glide_command_reference/glide_command_utilities_sort.htm",a:"\n            \n            glide_sort Re-ranks Glide poses by custom criteria or combines job outputs into one file. The “best” pose is defined by the property used for sorting. If you set any of the custom scoring function terms, sorting is done only on this custom function instead of the standard ...",t:"\n            \n            glide_sort"},"1777":{i:0.000145111583505443,u:"../glide_command_reference/glide_command_utilities_merge.htm",a:"\n            glide_merge\n This utility merges results from a list of pose files (such as from glide subjobs) into a single pose file, sorted by the docking score or a specified property. The pose files must be already sorted by the docking score or the specified property. The syntax of the command ...",t:"\n            glide_merge\n"},"1778":{i:0.000133149945777941,u:"../glide_command_reference/glide_command_utilities_rescore.htm",a:"\n            \n            glide_rescore This utility replaces the docking score properties in Glide pose output files with different values, so that the glide_sort “best-by-title” option can be used to combine different screens. See  \n            \n            glide_sort . The syntax of the command ...",t:"\n            \n            glide_rescore"},"1779":{i:0.000176554544502534,u:"../glide_command_reference/glide_command_customize_torcontrol.htm",a:"The mechanism for controlling rotations about amide bonds in earlier Glide releases has been generalized to allow control of any class of torsions—for example, around ester linkages. The torsions and the type of control applied are defined in a resource file, torcontrol.txt, which is included in the ...",t:"Customizing Torsional Controls for Docking Planar and Other Groups"},"1780":{i:9.13411562538046E-05,u:"../glide_command_reference/glide_command_logmsg.htm",a:"When a ligand is docked, its fate is reported in messages in the log file. These messages are described below. DOCKING RESULTS FOR LIGAND n—Docking succeeded and at least one pose was written to the _raw.mae file. NO POSES STORED—Nothing was written to the _raw.mae file for this ligand. This usually ...",t:"Glide Docking Log Messages"},"1781":{i:0.000165597015272742,u:"../inducedfit_command_reference/ifd_command.htm",a:"If you simply want to run the standard Induced Fit Docking protocol, the Induced Fit Docking panel in Maestro provides the easiest means of running the calculations, with a range of options. If you want to set up options that are not available from Maestro, customize the steps in the protocol, add ...",t:"Running Induced Fit Docking from the Command Line"},"1782":{i:0.000204489358411279,u:"../inducedfit_command_reference/ifd_command_syntax.htm",a:"You can use the ifd command to launch an Induced Fit Docking job from the command line: \nifd [options] jobname.inp\n The job settings are specified on the command line. You can include them in the input file, but the options specified on the command line take precedence. You must run this script in ...",t:"The ifd Command"},"1783":{i:0.00021999999291519,u:"../inducedfit_command_reference/ifd_command_infile.htm",a:"The input file for the ifd command defines the stages of the protocol and the order in which they are executed in addition to defining the input settings for each stage. This means that you can define your own protocol with the available stages. You can specify any stage multiple times, and the ...",t:"The ifd Input File"},"1784":{i:0.00032217185223849,u:"../inducedfit_command_reference/ifd_command_infile_common.htm",a:"This section contains settings that affect the whole job or several stages. The global settings consist of host settings and receptor input file definitions. The global keywords are given in  Table 1 . Note that there is no benefit in specifying more CPUs than the number of poses.  Keywords that are ...",t:"Global and Common IFD Settings"},"1785":{i:0.000155802825597126,u:"../inducedfit_command_reference/ifd_command_infile_pprep.htm",a:"The PPREP Stage of the IFD Input The PPREP stage has one setting, RMSD value, which specifies the convergence threshold for the constrained minimization of the Glide protein preparation. The minimization ends when the RMSD is less than or equal to value. ",t:"The PPREP Stage of the IFD Input"},"1786":{i:0.000153003421030914,u:"../inducedfit_command_reference/ifd_command_infile_trim_sidechains.htm",a:"This stage specifies the residues whose side chains should be temporarily removed by mutating the residues to alanine in the standard protocol. The next Glide docking step uses the mutated residues. The original residue types are retained, and used to restore the original side chains later in the ...",t:"The TRIM_SIDECHAINS Stage of the IFD Input"},"1787":{i:0.000126579343838665,u:"../inducedfit_command_reference/ifd_command_infile_glide_docking.htm",a:"This stage performs the Glide grid generation and ligand docking in the standard protocol. It is superseded by the  GLIDE_DOCKING2 stage, which can be used for both the standard and the extended protocol - see  The GLIDE_DOCKING2 Stage of the IFD Input . Settings for Glide are made in this stage. If ...",t:"The GLIDE_DOCKING Stage of the IFD Input"},"1788":{i:0.000104245490474975,u:"../inducedfit_command_reference/ifd_command_infile_glide_docking2.htm",a:"This stage performs both grid generation and ligand docking. It can be used with either protocol, and supersedes the GLIDE_DOCKING stage. The keywords in   apply to this stage. You can add Glide keywords to this stage, prefixed with GRIDGEN_ or DOCKING_. As this stage performs both grid generation ...",t:"The GLIDE_DOCKING2 Stage of the IFD Input"},"1789":{i:0.000100704395886683,u:"../inducedfit_command_reference/ifd_command_infile_vdw_scaling.htm",a:"This stage estimates the flexibility of side chains within the binding site for the extended protocol, and sets the atom-level property r_glide_atom_vdwscale for each atom on those side chains to a value related to its potential range of motion. Atoms that are more mobile are scaled to lower values. ...",t:"The VDW_SCALING Stage of the IFD Input"},"1790":{i:0.000101908650971178,u:"../inducedfit_command_reference/ifd_command_infile_predict_flexibility.htm",a:"This stage uses a variety of measures—solvent accessible surface area, B-factors, presence of salt bridges—to derive a list of residues whose side chains should be completely ignored during the INITIAL_DOCKING stage, for the extended protocol. This is an automated version of the standard protocol\u0027s ...",t:"The PREDICT_FLEXIBILITY Stage of the IFD Input"},"1791":{i:0.000112834425309404,u:"../inducedfit_command_reference/ifd_command_infile_initial_docking.htm",a:"Perform the initial docking for the extended sampling stage. This involves 7 different docking protocols using combinations of the vdw scaling and alanine mutation from the above two stages, plus specific Glide settings to generate 20,000+ initial poses which are then filtered and clustered down to ...",t:"The INITIAL_DOCKING Stage of the IFD Input"},"1792":{i:0.000105357429511879,u:"../inducedfit_command_reference/ifd_command_infile_compile_residue_list.htm",a:"\n            The list of residues for Prime refinement is compiled in this section. The initial list includes all residues within a prescribed distance of the ligand (whose identity can be specified in terms of a set of residues). To this list, specified residues that lie outside this cutoff can be ...",t:"The COMPILE_RESIDUE_LIST Stage of the IFD Input"},"1793":{i:0.000116933019492147,u:"../inducedfit_command_reference/ifd_command_infile_prime_refine_mini.htm",a:"These stages perform a Prime refinement or a Prime minimization. In Prime refinement, the side chains of the residue list compiled previously are optimized, then the residues are minimized along with the ligand. There are two stage settings: NUMBER_OF_PASSES n, and USE_MEMBRANE {true|false} ...",t:"The PRIME_REFINEMENT and PRIME_MINIMIZATION Stages of the IFD Input"},"1794":{i:0.000121194902701714,u:"../inducedfit_command_reference/ifd_command_infile_prime_energy_sidechain.htm",a:"These stages perform a Prime energy calculation or a Prime side-chain prediction. The energy calculation is done on the entire complex. The side-chain prediction is run on the previously compiled residue list. These stages do not have any specific settings, but you can add keywords for the prime ...",t:"The PRIME_ENERGY and PRIME_SIDECHAIN Stages of the IFD Input"},"1795":{i:0.000123594698505453,u:"../inducedfit_command_reference/ifd_command_infile_prime_loop.htm",a:"This stage performs a Prime loop prediction. If the receptor has a particularly flexible loop that might preclude ligand binding even with a softened potential, you could consider doing a loop prediction before the initial Glide docking. If there are more subtle loop movements associated with ligand ...",t:"The PRIME_LOOP Stage of the IFD Input"},"1796":{i:0.000171822843878183,u:"../inducedfit_command_reference/ifd_command_infile_prime_helix.htm",a:"This stage performs a rigid-body refinement of a region containing a helix. The keywords specific to this stage are defined in  Table 1 . Other keywords are passed on to the prime executable.  ◀  The PRIME_LOOP Stage of the IFD Input Induced Fit Docking Command Reference Manual The SORT_AND_FILTER ...",t:"The PRIME_HELIX Stage of the IFD Input"},"1797":{i:0.000137510104571209,u:"../inducedfit_command_reference/ifd_command_infile_sort_filter.htm",a:"The sorting and filtering stage first groups all structures by the ligand contained within each structure. The poses for a particular ligand are then sorted by the property specified by POSE_FILTER.  POSE_KEEP can then be used to keep the best poses, defined as those that have the smallest (most ...",t:"The SORT_AND_FILTER Stage of the IFD Input"},"1798":{i:0.000140006643980172,u:"../inducedfit_command_reference/ifd_command_infile_scoring.htm",a:"In this stage you can define the scoring function in terms of Maestro properties that are available in the output file from each stage. The default scoring function when you run the standard protocol of Induced Fit Docking from Maestro is a two-term function that adds 0.05 of the Prime energy to the ...",t:"SCORING Settings in the IFD Input"},"1799":{i:0.00014017472901168,u:"../inducedfit_command_reference/ifd_command_infile_sample.htm",a:"A sample input file for the standard protocol is given below. This file was generated for the tutorial example by clicking Write in the Induced Fit Docking panel. The comments are generated when the file is written.  \n# Global Variables\n#  These variables affect the entire job, and must all appear\n# ...",t:"Sample IFD Input File"},"1800":{i:0.000138271285533686,u:"../inducedfit_command_reference/ifd_command_files.htm",a:"An Induced Fit docking run requires an input file, as described in the previous section, a file of ligands in Maestro format, and one or more receptor files, also in Maestro format. The structure files can be compressed (.maegz, .mae.gz) or uncompressed (.mae). As the induced fit docking job ...",t:"Induced Fit Docking Files"},"1801":{i:0.000175180012480452,u:"../inducedfit_command_reference/ifd_command_files_intermediate.htm",a:"The names of the intermediate files start with jobname, and each stage in the protocol appends a descriptive suffix to the names of the files that pass through it.  The input ligand file is named jobname_lig.maegz and each input receptor is written to a file named jobname_rec-N.maegz, where N is an ...",t:"Intermediate IFD Files"},"1802":{i:0.000176216712896679,u:"../inducedfit_command_reference/ifd_command_files_final.htm",a:"The final Maestro output file is copied to the launch directory with the name jobname-out.maegz. The score is present as a Maestro property in these files. The scoring stage generates a comma-separated-values file in the jobname_workdir directory, named report.csv by default.  The files produced by ...",t:"Final IFD Output Files"},"1803":{i:0.00014193028156869,u:"../inducedfit_command_reference/ifd_command_pregenerated.htm",a:"It can be useful to run a separate Glide job instead of running the initial docking through IFD—for example, if you want to use options not available through IFD, such as addition of metal, hydrophobic, or positional constraints. To use the results of a separate Glide run, follow the procedure ...",t:"Running Induced Fit Docking from Pregenerated Glide Results"},"1804":{i:0.000101540967518493,u:"../inducedfit_command_reference/ifd_command_restarting.htm",a:"If an IFD job fails for some reason, you can restart it from the last completed stage with the following command: \nifd -RESTART [options] jobname.inp\n The file jobname.restart must be in the same directory as the input file. This file is generated during the failed run, and contains information on ...",t:"Restarting IFD Jobs"},"1805":{i:6.13254596701412E-05,u:"../jaguar_command_reference/jaguar_ref_intro.htm",a:"The Jaguar Command Reference Manual is intended to help you set up Jaguar input files and run Jaguar jobs from the command line. It also contains an outline of some of the theory behind Jaguar calculations. The Jaguar Input File  describes the Jaguar input file in detail. Details of how to set up ...",t:"Jaguar Command Reference Overview"},"1806":{i:0.000432374675212683,u:"../jaguar_command_reference/jaguar_input.htm",a:"This chapter describes the Jaguar input file and how to use it to run Jaguar from the command line. You might want to run Jaguar from the command line in order to submit a job at a later time when computers are less busy, to use batch scripts to run multiple jobs in succession, or to automate job ...",t:"The Jaguar Input File"},"1807":{i:0.000433561721173108,u:"../jaguar_command_reference/jaguar_input_general.htm",a:"The input file often begins with an optional line indicating the version number of Jaguar. The other parts of the input file are either single lines composed of options in capital letters followed by arguments on the same line; sections describing the molecule and the calculation, whose formats will ...",t:"General Description of the Jaguar Input File"},"1808":{i:0.000198991984517869,u:"../jaguar_command_reference/jaguar_input_general_format.htm",a:"The input file should have the following format, where square brackets denote optional entries, and entries in italics represent a character string with no spaces: ...",t:"Jaguar Input File Format"},"1809":{i:0.000122002531434457,u:"../jaguar_command_reference/jaguar_input_general_sections.htm",a:"The rest of the input file is composed of named sections. The sections may appear in any order. Character case (upper or lower) is ignored; therefore, either case, or a combination of the two, may be used. Equals signs (=), commas (,), blank spaces (  ), and tabs are all considered spacing ...",t:"Sections Of The Jaguar Input File Describing the Molecule and Calculation"},"1810":{i:9.4896837667384E-05,u:"../jaguar_command_reference/jaguar_input_zmat.htm",a:"The molecular geometry must be described in the zmat section. Details on entering a geometry through the GUI can be found in  The Jaguar Edit Job Dialog Box  and  Setting Up a Jaguar Input File . The units for the geometry are set by the  iunit keyword of the gen section; by default, these units are ...",t:"The zmat, zmat2, and zmat3 Sections Of The Jaguar Input File"},"1811":{i:0.000110324291965177,u:"../jaguar_command_reference/jaguar_input_zvar.htm",a:"The  zvar section should contain equations setting the values of any variables in the zmat section, in the same units used for the zmat section. Here is a sample zvar section: \n\u0026zvar\nycoor=0.753108  zcoor=0.454006\n\u0026\n For an optimization, to constrain (freeze) all bond lengths or angles set to a ...",t:"The zvar, zvar2, and zvar3 Sections Of The Jaguar Input File"},"1812":{i:0.000192612439264048,u:"../jaguar_command_reference/jaguar_input_coord.htm",a:"\n            The coord and connect Sections Of The Jaguar Input File\n For some geometry or transition-state optimizations, you might want to specify that the optimizer use particular internal coordinates. For example, if you study a bond-forming reaction, you can require Jaguar to use the bond in ...",t:"\n            The coord and connect Sections Of The Jaguar Input File\n"},"1813":{i:0.000175674417881536,u:"../jaguar_command_reference/jaguar_input_coord_constrained.htm",a:"If you want to hold a coordinate fixed at its initial value throughout the job, add a “#” to the end of the line (after one or more spaces). As an example, the coord section \n\u0026coord\nC1  C2\nC1  C2  C3 #\nC1  C2  C3  C4\n\u0026\n requests that the set of internal coordinates include the C1–C2 bond, the ...",t:"Constrained Coordinates in the Jaguar Input File"},"1814":{i:0.000142532377104936,u:"../jaguar_command_reference/jaguar_input_coord_active.htm",a:"In transition state searches, it is useful to be able to specify which coordinates are \"active\": that is, they are involved in the changes in bonding from the reactants to the products of the reaction. To specify that a coordinate is active, add  “#active” to the end of the line (after one or more ...",t:"Active Coordinates in the Jaguar Input File"},"1815":{i:0.000152203657591529,u:"../jaguar_command_reference/jaguar_input_coord_connect.htm",a:"You can use a connect section to specify the bonds used by Jaguar in its generation of internal coordinates. This is particularly important for transition state searches, where bonds are broken and formed. Each line of a connect section should list two atoms by either their atom labels (such as H2 ...",t:"Specifying Bonds for Internal Coordinates with a connect Section"},"1816":{i:0.000356380044176636,u:"../jaguar_command_reference/jaguar_input_gen.htm",a:"The keywords of the gen section allow control over how the calculation is performed. Many of these keywords can be set from the GUI. See  Setting Jaguar Options in Maestro  and  Jaguar Output  for details. In the keyword descriptions, the default values are indicated in bold italics. The keywords ...",t:"The gen Section Of The Jaguar Input File"},"1817":{i:0.0004012868022976,u:"../jaguar_command_reference/jaguar_input_gen_units.htm",a:"The keywords iunit, eunit, and espunit set units for geometry, energy, and electrostatic potential units. The iunit keyword, whose default value is 1, describes what units the geometry is assumed to have, as indicated in  Table 1 . It also sets the length units for plot grids and for the location of ...",t:"Units Keywords In The Jaguar Input File"},"1818":{i:0.000240545332484754,u:"../jaguar_command_reference/jaguar_input_covalent.htm",a:"The real-valued keyword  covfac determines which atoms are considered to be bonded. Two atoms are bonded if they are closer to each other than covfac times the sum of their covalent radii, which are listed in  Table 5 in Keywords In The Jaguar Input File That Specify Physical Properties . The ...",t:"Covalent Bonding Keyword In The Jaguar Input File"},"1819":{i:0.000329898157385366,u:"../jaguar_command_reference/jaguar_input_gen_state.htm",a:"The keywords that describe the input molecule’s charge and spin multiplicity are shown in  Table 1 . These keywords correspond to GUI options described in  Setting Charge and Multiplicity in Jaguar Calculations . ◀  Covalent Bonding Keyword In The Jaguar Input File Jaguar Command Reference Manual ...",t:"Molecular State Keywords In The Jaguar Input File (Charge and Multiplicity)"},"1820":{i:0.000213983045903937,u:"../jaguar_command_reference/jaguar_input_gen_mass.htm",a:"The keyword massav determines the atomic masses used for any atoms whose masses or isotopes are not specifically set in the atomic section (see  The atomic Section Of The Jaguar Input File ). The masses used are from ref.  [201] . ◀  Molecular State Keywords In The Jaguar Input File (Charge and ...",t:"Atomic Mass Keyword In The Jaguar Input File"},"1821":{i:0.000497265835443524,u:"../jaguar_command_reference/jaguar_input_gen_symmetry.htm",a:"By default, for most calculations, Jaguar takes advantage molecular symmetry to reduce computing time, as described in  Symmetrizing a Molecule . Several integer-valued keywords shown in  Table 1  describe how the program uses symmetry. ◀  Atomic Mass Keyword In The Jaguar Input File Jaguar Command ...",t:"Symmetry-Related Keywords In The Jaguar Input File"},"1822":{i:0.000319380741048829,u:"../jaguar_command_reference/jaguar_input_gen_lmp2.htm",a:"The mp2 keyword allows you to request a local Møller-Plesset perturbation theory (LMP2) calculation. By default, LMP2 is off. For more information on the local MP2 method, see  Local MP2 Settings  and  Pseudospectral Local MP2 Techniques . LMP2 keywords are given in  Table 1 .  LMP2 calculations ...",t:"LMP2 Keywords In The Jaguar Input File"},"1823":{i:0.000203328028386489,u:"../jaguar_command_reference/jaguar_input_gen_relham.htm",a:"To use a Hamiltonian that includes relativistic effects, you can set the  relham keyword. The allowed values and the selection that they make are given in  Table 1 . The relham keyword is not compatible with the use of effective core potentials, so you should not choose a basis set with an effective ...",t:"Relativistic Hamiltonian Keyword In The Jaguar Input File"},"1824":{i:0.000247017406804056,u:"../jaguar_command_reference/jaguar_input_gen_dft.htm",a:"To use density functional theory (DFT), you should set the dftname keyword. Most DFT options described here are also available from the GUI (see  Density Functional Theory (DFT) Settings . Keywords for DFT grids are given in  Grid and Dealiasing Function Keywords In The Jaguar Input File . The ...",t:"DFT Keywords In The Jaguar Input File"},"1825":{i:0.000229208115060921,u:"../jaguar_command_reference/jaguar_input_gen_tddft.htm",a:"The time-dependent Hartree-Fock (TDHF) and time-dependent density-functional theory (TDDFT) methods can be used after an SCF calculation to generate information on excited states. The output includes energies, oscillator strengths and transition dipole moments for excitations from the ground state. ...",t:"TDHF and TDDFT Keywords In The Jaguar Input File"},"1826":{i:0.000664365777059711,u:"../jaguar_command_reference/jaguar_input_gen_geopt.htm",a:"Geometry Optimization and Transition-State Keywords in the Jaguar Input File Many of the keyword settings for optimization of minimum-energy structures and transition states described in this subsection can be made from the GUI, as described in  Jaguar Optimizations and Scans , which also contains ...",t:"Geometry Optimization and Transition-State Keywords In The Jaguar Input File"},"1827":{i:0.000194412519158896,u:"../jaguar_command_reference/jaguar_input_gen_scan.htm",a:"Keywords for defining the initial wave function, geometry, scan direction, constraint violation, and Hessian for geometry scans (coordinate scans) are listed in  Table 1 . These keywords can also be used with IRC scans.  ◀  Geometry Optimization and Transition-State Keywords in the Jaguar Input File ...",t:"Geometry Scan Keywords In The Jaguar Input File"},"1828":{i:0.000217991205132696,u:"../jaguar_command_reference/jaguar_input_gen_irc.htm",a:"IRC scans have been implemented using the methods described in Ref.  [242] . The implementation includes IRC and minimum energy path (MEP) calculations. The calculations start at a transition state and move downhill in energy along the reaction path toward a minimum of the potential energy surface. ...",t:"Intrinsic Reaction Coordinate (IRC) Keywords In The Jaguar Input File"},"1829":{i:0.000308300450919323,u:"../jaguar_command_reference/jaguar_input_gen_solvation.htm",a:"Most of the solvation keywords correspond to GUI options described in  Jaguar Solvation Settings . The allowed values for the solvation keywords are described in  Table 1 . Defaults for some of these keywords are not indicated in bold italics, since the keywords’ default values generally depend on ...",t:"Solvation Keywords In The Jaguar Input File"},"1830":{i:0.000224676350633198,u:"../jaguar_command_reference/jaguar_input_gen_pka.htm",a:"pKa Keywords In The Jaguar Input File Keywords for controlling aspects of pKa calculations are listed in  Table 1 . ◀  Solvation Keywords In The Jaguar Input File Jaguar Command Reference Manual Properties Keywords In The Jaguar Input File  ▶",t:"pKa Keywords In The Jaguar Input File"},"1831":{i:0.000347306541443488,u:"../jaguar_command_reference/jaguar_input_gen_properties.htm",a:"Keywords to request calculation of molecular properties, including multipole moments and charge fitting properties are listed in  Table 1 , most of which correspond to GUI options described in  Molecular Properties from Jaguar Calculations . Only the values listed in the table are allowed  Analytic ...",t:"Properties Keywords In The Jaguar Input File"},"1832":{i:0.00027998471705036,u:"../jaguar_command_reference/jaguar_input_gen_frequency.htm",a:"For jobs that include a calculation of vibrational frequencies, various frequency-related properties can also be computed by setting the appropriate keywords. Most of these keywords, which are listed in  Table 1 , correspond to GUI options described in  Vibrational Frequencies and Related Properties ...",t:"Frequency-Related Keywords In The Jaguar Input File"},"1833":{i:0.000177864716428479,u:"../jaguar_command_reference/jaguar_input_gen_etransfer.htm",a:"The  etransfer keyword allows you to calculate the coupling matrix element for charge transfer between two structures that are in a specified geometric arrangement. This capability is important for charge mobility calculations on materials. Setting etransfer=1 requests calculation of the electronic ...",t:"Electron Transfer Keywords In The Jaguar Input File"},"1834":{i:0.00034694484873357,u:"../jaguar_command_reference/jaguar_input_gen_basis.htm",a:"The  basis keyword allows you to override the default basis set (6‑31G**). This keyword should be a string describing the standard basis plus any polarization and diffuse functions. The string describing the standard basis should be chosen from the first column of the tables in  Basis Sets . These ...",t:"Basis Set Keywords In The Jaguar Input File"},"1835":{i:0.00052191081342358,u:"../jaguar_command_reference/jaguar_input_gen_scf.htm",a:"Many of the keywords that control the SCF calculation can be set from the SCF tab as described in  SCF Settings . (The other keyword settings corresponding to SCF tab settings are described in  Localization Keywords In The Jaguar Input File .)  The SCF keywords are described in  Table 1 . The ...",t:"Keywords for SCF Methods in the Jaguar Input File"},});