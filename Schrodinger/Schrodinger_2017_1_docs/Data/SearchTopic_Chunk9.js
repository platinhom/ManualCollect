define({"2064":{i:0.000104726486854546,u:"../macromodel_command_reference/mmod_command_examples_conf_search_MCMM.htm",a:"An example command file appears below for a conformational search calculation that uses the MCMM search method. Descriptions of the opcodes in the file follow. \nmcmm.mae\nmcmm-out.mae\n MMOD       0      1      0      0     0.0000     0.0000     0.0000     0.0000\n FFLD      10      1      0      1     ...",t:"MacroModel Example: Conformational Search Using MCMM"},"2065":{i:0.000114590389257269,u:"../macromodel_command_reference/mmod_command_examples_conf_search_LMOD.htm",a:"An example command file appears below for a conformational search calculation using low-mode conformational searching. Descriptions of the opcodes in the file follow. However, opcodes that are also in the MCMM command file example are not repeated. See the explanations in  MacroModel Example: ...",t:"MacroModel Example: Multi-Structure Conformational Search Using LMOD"},"2066":{i:0.000122018128471167,u:"../macromodel_command_reference/mmod_command_examples_conf_search_mixed.htm",a:"This example uses the CDK2 structure 1e1v with the co-crystallized ligand cmg. Alternate binding modes of the ligand are sampled using a mixture of torsional moves, low-mode moves, and rotation and translation of the ligand, in a conformational search. This example was prepared with Maestro. A ...",t:"MacroModel Example: Mixed MCMM/Low-Mode Search Using a Substructure File"},"2067":{i:9.32581296703136E-05,u:"../macromodel_command_reference/mmod_command_examples_conf_search_multimethod.htm",a:"MWRT minimizations enable multiple minimizer methods to be applied to a structure during the minimization stage, which can enhance the performance of the minimization process. This method can be used in a conformational search. Examples are given in the examples directory,  ...",t:"MacroModel Example: Conformational Searches Using Multiple Minimization Methods (MWRT)"},"2068":{i:0.00010530017722514,u:"../macromodel_command_reference/mmod_command_examples_conf_elim.htm",a:"Redundant conformer elimination is performed in MacroModel by the  ADDC opcode. Each time ADDC is executed, it tries to add the current structure to the collection of output conformers. The same checks for redundancy and transformations, such as net translation and rotation of the current structure, ...",t:"Command File Examples for Redundant Conformer Elimination"},"2069":{i:8.52551340997434E-05,u:"../macromodel_command_reference/mmod_command_examples_dynamics.htm",a:"Command File Examples for MacroModel Dynamics Calculations The topics listed below give a few examples of command files for dynamics calculations.",t:"Command File Examples for MacroModel Dynamics Calculations"},"2070":{i:0.000104922359321101,u:"../macromodel_command_reference/mmod_command_examples_dynamics_stochastic.htm",a:"Below is an example of the command file for a stochastic dynamics simulation and explanations of the opcodes that appear in the file. \nsdyn.mae\nsdyn-out.mae\n MMOD       0      1      0      0     0.0000     0.0000     0.0000     0.0000\n FFLD      10      1      0      1     1.0000     0.0000     ...",t:"MacroModel Example: Stochastic Dynamics"},"2071":{i:9.14802186617307E-05,u:"../macromodel_command_reference/mmod_command_examples_dynamics_annealing.htm",a:"\n            MacroModel Example: Simulated Annealing Simulated annealing is often used to relax structures into a lower energy state a dynamics technique by systematically lowering the temperature used in the simulations. Below is an example command file for a simulated annealing calculation, where ...",t:"\n            MacroModel Example: Simulated Annealing"},"2072":{i:0.000122913801743941,u:"../macromodel_command_reference/mmod_command_examples_mcsd.htm",a:"Below is an example of an MC/SD computation using a small organic molecule.  \nmcsd.mae\nmcsd-out.mae\n MMOD      0      1      0      0     0.0000     0.0000     0.0000     0.0000\n FFLD     10      1      0      1     1.0000     0.0000     0.0000     0.0000\n BDCO      0      0      0      0    41.5692 ...",t:"Command File Example for MacroModel MC/SD Calculations"},"2073":{i:0.000148748402428929,u:"../macromodel_command_reference/mmod_command_examples_embrace.htm",a:"Command File Examples for Embrace Examples of command files for Embrace are divided into two sets, for minimization and for conformational searches. ",t:"Command File Examples for Embrace"},"2074":{i:0.000112032781174205,u:"../macromodel_command_reference/mmod_command_examples_embrace_minimization.htm",a:"You can set up the files for Embrace minimization calculations using Maestro. This is the recommend mechanism for setting up such calculations. The examples listed below explain the structures of Embrace minimization .com files if you want to customize them.",t:"MacroModel Example: Embrace Minimization Calculations"},"2075":{i:0.000100693610562089,u:"../macromodel_command_reference/mmod_command_examples_embrace_minimization_interaction.htm",a:"Interaction mode uses the  ASET mechanism to define atom sets and to calculate interaction energies within and among all such sets. All results for sets are saved in the log file for the run. Only interaction energies between sets 1 and 2 are saved as project properties within the output structure ...",t:"Embrace Interaction Mode"},"2076":{i:8.07206362080601E-05,u:"../macromodel_command_reference/mmod_command_examples_embrace_minimization_ediff.htm",a:"Energy difference mode first applies the type of calculation selected (currently only minimization is supported) to the receptor by itself. For each ligand in turn, it then applies the calculation to the ligand by itself and the complex of the ligand with the receptor, and reports the energy ...",t:"Embrace Energy Difference Mode"},"2077":{i:7.64855128936245E-05,u:"../macromodel_command_reference/mmod_command_examples_embrace_csearch.htm",a:"In the topics listed below are example .com files for an MCMM and an LMOD conformational search with Embrace. After these an example is provided using  COPY and  ALGN in conjunction with an MCMM/ MBAE conformational search. Like Embrace minimization calculations, Embrace conformational searches ...",t:"MacroModel Example: Conformational Searches With Embrace"},"2078":{i:9.75229739031843E-05,u:"../macromodel_command_reference/mmod_command_examples_embrace_csearch_MCMM.htm",a:"This example uses Monte Carlo Multiple Minimum searching. A copy of this file is available at: \n$SCHRODINGER/macromodel-vversion/samples/Examples/embrace_mcmm.com\n \nembrace_input.mae\nembrace_mcmm-out.mae\n FFLD      14      1      0      0     1.0000     0.0000     0.0000     0.0000\n SOLV       3     ...",t:"Embrace MCMM Conformational Search"},"2079":{i:7.50798849455543E-05,u:"../macromodel_command_reference/mmod_command_examples_embrace_csearch_lowmode.htm",a:"This example performs a low-mode conformational search. The input file is similar to that of the MCMM search example above. A copy of this file is available at: \n$SCHRODINGER/macromodel-vversion/samples/Examples/embrace_lmcs.com\n The example is followed by descriptions of the opcodes. Opcode ...",t:"Embrace Low-Mode Conformational Search"},"2080":{i:8.04688564902077E-05,u:"../macromodel_command_reference/mmod_command_examples_embrace_csearch_copyalgn.htm",a:"Embrace conformational searches may also be used with  COPY and  ALGN to position ligands using a crystal structure of a complex of a closely related ligand. While this combination of commands may be useful, the positioning is crude and the searching of conformational space is slow and quite limited ...",t:"Embrace MCMM Conformation Search With COPY/ALGN"},"2081":{i:6.75437340462023E-05,u:"../macromodel_command_reference/mmod_command_examples_embrace_distributed.htm",a:"Any Embrace job may be distributed across a number of processors. There are two methods for distributing Embrace jobs: by specifying multiple processors when running the job (external distribution), or by adding an  NPRC opcode to the .com file (internal distribution). Specifying multiple processors ...",t:"MacroModel Example: Distributed Embrace Calculations"},"2082":{i:0.000144931214369025,u:"../macromodel_command_reference/mm_protein_loop.htm",a:"Before analyzing how a given protein-ligand pair will interact, you may want to refine the protein structure. This commonly involves examining the structure of loops—short sequences of amino acids which typically occur on the surface of the protein, but in the middle of the protein sequence.  The ...",t:"Protein Loop Construction with MacroModel"},"2083":{i:0.00011901461933076,u:"../macromodel_command_reference/mm_protein_loop_performing.htm",a:"When performing a LOOP calculation, you can indicate the loop sequence you want to examine in one of two ways: Indicate that you want to use the loop sequence is that in the original protein.\n     Create an auxiliary filename.lsq file, which lists the desired loop sequence.\n     The input must meet ...",t:"Performing MacroModel LOOP Calculations"},"2084":{i:0.000116639346939629,u:"../macromodel_command_reference/mm_protein_loop_input.htm",a:"Consider the following contents of an example auxiliary file, filename.lsq. \nGLY\nALA\nSER\nTHR\nARG\nGLU\nSER\n Based on the file contents, LOOP creates a new loop with the seven specified amino acids, starting with GLY at the N-terminus end of the loop. The format and contents of the file meet the ...",t:"Example .lsq Input File for MacroModel LOOP Calculations"},"2085":{i:0.000105955686745616,u:"../macromodel_command_reference/mm_protein_loop_examples.htm",a:"To run MacroModel calculations, a molecular structure file and a command file are required. The molecular structure file contains the structures to be used as input in the calculation. The command file contains the name of the input structure file, the name of the output structure file, and an ...",t:"Command File Examples for MacroModel LOOP Calculations"},"2086":{i:0.000122616584097648,u:"../macromodel_command_reference/mm_protein_loop_examples_inputseq.htm",a:"An example command file for a LOOP sequence from an input protein structure appears below. Descriptions of the opcodes used in the file follow. \nloop_input.mae\nloop_input-out.mae\n SOLV       3      1      0      0     0.0000     0.0000     0.0000     0.0000\n FFLD      14      0      0      0     ...",t:"MacroModel Example: LOOP Job Using the Input Structure Sequence"},"2087":{i:0.00011035668953608,u:"../macromodel_command_reference/mm_protein_loop_examples_fileseq.htm",a:"MacroModel Example: LOOP Job Using the Sequence From a File This example is identical to the previous command file except that arg3 of LOOP is 1, indicating that a filename.lsq is used to specify the sequence for the loop.",t:"MacroModel Example: LOOP Job Using the Sequence From a File"},"2088":{i:0.000132171487392203,u:"../macromodel_command_reference/mm_protein_loop_output.htm",a:"Example MacroModel LOOP Job Output",t:"Example MacroModel LOOP Job Output"},"2089":{i:0.000139676932948022,u:"../macromodel_command_reference/mm_protein_loop_output_atomrenum.htm",a:"The excerpt below shows the atom renumbering formation from the .log file generated during a run in which the loop sequence from the actual protein structure was used as input. \n LOOP being generated using sequence from input structure\n Note Substructure information may have changed.\n Recording ...",t:"MacroModel LOOP Output: Atom Renumbering Using Input Protein Structure"},"2090":{i:0.000144350594761278,u:"../macromodel_command_reference/mm_protein_loop_output_csearch.htm",a:"The excerpt below is from the same .log file as the excerpt above. This .log file was generated using the loop sequence from the actual protein structure. \n          Step     1 New global minimum.  E (kJ/mol) =    -3830.85\n Conf   1 E = -3830.85 (  0.057) is unique and stored as structure 1\n  Search ...",t:"MacroModel LOOP Output: Conformational Search Using Input Protein Structure"},"2091":{i:0.000102226657255605,u:"../macromodel_command_reference/mm_protein_loop_output_fileseq.htm",a:"The .log file for LOOP runs that use auxiliary filename.lsq files looks essentially the same as those in the previous two examples, except that when an .lsq file is used, the following statement appears in the .log file output: \n LOOP being generated using sequence in .lsq file\n  ",t:"MacroModel LOOP Output: LOOP Run Using an .lsq File as Input"},"2092":{i:0.000142045057133107,u:"../macromodel_command_reference/mm_free_energy_pert.htm",a:"This chapter provides some of the theory behind the powerful simulation method of free energy perturbation calculations, and describes how to perform a free energy perturbation with MacroModel. If you intend to perform free energy perturbations, we strongly recommend that you become familiar with ...",t:"Free Energy Simulations with MacroModel"},"2093":{i:0.000127864863049105,u:"../macromodel_command_reference/mm_free_energy_pert_overview.htm",a:"The fundamental expression for free energy calculations as implemented in MacroModel is: where HA and HB are the Hamiltonians for the two systems, A and B, and the \u003c\u003e notation represents an ensemble average over system A. This expression is valid only when there is a very small difference between ...",t:"Free Energy Perturbation in MacroModel"},"2094":{i:0.000123717584738729,u:"../macromodel_command_reference/mm_free_energy_pert_setup.htm",a:"Currently free energy calculations can be set up only by direct manipulation of the MacroModel command files. There is no Maestro interface for this procedure. The individual MacroModel opcodes are described in detail in  MacroModel Operation Codes . This section illustrates how to combine these ...",t:"Setting Up MacroModel FEP Calculations"},"2095":{i:0.000123109884909678,u:"../macromodel_command_reference/mm_free_energy_pert_setup_structure.htm",a:"When you perform a free energy perturbation calculation in MacroModel, the input structure file (.mae) must contain two separate MacroModel structures. These correspond to the start and end point for the calculation. The numbering of the structures is critical—all “equivalent” atoms must have the ...",t:"The Structure File for MacroModel FEP Calculations"},"2096":{i:0.000109774607739862,u:"../macromodel_command_reference/mm_free_energy_pert_setup_comfile.htm",a:"The command file used to perform the perturbation of the l to the d form is shown below.  \nfep.mae\nfep-out.mae\n EXNB       0      0      0      0     0.0000     0.0000     0.0000     0.0000\n BDCO       0      0      0      0     0.0000     0.0000     0.0000     0.0000\n FFLD       3      0      0     ...",t:"The Command File for MacroModel FEP Calculations"},"2097":{i:0.000104876276614213,u:"../macromodel_command_reference/mm_free_energy_pert_setup_other.htm",a:"Performing specific windows: Although it is useful to wrap free energy calculations in a BGIN/END loop and simulate with all windows, it is possible to run any specific windows. The windows are independent and free energy differences obtained from separate runs can be usefully combined. It is also ...",t:"Other Possible Command Files for MacroModel FEP Calculations"},"2098":{i:0.000120769740765129,u:"../macromodel_command_reference/mm_free_energy_pert_output.htm",a:"Similar output for each window of the perturbation will be obtained in the .log file. The output obtained when the command file described above was run appears below. This output is for the value of l(middle)=0.4  \n FEP averaged force field, lambda =  0.400000\n Loading FEP coordinates 1\n Starting ...",t:"The Output File from MacroModel FEP Calculations"},"2099":{i:0.000131136995382875,u:"../macromodel_command_reference/mm_free_energy_pert_success.htm",a:"The answers to the following questions will help you perform successful simulations. 1. Do the input structures have the same numbering with dummy atoms used for atoms which are present in one structure and not in another?  One useful way to check the input file is to set up a simple command file as ...",t:"Criteria for a Successful MacroModel FEP Simulation"},"2100":{i:0.000125613034131199,u:"../macromodel_command_reference/mm_free_energy_pert_other.htm",a:"Free energy calculations have been possible for some time—most of the simulation methods in MacroModel result in ensembles that actually sample the free energy surface of the molecule. In some cases actual values for free energy differences between well-defined conformational states can be obtained. ...",t:"Other Types of MacroModel Free Energy Calculations"},"2101":{i:0.000127666786468651,u:"../macromodel_command_reference/mm_free_energy_pert_other_hbond.htm",a:"Infrared studies of the glycyl lactam in CH2Cl2 [56]  suggest that both hydrogen bonded and non-hydrogen bonded forms are significantly populated at room temperature. In this case conformational searching (which can be considered an “Enthalpy” at 0°K) was apparently at variance with experiment ...",t:"Hydrogen Bonding Preference of a Glycyl Lactam in Organic Solution with MacroModel FEP"},"2102":{i:0.00014469595126069,u:"../macromodel_command_reference/mm_free_energy_pert_other_conformer.htm",a:"This compound was one of a series studied by Gellman et al.  [58]  using variable temperature IR and NMR in organic solvent. If we consider that there are two states of the molecule (hydrogen bound and non-hydrogen bound, each representing many possible conformations), we can perform a series of ...",t:"Conformational Free Energies for a Diamide in Solution with MacroModel FEP"},"2103":{i:0.000132323052669331,u:"../macromodel_command_reference/mm_free_energy_pert_literature.htm",a:"This section is not an exhaustive review of the free energy literature, but rather a set of representative reviews and papers covering both theory and applications of free energy calculations. Those marked with a “*” are particularly important for their critical analysis of the potential problems of ...",t:"Literature for FEP Calculations"},"2104":{i:8.18032688011851E-05,u:"../macromodel_command_reference/mmod_test_energies.htm",a:"The MacroModel test subdirectories are located in the $SCHRODINGER/macromodel-vversion/test subdirectory. The suite of tests in any directory can be run at your site by editing and executing the file called do in that directory.  You can run the standard test suite, which is in the directory ...",t:"MacroModel Test Suites"},"2105":{i:6.13254596701412E-05,u:"../macromodel_command_reference/mmod_benchmarking.htm",a:"A benchmark suite is included in the MacroModel distribution for use in comparing the relative speed of different releases or of the same release on different platforms. The benchmark suite contains a number of individual tests which collectively exercise MacroModel calculations involving ...",t:"MacroModel Benchmark Suites"},"2106":{i:0.000243819734726136,u:"../macromodel_command_reference/mmod_atom_types.htm",a:"MacroModel Atom and Bond Types",t:"MacroModel Atom and Bond Types"},"2107":{i:0.000266081421110561,u:"../macromodel_command_reference/mmod_atom_types_file.htm",a:"MacroModel atom types are not “hard-wired” into the program, but are read in at run-time from a file called atom.typ. We continue to use the original MacroModel atom types for most applications, but now have a mechanism for easily adding new types. The list of explicitly supported atom types has ...",t:"The atom.typ File"},"2108":{i:0.000185332574035388,u:"../macromodel_command_reference/mmod_atom_types_bond.htm",a:"MacroModel Bond Types The following table lists the values that may appear in the MacroModel structure file format for bond orders, and the corresponding meaning of these values.  ◀  The atom.typ File MacroModel Command Reference Manual MacroModel Atom Types  ▶",t:"MacroModel Bond Types"},"2109":{i:0.000171563769289884,u:"../macromodel_command_reference/mmod_atom_types_atom.htm",a:"The following table lists the atom types that are used in MacroModel and their equivalencies to atom types for other force fields. These atom types are defined in the atom.typ file. See  The atom.typ File  for a description of the atom.typ file and how to add atom types. Note that in MacroModel, 00 ...",t:"MacroModel Atom Types"},"2110":{i:0.000158400060749982,u:"../macromodel_command_reference/mmod_force_field_files.htm",a:"Force-Field File Format",t:"Force-Field File Format"},"2111":{i:0.000176406768859607,u:"../macromodel_command_reference/mmod_force_field_files_organization.htm",a:"Force-field parameters are obtained by MacroModel at execute time prior to performing energy calculations. Force-field parameters may be obtained from a co-process, using the BMFF mechanism (see  The BMFF Protocol ) or, more commonly, may be read in from a file, the force-field file. This appendix ...",t:"Organization of the Force-Field File"},"2112":{i:0.000107120542657917,u:"../macromodel_command_reference/mmod_force_field_files_intro.htm",a:"BMFF force-fields have several lines at the very top giving MacroModel information about the coprocess to be launched. These are discussed in  The BMFF Protocol . An excerpt from the introductory section of force-field is shown below for mm2.fld, the MM2 force-field. \n Allinger MM2(87) Force Field ...",t:"Introductory Section of the Force-Field File"},"2113":{i:9.78903736512248E-05,u:"../macromodel_command_reference/mmod_force_field_files_intro_equation.htm",a:"The section extending from the STR to the FCH line above tells the program which equations to use for the various types of interaction and give factors which convert from published force field units to kJ/mol. These data are encoded in lines beginning with I=0. Later, in the Main Parameter and ...",t:"Force-Field Equation Specification"},"2114":{i:0.00011364824540045,u:"../macromodel_command_reference/mmod_force_field_files_intro_charge.htm",a:"The following force field descriptors specify charge processing information. BCI BCI specifies if MacroModel should expect bond charge increments (BCI’s), bond dipoles, or neither from the force field.  The default unit for BCI’s is the electron. The default unit for bond dipoles is the Debye. ...",t:"Force-Field Charge Processing Specification"},"2115":{i:0.000111243069363778,u:"../macromodel_command_reference/mmod_force_field_files_intro_altsel.htm",a:"The lower parts (ALT, SEL) allow selection among various parameter types (O for original, M for modified, etc.) and among various alternative parameter sets (e.g., Allinger MM2 vs. Osawa MM2\u0027). The SEL (selection) descriptors above allow you to include (or exclude) the lines of the force fields ...",t:"ALT and SEL Specification in the Force-Field File"},"2116":{i:0.000127465797796095,u:"../macromodel_command_reference/mmod_force_field_files_intro_equiv.htm",a:"It is possible to equivalence several atom types in any given force field by some simple additions in the force field file. This equivalencing allows the use of a special 2-character descriptor to refer to any one of a set of atoms. These 2-character descriptors may be used anywhere in the force ...",t:"Atom Type Equivalencies in the Force-Field File"},"2117":{i:0.000122183383244898,u:"../macromodel_command_reference/mmod_force_field_files_main.htm",a:"Main Parameter Section of the Force-Field File",t:"Main Parameter Section of the Force-Field File"},"2118":{i:0.000116423399462137,u:"../macromodel_command_reference/mmod_force_field_files_main_interaction.htm",a:"There are separate subsections for stretching, bending, torsional, improper torsional, van der Waals and hydrogen bonding parameters. These sections distinguish parameters by the types of atoms and bonds used. These main atom and bond types are listed at the left of each parameter line. Each ...",t:"Interaction Subsections of the Force-Field File"},"2119":{i:0.000120452427271363,u:"../macromodel_command_reference/mmod_force_field_files_main_adding.htm",a:"New parameters generally come from one of three possible sources: new published work, quantum-mechanical calculations and educated guesses based on analogy to systems similar to that being parameterized.  New parameters from MM2, MM3, and OPLSA publications may be added directly to the force field ...",t:"Adding New Force-Field Parameters"},"2120":{i:0.000121356659788131,u:"../macromodel_command_reference/mmod_force_field_files_main_amber.htm",a:"AMBER94 does not differ from the published force field in any significant way.  The MacroModel implementation of AMBER* is identical to original AMBER with the exception of additional parameters which we have added. We supply the field by default with a constant dielectric treatment, the united-atom ...",t:"Special Notes for the AMBER Force Field"},"2121":{i:0.000139593685308311,u:"../macromodel_command_reference/mmod_force_field_files_main_mm2mm3.htm",a:"The MM2 field we supply is similar to but not identical with that provided by Allinger in 1987. The MM3 parameter set is the 1991 version. The stretch, bend, torsion, and off-diagonal (e.g., stretch-bend) equations are identical with those of the authentic fields. Included in the MacroModel fields ...",t:"Special Notes for the MM2 and MM3 Force Fields"},"2122":{i:0.000154871333049101,u:"../macromodel_command_reference/mmod_force_field_files_subs.htm",a:"Substructure Section of the Force-Field File",t:"Substructure Section of the Force-Field File"},"2123":{i:0.000141846576636864,u:"../macromodel_command_reference/mmod_force_field_files_subs_use.htm",a:"The last section of the force field file lists special substructures. A force-field substructure is a contiguously connected chemical entity, such as an amino-acid residue or an aromatic nucleus. The connectivity is given by a simple linear notation. For each substructure, parameters are given that ...",t:"Use of Substructures in the Force-Field File"},"2124":{i:0.000129307565578943,u:"../macromodel_command_reference/mmod_force_field_files_subs_notation.htm",a:"In addition to the normal one- to four-atom descriptors of stretch, bend, and torsional substructures used in molecular mechanics, MacroModel provides for description of more complex substructures. These are the “special substructures” given at the end of a MacroModel force field files. The ...",t:"Substructure Linear Notation in the Force-Field File"},"2125":{i:0.000130772279744685,u:"../macromodel_command_reference/mmod_force_field_files_subs_charge.htm",a:"You can continue to specify explicit partial charges in force field substructures by specifying 8 in the first two columns of a line containing such partial charges as in previous versions of MacroModel. However, internal processing of these charges was changed in version 8.0. Whereas MacroModel ...",t:"Force-Field Substructure Charge Processing"},"2126":{i:0.000115788029953624,u:"../macromodel_command_reference/mmod_force_field_files_subs_examples.htm",a:"The following example shows a substructure specification for a cyclopropane nucleus. The -3 and -2 that appear alone on lines specify the format for the reading of subsequent lines. The C, 9, 1, 2, etc. introducing other lines specify the nature of the information to be read. The C specifies that ...",t:"Force-Field File Substructure Examples"},"2127":{i:9.41334602472608E-05,u:"../macromodel_command_reference/mmod_force_field_files_subs_geom.htm",a:"It is occasionally desirable to make the parameters used for certain degrees of freedom dependent upon the geometry of some other degree of freedom. We allow this, in a limited sense. First, the degree of freedom which dictates the parameters must be configurational; that is, we do not provide a ...",t:"Geometry-Dependent Parameters in the Force-Field File"},"2128":{i:0.000215267945897812,u:"../macromodel_command_reference/bmff_protocol.htm",a:"BMFF (BatchMin Force Field) is an interprocess communication protocol which allows MacroModel to obtain force-field interactions from an external process. In this context, MacroModel is the client and the external process is the server. The purpose of this topic is to provide a functional ...",t:"The BMFF Protocol"},"2129":{i:0.000127266509720494,u:"../macromodel_command_reference/mmod_grd_files.htm",a:"Files with a .grd suffix are produced by the  DRIV command. These files are used by Maestro to create contour plot displays. Although right now Maestro and  DRIV support two-dimensional data, the file format is designed to accommodate three dimensional data sets. The format is as follows. Fortran ...",t:"Format of MacroModel .grd Files"},"2130":{i:8.27300674370284E-05,u:"../macromodel_command_reference/mmod_conversion_utilities.htm",a:"The MacroModel (mmod) file format has been superseded by the Maestro file format, and is deprecated. You should use Maestro format files for all MacroModel jobs. If you have files in the older MacroModel format (with extension .dat), you can convert them to Maestro format with the utility mmodmae.  ...",t:"MacroModel File Format Conversion"},"2131":{i:9.0410377092772E-05,u:"../macromodel_command_reference/mmod_utilities.htm",a:"MacroModel Command-Line Utilities MacroModel is distributed with the following command-line utilities, which are stored in the utilities directory of the software installation",t:"MacroModel Command-Line Utilities"},"2132":{i:0.000136864092237784,u:"../macromodel_command_reference/mmod_utilities_premin.htm",a:"\n            premin: Preparation of Multi-Ligand Structure Files \n MacroModel’s minimization capabilities are used in a script named premin, which is designed to prepare multi-ligand structure files for use in Glide and other applications. Database files sometimes contain problematic ligand ...",t:"\n            premin: Preparation of Multi-Ligand Structure Files \n"},"2133":{i:0.000128538221971331,u:"../macromodel_command_reference/mmod_utilities_autoref.htm",a:"\n            autoref: Restrained Minimizations A script is available for performing restrained minimizations. The primary application is for the minimization of protein-ligand structures just after hydrogen atoms have been added. In this procedure, the heavy atoms in the system are restrained using ...",t:"\n            autoref: Restrained Minimizations"},"2134":{i:0.000176160781192252,u:"../macromodel_command_reference/mmod_utilities_serial_split.htm",a:"\n            serial_split: Split Serial Search Output Structure Files A serial search produces an output structure file that contains the collections of conformations produced from a number of different molecules. The serial_split utility can be used to produce separate files, each containing the ...",t:"\n            serial_split: Split Serial Search Output Structure Files"},"2135":{i:0.000174152709625071,u:"../macromodel_command_reference/mmod_utilities_ring_templating.htm",a:"\n            ring_templating: Creating Ring Conformation Templates Several of Schrödinger’s products rely on the templating of ring conformations for selection of the physically reasonable, low-energy conformations. A library of ring templates is included in the software distribution, but of course ...",t:"\n            ring_templating: Creating Ring Conformation Templates"},"2136":{i:0.000136313148413378,u:"../macromodel_command_reference/mmod_utilities_ring_templating_generating.htm",a:"The command syntax is as follows: \nring_templating [options] input-file (This command must be preceded by $SCHRODINGER/utilities/ on Linux and Mac.) For information on the command options, run the command ring_templating -h.  The input file is the file that contains the ring systems to be templated. ...",t:"Generating Ring Conformation Templates"},"2137":{i:0.000120662206717661,u:"../macromodel_command_reference/mmod_utilities_ring_templating_using.htm",a:"When you have created the new templates, you can add them to the following directory for automatic inclusion in any application that you run that needs ring templates: To make the templates available for use by all users, you can install them in the mmshare-vversion/data/mmconf_rc_database directory ...",t:"Using Ring Conformation Templates"},"2138":{i:0.000121834945449862,u:"../macromodel_command_reference/mmod_utilities_other.htm",a:"The following command-line utilities, which are installed with the software, may be useful in conjunction with MacroModel calculations: For more information on these utilities, see the  General Utilities  manual. Utilities for the obsolete MacroModel file format are described in  MacroModel File ...",t:"Other Utilities Useful for MacroModel"},"2139":{i:8.2038274155644E-05,u:"../macromodel_command_reference/mmod_utilities_python_scripts.htm",a:"The MacroModel distribution contains several Python scripts that can be used for running various jobs. These scripts are stored in $SCHRODINGER/macromodel-vversion/python. To run a script, use the following syntax: \n$SCHRODINGER/run -FROM macromodel script-name [options] \n For more information on ...",t:"MacroModel Python Scripts"},"2140":{i:0.000650723571499101,u:"../macromodel_command_reference/mmod_references.htm",a:"Allinger, N. L.Conformational Analysis 130. MM2. A Hydrocarbon Force Field Utilizing V1 and V2 Torsional Terms. J. Am. Chem. Soc. 1977, 99, 8127. Allinger, N. L.; Yuh, Y. H. Quantum Chemistry Program Exchange, Bloomington, Indiana, Program No. 395, Molecular Mechanics. Molecular Mechanics; Burkert, ...",t:"MacroModel References"},"2141":{i:6.13254596701412E-05,u:"../macromodel_command_reference/macromodel_command_referenceIOM.htm",a:"MacroModel Opcode Index",t:"MacroModel Opcode Index"},"2142":{i:0.00305758081907627,u:"../maestro_command_reference/ASL.html",a:"This chapter documents the syntax of Maestro\u0027s Atom Specification Language (ASL).  ASL  provides a flexible way to define sets of atoms in complex macromolecular systems. It serves as the basis of the Sets facility in Maestro, and is used in many panels as an alternative to picking atoms in the ...",t:"The Atom Specification Language"},"2143":{i:8.66566350035471E-05,u:"../maestro_command_reference/ASL-Hierarchy.html",a:"entry \u003e molecule \u003e chain \u003e residue \u003e atom   The atom specification language is made up of five classes. Each is listed below (with their minimum acceptable abbreviations shown outside the square brackets). e[ntry] This is the top level class in the language.  The term entry is used to mean all the ...",t:"The ASL Hierarchy"},"2144":{i:0.000119200324835908,u:"../maestro_command_reference/Atom-Specification.html",a:"A complete specification is a class name and some property specified by a property name and property list.  The syntax is: class.property \u003cpropertylist\u003e Items in a property list may be separated by comma, whitespace or both.  Ranges (lower-upper) may be used where appropriate. Unterminated ranges ...",t:"Atom Specification"},"2145":{i:0.000156798113298651,u:"../maestro_command_reference/ASL-Operators.html",a:"A number of operators are supported that can be used to combine basic ASL expressions: Boolean AND Boolean OR Boolean NOT fillres fillmol within beyond withinbonds beyondbonds Boolean AND (set intersection) The Boolean and operator returns the set of atoms that meets all the conditions defined in ...",t:"ASL Operators"},"2146":{i:0.000129948056508785,u:"../maestro_command_reference/ASL-Precedence.html",a:"The order of priority of operators is (in decreasing order): not/fillres/fillmol and/or within/beyond At equal levels of priority the expression is evaluated left to right. Examples: within 5.0 mol. 1 or mol. 2 returns the set of all atoms that are within 5.0Å of either molecule 1 or molecule 2 (or ...",t:"ASL Operator Priority"},"2147":{i:0.000124587653440896,u:"../maestro_command_reference/ASL-Implicit-Ops.html",a:"When no operator is specified, the following operations are assumed: Specifications within a property list have a Boolean or relationship. The following expression returns atoms with PDB names CA or CB. atom.ptype CA,CB When the classes are in order of decreasing priority in the class hierarchy, the ...",t:"Implicit Operators in ASL"},"2148":{i:0.000124426851375893,u:"../maestro_command_reference/ASL-Sets.html",a:"Maestro supports a mechanism for defining and naming atom sets via the  Sets Panel .  The names of existing sets may be used in expressions if they are prefixed with the word set. For example, if there are two sets defined as: \nset S1 mol. 1  (molecule number 1) set S2 atom.ptype C,O,N,CA  (all ...",t:"Creating New Atom Sets from Existing Ones in ASL"},"2149":{i:0.000130817402304728,u:"../maestro_command_reference/Special-specs.html",a:"The specification all matches everything.  You can use this in any Maestro command which expects an ASL operand in order to apply the command to all the atoms. For example to color all atoms green: coloratom color=green all Note that the syntax for this is just all, not atom. all or molecule. all. ...",t:"Special ASL Specifications"},"2150":{i:0.000151934263738595,u:"../maestro_command_reference/Matching-PDB-Names.html",a:"Because PDB atom names are four characters wide,  the following strategy is used to conveniently specify PDB atom names: Unquoted names that begin with a non-numeric character have a blank character inserted in front of them and are padded with blanks from the right to make up four characters before ...",t:"Matching PDB Atom Names in ASL"},"2151":{i:0.00013226801180463,u:"../maestro_command_reference/Missing-Atoms.html",a:"When an ASL expression refers to atoms that are not present (or not yet present) in the Workspace, these atoms are ignored, and the expression matches the atoms that are present. If atoms are subsequently added to the Workspace and one or more of these atoms are matched by the expression, they are ...",t:"ASL Matching of Missing or Added Atoms"},"2152":{i:0.000131252926043076,u:"../maestro_command_reference/ASL-Aliases.html",a:"ASL Aliases Maestro allows you to define your own aliases, using either the Command Input Area or the  Command Aliases Panel . Maestro converts all aliases into their corresponding commands before performing operations involving the aliased commands. You must ensure that aliases produce sensible ...",t:"Aliasing"},"2153":{i:0.000114523783513086,u:"../maestro_command_reference/ASL-Hints.html",a:"Entries can be included into and excluded from the Workspace.  The order in which this is performed affects the atom and molecule numbers.  For example, if you have two entries in your Project Table called A and B and you include into an empty Workspace first A and then B, the molecule numbers will ...",t:"Useful Hints when using ASL with the Project Facility"},"2154":{i:0.000119081091042528,u:"../maestro_command_reference/ASL-Examples.html",a:"This topic gives some examples of the use of the ASL in real-life situations. Note that while these examples all use lower-case, the ASL expressions themselves are not case sensitive. Defining a set to refer to a ligand and/or receptor. The set of atoms within a given distance of the ligand. ...",t:"ASL Examples"},"2155":{i:0.00136552857055479,u:"../maestro_command_reference/mmsubs.htm",a:"This appendix describes a linear substructure notation proprietary to Schrödinger, referred to as mmsubs. The mmsubs notation is based on the linear substructure notation used in MacroModel. The implementation is independent of the MacroModel implementation, and has some extensions over the ...",t:"The mmsubs Substructure Notation"},"2156":{i:0.000114461132827311,u:"../maestro_command_reference/mmsubs_atom_bond_types.htm",a:"Structures expressed in mmsubs (or MacroModel) notation use MacroModel atom type symbols. The MacroModel atom types are listed in  MacroModel Atom Types .  Every MacroModel atom type symbol is two characters long, and is case-sensitive. It can consist of letters and numbers, so you must be careful ...",t:"Atom and Bond Types in mmsubs Notation"},"2157":{i:0.000118852805310745,u:"../maestro_command_reference/mmsubs_ring_closure.htm",a:"Ring-forming bonds are expressed as a bond symbol followed by a number, where the number is the pattern position of the symbol for the other atom in the ring bond. For example, cyclopentane can be expressed as C0-C0-C0-C0-C0-1 The final -1 indicates that the fifth carbon has a single bond to the ...",t:"Ring Closure in mmsubs Notation"},"2158":{i:0.000134351926073313,u:"../maestro_command_reference/mmsubs_chain_branching.htm",a:"To allow specification of branched structures, mmsubs accepts parenthesized pattern sections. An opening parenthesis initiates a branch, and the corresponding closing parenthesis ends the branch. A bond symbol after the closing parenthesis is tied to the atom symbol just before the opening ...",t:"Chain Branching in mmsubs Notation"},"2159":{i:0.000138875975018292,u:"../maestro_command_reference/mmsubs_optional_atoms.htm",a:"Optional atoms can be specified in mmsubs notation so that the substructure will match whether or not the optional atom is found. The syntax is to put the optional atom and its preceding bond symbol in square brackets. With this pattern N0([-H0])-C0(-C0-O0[-H0])-C0=O0 serine would be identified ...",t:"Optional Atoms in mmsubs Notation"},"2160":{i:0.000139343148715585,u:"../maestro_command_reference/mmsubs_special_cases.htm",a:"The MacroModel atom type C2 needs special attention. This type covers sp2 carbon as it occurs both in aromatic rings and in carbonyl groups. In cases where you want to match only one C2 subtype, you need to specify an atom attached to the C2, to exclude matches on the other subtype.  For example, if ...",t:"Special Cases in mmsubs Notation"},"2161":{i:0.000136467839853882,u:"../maestro_command_reference/mmsubs_examples.htm",a:"In this section, some more complex examples are presented. The first is norbornane, which is a bicyclic compound, and can be represented as follows: C0-C0-C0-C0(-C0-1)-C0-C0-1 Two ring closures are indicated, as the compound is bicyclic. In this pattern, both closures, of the bridge and of the main ...",t:"Examples of mmsubs Notation"},"2162":{i:0.00012585314218624,u:"../maestro_command_reference/mmsubs_formal_charge_extensions.htm",a:"The mmsubs notation has syntax to explicitly specify formal charge on an atom, separately from what the atom type itself implies. This is an extension over the MacroModel notation. Formal charges can be specified for any MacroModel atom type, but the usage makes the most sense when applied to a ...",t:"Formal Charge Extensions in mmsubs Notation"},"2163":{i:0.000121688969282518,u:"../maestro_command_reference/mmsubs_atom_type_equivalence.htm",a:"The mmsubs software supports the use of atom type equivalence labels in substructure patterns. Such labels are defined in a data file with a simple text format, for example: # Comments begin with a \"#\"\nCS  CA CB CC\nCT  CA CB CC C3\nCU  C2 CD CE\nCH  CA CB CC C3 H1 The equivalence label comes first, ...",t:"Atom Type Equivalence Labels in mmsubs Notation"},"2164":{i:8.71854755119898E-05,u:"../maestro_command_reference/mmsubs_files.htm",a:"The data file that formally specifies MacroModel atom type symbols is installed in the Schrödinger software installation at the following location: mmshare-vversion/data/atom.typ Details of the atom types are given in this file. Further information on the atom types can be found in the atom-typing ...",t:"Files Related to mmsubs Notation"},"2165":{i:0.000732160503772659,u:"../maestro_command_reference/ESL.html",a:"The Entry Selection Language (ESL) is used for selecting entries in a Maestro project based on the properties of those entries. ESL expressions can be of arbitrary complexity and can use parentheses and logical operators. While the ESL is similar in appearance to the Atom Specification Language ...",t:"The Entry Specification Language"},"2166":{i:9.63675890764205E-05,u:"../maestro_command_reference/Entry-Properties.html",a:"There are a number of properties that can be used in ESL expressions: entry The name of the entry is the most useful property at present.  The syntax is:\n entry\n \u003cname\u003e   entry_re\n \u003cname_expression\u003e \n \n     Entry names that contain spaces need to be enclosed in double quotes. The following wildcard ...",t:"Entry Properties for ESL Expressions"},"2167":{i:0.000123672846965613,u:"../maestro_command_reference/ESL-Operators.html",a:"ESL Logical Operators The following logical operators are supported (in order of decreasing priority) not andor At equal levels of priority, the expression will be evaluated from left to right. Parentheses can be used to override the default order of priority.",t:"ESL Logical Operators"},"2168":{i:0.000123672846965613,u:"../maestro_command_reference/ESL-Comparison.html",a:"ESL expressions may also contain comparisons involving entry properties.  Properties may be defined by their data names or their user names. The data names are the names that appear in the Maestro files.  An example is \"i_qp_n_stars\". User names are the names that appear in the first row of the ...",t:"ESL Entry Property Comparisons"},"2169":{i:9.63675890764205E-05,u:"../maestro_command_reference/ESL-Examples.html",a:"ESL Examples Some examples of the use of the ESL are: entry  anentry entry_re  ligand* entry_re  lig* and selected (entry_re  lig# and selected ) and not included user(volume) \u003c 100.0 and selected included and user(n stars) == 2 and user(n amine) == 0 user(log s) \u003e 0.5 and user(log S) \u003c 1.0",t:"Examples"},"2170":{i:0.000349159606886597,u:"../maestro_command_reference/Custom-Files.html",a:"Maestro uses resource and configuration files to make settings for various parts of its operation, for example, for the display of colors and fonts. The default versions of the resource files are stored in subdirectories (folders) of the data subdirectory in the maestro-vversion directory of your ...",t:"Customizing Maestro with Resource Files"},"2171":{i:0.000158672253568321,u:"../maestro_command_reference/Custom-Color-Defs.html",a:"Many of the places where color is used in Maestro use the RGB color values directly, rather than the Maestro color palette. The color palette is used for named colors. The default color palette is defined in the file colors.res in the  installation resources directory . When Maestro starts, it looks ...",t:"Customizing Color Definitions"},"2172":{i:0.000458108517280537,u:"../maestro_command_reference/Custom-Color-Schemes.html",a:"Customizing Color Scheme Files Each of the standard color schemes is defined in a separate file in the schemes subdirectory of the  Maestro resources directory . By convention, color scheme files have the extension .sch. The schemes are called by Maestro using the file scheme.res, which is in the  ...",t:"Customizing Color Schemes"},"2173":{i:0.000180760823843442,u:"../maestro_command_reference/Custom-Color-Ramps.html",a:"Color ramps are used in Maestro to map volume data onto a surface. In addition to the default color ramps provided with Maestro, you can also create your own color ramps. Like color schemes, each of the standard color ramps is defined in a separate file. These ramp files are stored in the in the ...",t:"Customizing Color Ramps"},"2174":{i:0.000103944035412323,u:"../maestro_command_reference/Custom-Column-Settings.html",a:"Several attributes of the property data and columns in the Project Table can be set in configuration files. The default precision to which real properties are displayed and the default units can be set in the file m2io.ini. The default initial column width in characters can be set in the file ...",t:"Customizing Column Settings"},"2175":{i:0.000100061097416291,u:"../maestro_command_reference/Custom-Property-Families.html",a:"When you create a custom property family (which you can do in the  Manage Custom Property Families Dialog Box ), the definition is stored in the subdirectory for the current profile in your  profiles directory , in the file custom_property_groups. Each custom family is defined on a single line as a ...",t:"Customizing Property Families"},"2176":{i:7.83363985761176E-05,u:"../maestro_command_reference/Custom-Rotamers.html",a:"The rotamers that can be selected in the Rotamers dialog box are defined in a resource file, rotamer.res, which is stored in the  installation resources directory . For each rotamer, the file lists the residue name, its frequency of occurrence (percentage), and the chi angles for the rotamer. You ...",t:"Customizing Rotamers"},"2177":{i:0.000219594491102446,u:"../maestro_command_reference/Maestro-File-Format.html",a:"All Schrödinger products use the Maestro file format as their primary method of storing molecular structure information. The Maestro file format is extensible. That is, users and third-party programs can add fields that will be accepted and retained when the files are read by Schrödinger products. ...",t:"Maestro File Format"},"2178":{i:0.000220035818124429,u:"../maestro_command_reference/Property-Names.html",a:"Properties of entries have two names: an internal name and a display name, or visible name. The display name is the name that is shown in the headings of the Project Table columns. Properties also belong to a “family”, and the family name is shown in menus used for property selection.\n The internal ...",t:"Property Names"},"2179":{i:0.000351229427855196,u:"../maestro_command_reference/Command-Language.html",a:"This chapter contains a listing of all supported Maestro commands, their functions, and their usage options.  You can use Maestro commands by entering them in the Command Input Area of the main window. The Maestro command language syntax is: keyword [options] [operand]\n For example: entryimport ...",t:"The Maestro Command Language"},"2180":{i:0.000179399467512341,u:"../maestro_command_reference/Conventions.html",a:"Conventions Used in the Command Syntax This manual uses a number of typographical conventions to describe the command language. The names of keywords are printed in bold face: entryimport The names of options are printed in italic, and literal choices for that option are in normal roman: ...",t:"Conventions Used in this Manual"},"2181":{i:0.000153294293016962,u:"../maestro_command_reference/1ddataset.html",a:"Controls the appearance of the a single dataset on a plot of a dihedral drive of a single dihedral.  Syntax: 1ddataset ccolor= red | green | blue | purple | orange | blue_green | light_green | red_purple | yellow | cyan curve= dashed | noline cwidth= \u003cn\u003e scolor= red | green | blue | purple | orange ...",t:"1ddataset"},"2182":{i:0.000145183905864976,u:"../maestro_command_reference/1dplot.html",a:"Controls the appearance of the plot the energy as a function of a drive of a single dihedral angle.  Syntax: 1dplot amax= \u003cx\u003e amin= \u003cx\u003e emax= \u003cx\u003e emin= \u003cx\u003e escale= relative orientation= portrait papersize= a4 showlegend= yes | no squareplot= yes | no title= \u003ctext\u003e units= kcal xaxislabel= \u003ctext\u003e ...",t:"1dplot"},"2183":{i:0.000142664320889296,u:"../maestro_command_reference/1drescale.html",a:"1drescale Rescales the 1D plot axes back to be able to view the entire data range.  Syntax: 1drescale",t:"1drescale"},"2184":{i:0.000141881665606735,u:"../maestro_command_reference/1dtable.html",a:"1dtable Write out a table of the data from the 1D plot to an external file.  Syntax: 1dtable",t:"1dtable"},"2185":{i:0.000141638591924858,u:"../maestro_command_reference/2ddataset.html",a:"Controls the appearance of the dataset plotted on the 2D grid contour plot.  Syntax: 2ddataset colormap= \u003ctext\u003e cwidth= \u003cn\u003e emax= \u003cx\u003e emin= \u003cx\u003e fillcontours= yes | no labelcontours= yes | no negativedashed= yes | no numcontours= \u003cn\u003e showlegend= yes | no title= \u003ctext\u003e xaxislabel= \u003ctext\u003e yaxislabel= ...",t:"2ddataset"},"2186":{i:0.000141563119073792,u:"../maestro_command_reference/2dplot.html",a:"Controls the appearance of a plot of the energy as a function of two dihedral angles.  Syntax: 2dplot contdecimal= \u003cn\u003e escale= relative orientation= portrait papersize= a4 squareplot= yes | no units= kcal xdecimal= \u003cn\u003e ydecimal= \u003cn\u003e [[\u003cpostscript_file_name\u003e] ]\n Options: contdecimal The number of ...",t:"2dplot"},"2187":{i:0.000141539694824987,u:"../maestro_command_reference/2drescale.html",a:"2drescale Rescales the plot axes back to be able to view the entire data range.  Syntax: 2drescale",t:"2drescale"},"2188":{i:0.000141532429093855,u:"../maestro_command_reference/addatomproperty.html",a:"addatomproperty Creates a new atom-level property for the atoms which are selected in the Workspace.  Syntax: addatomproperty value= \u003ctext\u003e [\u003cproperty\u003e ]\n Options: value An optional initial value for the property. ",t:"addatomproperty"},"2189":{i:0.00014153017748362,u:"../maestro_command_reference/addfromhold.html",a:"This command retrieves the structure from the hold set and adds it to the current on-screen structure. The added hold structure is placed at the periphery of the on-screen structure and then a scale-to-screen is done.  Syntax: addfromhold [\u003chold_name\u003e ]\n Operands: \u003chold_name\u003e  The name of the hold. ...",t:"addfromhold"},"2190":{i:0.000141529480629387,u:"../maestro_command_reference/adjustangle.html",a:"adjustangle Adjust the bond angle specified by the 3 atoms to the given value.  Syntax: adjustangle angle= \u003cx\u003e move= terminal | single [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e ]\n Options: angle Value to which to set the angle ",t:"adjustangle"},"2191":{i:0.000141529265374244,u:"../maestro_command_reference/adjustchirality.html",a:"adjustchirality Adjust chiral centers in the specified set of atoms.  Syntax: adjustchirality [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  An ASL specification of the atoms which are to have their chiral centers inverted. Because of the way this works, this set of atom should involve at least whole molecules. ",t:"adjustchirality"},"2192":{i:0.000141529199071006,u:"../maestro_command_reference/adjustdihedral.html",a:"adjustdihedral Adjust the dihedral specified by 4 atoms to the given value.  Syntax: adjustdihedral dihedral= \u003cx\u003e dihedralterm= \u003cx\u003e move= terminal | single [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e \u003catom4\u003e ]\n Options: dihedral Value to which to set the torsion ",t:"adjustdihedral"},"2193":{i:0.000141529178718246,u:"../maestro_command_reference/adjustdistance.html",a:"adjustdistance Adjust the distance specified by 2 atoms to the given value.  Syntax: adjustdistance distance= \u003cx\u003e move= terminal | single [\u003catom1\u003e \u003catom2\u003e ]\n Options: distance Value to which to set the torsion ",t:"adjustdistance"},"2194":{i:0.000141529172514077,u:"../maestro_command_reference/alias.html",a:"Define an alias for a command. This allows an abreviated symbol to be defined for any command.  Syntax: alias [\u003calias_name\u003e \u003cdefinition\u003e ]\n Operands: \u003calias_name\u003e \u003cdefinition\u003e  The first operand is the name of the alias. If this contains embedded spaces then it must be enclosed in double quotes. The ...",t:"alias"},"2195":{i:0.000141529170628975,u:"../maestro_command_reference/alignaxis.html",a:"alignaxis Specifies a pair of atoms of a molecule to align the molecule to one of X, Y, or Z axis.  Syntax: alignaxis axis= y | z [\u003catom1\u003e \u003catom2\u003e ]\n Options: axis This option determines to which axis will the molecule be aligned: x=1, y=2, z=3. ",t:"alignaxis"},"2196":{i:0.000141529170068157,u:"../maestro_command_reference/alignmasscenters.html",a:"Use an ASL expression to define set of atoms for which center of mass will be computed, on a per-entry basis. Then, align these mass centers, for each entry having atoms matched by the ASL.  Syntax: alignmasscenters [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. This defines ...",t:"alignmasscenters"},"2197":{i:0.000141529169899487,u:"../maestro_command_reference/alignplane.html",a:"alignplane Define a plane of all atoms in the set described by the ASL operand and align the plane to the XY plane.  Syntax: alignplane plane= yz | zx [\u003cASL\u003e ]\n Options: plane This option determines to which plane will the molecule be aligned: xy=1, yz=2, zx=3. ",t:"alignplane"},"2198":{i:0.000141529169852291,u:"../maestro_command_reference/angle.html",a:"Specifies a triplet of atoms to have their bond angle measured and displayed.  Syntax: angle xoffset= \u003cx\u003e yoffset= \u003cx\u003e [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e ]\n Options: xoffset Specifies the X offset in Angstroms. Any angle created after this value is set will use this new value. Can be applied to an existing ...",t:"angle"},"2199":{i:0.000141529169837863,u:"../maestro_command_reference/appendribbons.html",a:"appendribbons Generate a ribbon for the parts that are not currently in ribbon.  Syntax: appendribbons",t:"appendribbons"},"2200":{i:0.000141529169834385,u:"../maestro_command_reference/application.html",a:"Determines which backend application is currently active and which application-specific menu is displayed. For example the command application Impact will result in the Impact menu being displayed in the main menu bar.  Syntax: application [\u003capplication_name\u003e ]\n Operands: \u003capplication_name\u003e  The ...",t:"application"},"2201":{i:0.000141529169832631,u:"../maestro_command_reference/assigncharges.html",a:"assigncharges This keyword is used to assign partial charges to a set of atoms defined by the ASL. If the ASL is not specified then all atoms in the workspace will be assigned with partial charges. The forcefield used is OPLS2005.  Syntax: assigncharges [\u003cASL\u003e ]\n Operands: \u003cASL\u003e ",t:"assigncharges"},"2202":{i:0.000141529169831496,u:"../maestro_command_reference/assignforcefieldtypes.html",a:"This keyword is used to assign force field types to a set of atoms defined by the ASL. If the ASL is not specified then all atoms in the workspace will be assigned with force field atom type properties. The forcefield used is OPLS2005.  Syntax: assignforcefieldtypes [\u003cASL\u003e ]\n Operands: \u003cASL\u003e ",t:"assignforcefieldtypes"},"2203":{i:0.000141529169826491,u:"../maestro_command_reference/atom.html",a:"Create a new atom in space with the current type and at the position specified by the operands.  Syntax: atom by= type element= \u003ctext\u003e type= \u003cn\u003e [\u003cx\u003e \u003cy\u003e \u003cz\u003e ]\n Options: by This options determines whether atoms are to be described by element symbols (the element= option) or by atom types (type= ...",t:"atom"},"2204":{i:0.000141529169814637,u:"../maestro_command_reference/atomname.html",a:"Set the PDB atom name for all atoms which match the ASL specification.  Syntax: atomname [\u003cPDBNAME\u003e \u003cASL\u003e ]\n Operands: \u003cPDBNAME\u003e \u003cASL\u003e  The first operand is the PDB atom name which will be used for all atoms which match the specification. The second operand is a valid ASL string which defines the ...",t:"atomname"},"2205":{i:0.000141529169769904,u:"../maestro_command_reference/atomproplabel.html",a:"Turns the display of additional (non-standard) atom properties on or off. These are the properties read from the structure file at run-time as opposed to the standard properties controlled by the \u0027labelatom\u0027 command.  Syntax: atomproplabel display= yes | no [\u003cproperty display name\u003e ]\n Options: ...",t:"atomproplabel"},"2206":{i:0.000141529169638832,u:"../maestro_command_reference/attach.html",a:"Attach the currently selected fragment to the specified atom. The bond to this atom (and the atom itself) will be replaced by a bond from the incoming fragment.  Syntax: attach [\u003catom_num\u003e ]\n Operands: \u003catom_num\u003e  The atom number defines the bond to which the fragment be attached. The atom specifed ...",t:"attach"},"2207":{i:0.00014152916919709,u:"../maestro_command_reference/attachmentmarkerdump.html",a:"attachmentmarkerdump Print out the current option values of the attachment marker command.  Syntax: attachmentmarkerdump",t:"attachmentmarkerdump"},"2208":{i:0.00014152916780913,u:"../maestro_command_reference/attachmentmarkersettings.html",a:"Set graphical data of attachment markers.  Syntax: attachmentmarkersettings ambient= \u003cx\u003e blue= \u003cx\u003e cornradius= \u003cx\u003e cylinderheight= \u003cx\u003e cylinderradius= \u003cx\u003e diffuse= \u003cx\u003e drawstyle= line emission= \u003cx\u003e green= \u003cx\u003e linewidth= \u003cn\u003e reagentradius= \u003cx\u003e red= \u003cx\u003e selectblue= \u003cx\u003e selectgreen= \u003cx\u003e selectred= \u003cx\u003e ...",t:"attachmentmarkersettings"},"2209":{i:0.000141529163289653,u:"../maestro_command_reference/autosetup.html",a:"Performs the automatic setup for the conformational search. The setup is only performed on those atoms which match the ASL definition given in the operand.  Syntax: autosetup chiralatoms= yes | no compatoms= yes | no rings= yes | no torsionchecks= yes | no [\u003cASL\u003e ]\n Options: chiralatoms A boolean ...",t:"autosetup"},"2210":{i:0.000141529148812641,u:"../maestro_command_reference/beginundoblock.html",a:"beginundoblock Begin a new undoable command block.  Syntax: beginundoblock",t:"beginundoblock"},"2211":{i:0.000141529102089298,u:"../maestro_command_reference/bmincomfile.html",a:"bmincomfile Write a MacroModel command file with the current energy settings.  Syntax: bmincomfile",t:"bmincomfile"},"2212":{i:0.000141528951792284,u:"../maestro_command_reference/bond.html",a:"bond Create a new bond between two atoms or increments the bond order between two existing atoms.  Syntax: bond [\u003catom1\u003e \u003catom2\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e  The operands are the numbers of the two atoms which are to be connected by a bond or have the bond order of an existing bond incremented. ",t:"bond"},"2213":{i:0.000141528467707905,u:"../maestro_command_reference/bondlabel.html",a:"bondlabel Displays labels for the bonds specified by the ASL operand.  Syntax: bondlabel cindex= \u003cn\u003e compositionfields= \u003ctext\u003e mode= append | clear showfields= \u003ctext\u003e [\u003cASL\u003e ]\n Options: cindex An integer which indicates color index which is to be used for the bond labels. ",t:"bondlabel"},"2214":{i:0.000141526909492306,u:"../maestro_command_reference/bondlabelclear.html",a:"bondlabelclear Clears labels from the bonds specified by the ASL operand.  Syntax: bondlabelclear [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. All bonds which match this specification will have their labels removed. ",t:"bondlabelclear"},"2215":{i:0.000141521893011417,u:"../maestro_command_reference/bondorder.html",a:"Increment, decrement or set the bond order for the specified bond.  Syntax: bondorder [increment|decrement|\u003cbond_order\u003e \u003catom1\u003e \u003catom2\u003e ]\n Operands: increment|decrement|\u003cbond_order\u003e \u003catom1\u003e \u003catom2\u003e  The first operand is either the word \"increment\", the word \"decrement\", or an integer value ...",t:"bondorder"},"2216":{i:0.000141505744964559,u:"../maestro_command_reference/bondoutline.html",a:"Control features related to bond outlines  Syntax: bondoutline autoscale= yes | no fixedwidth= \u003cx\u003e largewidth= \u003cx\u003e mediumwidth= \u003cx\u003e smallwidth= \u003cx\u003e technique= 3pass usewhenmoving= automatic | always visibleatomcutoff= \u003cn\u003e whenmovingcutoff= \u003cn\u003e  Options: autoscale The width of the outline border is ...",t:"bondoutline"},"2217":{i:0.000141453764633098,u:"../maestro_command_reference/bondproplabel.html",a:"Turns the display of bond properties on or off. These properties are read from the structure file at run-time.  Syntax: bondproplabel display= yes | no [\u003cproperty display name\u003e ]\n Options: display A boolean option which determines if the bond property is to be displayed or not in the current label ...",t:"bondproplabel"},"2218":{i:0.000141286445743284,u:"../maestro_command_reference/bondrelabel.html",a:"bondrelabel Apply the current bond label format to all bonds which have a non-empty bond label format.  Syntax: bondrelabel",t:"bondrelabel"},"2219":{i:0.00014074787159896,u:"../maestro_command_reference/bondtonew.html",a:"Create a new atom and bond it with a single bond to an existing atom.  Syntax: bondtonew [\u003catom_num\u003e \u003cx\u003e \u003cy\u003e \u003cz\u003e ]\n Operands: \u003catom_num\u003e \u003cx\u003e \u003cy\u003e \u003cz\u003e  The first operand is the number of an existing atom from which the bond is to be drawn. The remaining three operands are the x, y and z coordinates at ...",t:"bondtonew"},"2220":{i:0.000139014302859489,u:"../maestro_command_reference/buildoptions.html",a:"Sets options associated with structure building. These are persistent and will be retained between Maestro sessions.  Syntax: buildoptions adjustbondlengths= yes | no adjustnumhydrogens= yes | no useunitedatoms= yes | no  Options: adjustbondlengths When an atom type is changed, bond lengths around ...",t:"buildoptions"},"2221":{i:0.000177912415916594,u:"../maestro_command_reference/calcenergy.html",a:"calcenergy Used to set options associated with a single point energy calculation.  Syntax: calcenergy listing= minimal | complete  Options: listing This option determines the extent of the listing of energy components. ",t:"calcenergy"},"2222":{i:0.00013901430285948,u:"../maestro_command_reference/calculateangle.html",a:"Measure bond angle between a triplet of atoms of all selected entries in the project. If any entry does not have associated atoms, then that entry is ignored.  Syntax: calculateangle [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e \u003cprop_name\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e \u003catom3\u003e \u003cprop_name\u003e  The three atoms between which ...",t:"calculateangle"},"2223":{i:0.000140747871598949,u:"../maestro_command_reference/calculatecoupling.html",a:"Meausre coupling between a pair of atoms of all selected entries in the project. If any entry does not have associated atoms, then that entry is ignored.  Syntax: calculatecoupling [\u003catom1\u003e \u003catom2\u003e \u003cprop_name\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e \u003cprop_name\u003e  The two hydrogen atoms between which the ...",t:"calculatecoupling"},"2224":{i:0.000141286445743193,u:"../maestro_command_reference/calculatedihedral.html",a:"Measure dihedral angle between a quartet of atoms of all selected entries in the project. If any entry does not have associated atoms, then that entry is ignored.  Syntax: calculatedihedral [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e \u003catom4\u003e \u003cprop_name\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e \u003catom3\u003e \u003catom4\u003e \u003cprop_name\u003e  The ...",t:"calculatedihedral"},"2225":{i:0.000141453764632947,u:"../maestro_command_reference/calculatedistance.html",a:"Measure distance between a pair of atoms of all selected entries in the project. If any entry does not have associated atoms, then that entry is ignored.  Syntax: calculatedistance [\u003catom1\u003e \u003catom2\u003e \u003cprop_name\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e \u003cprop_name\u003e  The two atoms between which the distance is to ...",t:"calculatedistance"},"2226":{i:0.000141505744963802,u:"../maestro_command_reference/cancelmoveatoms.html",a:"cancelmoveatoms Cancels the local transformation and restores the positions(xyz) of moved atoms.  Syntax: cancelmoveatoms",t:"cancelmoveatoms"},"2227":{i:0.000141521893009699,u:"../maestro_command_reference/canonicalname.html",a:"Sets atom names to one generated from atom properties (such as element or PDB names) for all the atoms matched by the ASL operand.  Syntax: canonicalname [\u003cseparator\u003e \u003coption_flag\u003e \u003cASL\u003e ]\n Operands: \u003cseparator\u003e \u003coption_flag\u003e \u003cASL\u003e  The first operand is the separator symbol to be used in generating ...",t:"canonicalname"},"2228":{i:0.000141526909485669,u:"../maestro_command_reference/caption.html",a:"caption Create a Workspace caption and select it  Syntax: caption",t:"caption"},"2229":{i:0.000141528467689414,u:"../maestro_command_reference/captionbackground.html",a:"captionbackground Caption backgroud settings  Syntax: captionbackground type= auto | none | user  Options: type Background caption type ",t:"captionbackground"},"2230":{i:0.000141528951729066,u:"../maestro_command_reference/captioncolor.html",a:"captioncolor Color of the caption text. Default color is yellow  Syntax: captioncolor alpha= \u003cx\u003e blue= \u003cx\u003e green= \u003cx\u003e red= \u003cx\u003e  Options: alpha Alpha component. 0 is invisible. 1 is opaque. ",t:"captioncolor"},"2231":{i:0.000141529101895008,u:"../maestro_command_reference/captiondelete.html",a:"captiondelete Delete the selected captions.  Syntax: captiondelete",t:"captiondelete"},"2232":{i:0.000141529148176614,u:"../maestro_command_reference/captiondeleteall.html",a:"captiondeleteall Delete all the existing captions.  Syntax: captiondeleteall",t:"captiondeleteall"},"2233":{i:0.000141529161265664,u:"../maestro_command_reference/captionfont.html",a:"captionfont Font settings for the caption  Syntax: captionfont name= \u003ctext\u003e size= \u003cx\u003e style= bold | italic | italicbold  Options: name Font name for the caption (helvetica, etc.) ",t:"captionfont"},"2234":{i:0.000141529161265705,u:"../maestro_command_reference/captionhide.html",a:"captionhide Hide the caption  Syntax: captionhide",t:"captionhide"},"2235":{i:0.000141529148176666,u:"../maestro_command_reference/captionposition.html",a:"captionposition Position of the caption.  Syntax: captionposition x= \u003cx\u003e y= \u003cx\u003e  Options: x Left-side X position of the caption. A fraction from zero to one. X origin is left-hand side of the window. ",t:"captionposition"},"2236":{i:0.00014152910189536,u:"../maestro_command_reference/captionselect.html",a:"captionselect Select only the named caption  Syntax: captionselect",t:"captionselect"},"2237":{i:0.000141528951729789,u:"../maestro_command_reference/captionselectadd.html",a:"captionselectadd Add the named caption to the selected captions  Syntax: captionselectadd",t:"captionselectadd"},"2238":{i:0.000141528467692409,u:"../maestro_command_reference/captionshow.html",a:"captionshow Show the caption  Syntax: captionshow",t:"captionshow"},"2239":{i:0.000141526909493775,u:"../maestro_command_reference/captionsoff.html",a:"captionsoff Hide all captions but leave their visible state alone.  Syntax: captionsoff",t:"captionsoff"},"2240":{i:0.000141521893037917,u:"../maestro_command_reference/captionson.html",a:"captionson Display all captions which are visible  Syntax: captionson",t:"captionson"},"2241":{i:0.000141505745050092,u:"../maestro_command_reference/captiontext.html",a:"captiontext Text for the caption to be displayed in the Workspace  Syntax: captiontext",t:"captiontext"},"2242":{i:0.000141453764916222,u:"../maestro_command_reference/captionunselect.html",a:"captionunselect Unselect the specifiecd caption  Syntax: captionunselect",t:"captionunselect"},"2243":{i:0.000141286446644676,u:"../maestro_command_reference/captionunselectall.html",a:"captionunselectall Unselect all captions  Syntax: captionunselectall",t:"captionunselectall"},"2244":{i:0.00014074787451297,u:"../maestro_command_reference/carbonrgbcolorscheme.html",a:"carbonrgbcolorscheme Apply a predefined carbon color scheme to the group of atoms defined by the ASL spec.  Syntax: carbonrgbcolorscheme carbonrgbscheme= \u003ctext\u003e [\u003cASL\u003e ]\n Options: carbonrgbscheme The name of the carbon color scheme. ",t:"carbonrgbcolorscheme"},"2245":{i:0.000139014312223944,u:"../maestro_command_reference/cascadepanels.html",a:"cascadepanels Cascade visible panels  Syntax: cascadepanels",t:"cascadepanels"},"2246":{i:0.000177912456143854,u:"../maestro_command_reference/cd.html",a:"cd This is a standard alias for  changedirectory .",t:"cd"},"2247":{i:0.000139014251024045,u:"../maestro_command_reference/centeratom.html",a:"centeratom Set global center of rotation to the given atom  Syntax: centeratom atom= \u003cn\u003e  Options: atom Atom to center transformations on ",t:"centeratom"},"2248":{i:0.000140747658497602,u:"../maestro_command_reference/centerbond.html",a:"centerbond Set global center of rotation to the given bond  Syntax: centerbond at1= \u003cn\u003e at2= \u003cn\u003e  Options: at1 Atom1 of bond to be center of transformation ",t:"centerbond"},"2249":{i:0.000141285745160289,u:"../maestro_command_reference/centercoordinates.html",a:"centercoordinates Set global center of rotation to the given coordinate  Syntax: centercoordinates x= \u003cx\u003e y= \u003cx\u003e z= \u003cx\u003e  Options: x X center ",t:"centercoordinates"},"2250":{i:0.00014145150478459,u:"../maestro_command_reference/centroid.html",a:"centroid This command takes the previously defined centroid atoms, averages the x, y, z co-ordinates and then creates a new atom of type 61 at the average position.  Syntax: centroid",t:"centroid"},"2251":{i:0.000141498468339071,u:"../maestro_command_reference/centroidatom.html",a:"centroidatom Define a single atom which will be used to define the centroid. Associated with this atom is a single atom marker.  Syntax: centroidatom [\u003catom_num\u003e ]\n Operands: \u003catom_num\u003e  The number of the atom to be used to define the centroid. ",t:"centroidatom"},"2252":{i:0.000141498468339071,u:"../maestro_command_reference/centroidatomset.html",a:"centroidatomset Specifies a set of atoms to be added to the current centroid definition.  Syntax: centroidatomset [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language which describes the set of atoms which are to be added to the current centroid definition. ",t:"centroidatomset"},"2253":{i:0.00014145150478459,u:"../maestro_command_reference/cglidedockconstraintmetalcoord.html",a:"Specifies a constraint metal coordination in the receptor for a Glide calculation.  Syntax: cglidedockconstraintmetalcoord feature= \u003cn\u003e geometry= sqplan | tetra | trigbipyr | octa | hexplan handle= \u003cn\u003e index= \u003cn\u003e radius= \u003cx\u003e type= \u003cn\u003e use= yes | no use1= yes | no use2= yes | no use3= yes | no use4= ...",t:"cglidedockconstraintmetalcoord"},"2254":{i:0.000141285745160289,u:"../maestro_command_reference/cglidedockconstraintposition.html",a:"Specifies a constraint position in the receptor for a Glide calculation.  Syntax: cglidedockconstraintposition feature= \u003cn\u003e index= \u003cn\u003e radius= \u003cx\u003e radiusnoe= \u003cx\u003e type= \u003cn\u003e use1= yes | no use2= yes | no use3= yes | no use4= yes | no usenoe= yes | no x= \u003cx\u003e y= \u003cx\u003e z= \u003cx\u003e  Options: feature The ...",t:"cglidedockconstraintposition"},"2255":{i:0.000140747658497602,u:"../maestro_command_reference/cglidedockconstraintregion.html",a:"Specifies a constraint region in the receptor for a Glide calculation.  Syntax: cglidedockconstraintregion atoms= \u003cn\u003e feature= \u003cn\u003e index= \u003cn\u003e type= \u003cn\u003e use1= yes | no use2= yes | no use3= yes | no use4= yes | no [\u003cregion_name\u003e ]\n Options: atoms The number of required ligand atoms of constraint ...",t:"cglidedockconstraintregion"},"2256":{i:0.000139014251024045,u:"../maestro_command_reference/chainname.html",a:"Set the chain name for all atoms which match the ASL specification.  Syntax: chainname [\u003cCHAINNAME\u003e \u003cASL\u003e ]\n Operands: \u003cCHAINNAME\u003e \u003cASL\u003e  The first operand is the PDB chain name (a single character) that will be used for all atoms which match the specification. The second operand is a valid ASL ...",t:"chainname"},"2257":{i:0.000177912456143854,u:"../maestro_command_reference/changedirectory.html",a:"changedirectory Change the current directory to that given by the operand of this command.  Syntax: changedirectory [\u003cnew_directory\u003e ]\n Operands: \u003cnew_directory\u003e  The name of the directory to be made the current directory.  Aliases:\n\n cd , \n chdir",t:"changedirectory"},"2258":{i:0.000139014312223954,u:"../maestro_command_reference/chdir.html",a:"chdir This is a standard alias for  changedirectory .",t:"chdir"},"2259":{i:0.000140747874512981,u:"../maestro_command_reference/chiralatom.html",a:"chiralatom Specifies an atom which is to be marked as \"chiral\" in the conformational search  Syntax: chiralatom [\u003catom_number\u003e ]\n Operands: \u003catom_number\u003e  The number of an atom which is to be added to the list of atoms which are to be considered as chiral in the conformational search. ",t:"chiralatom"},"2260":{i:0.000141286446644767,u:"../maestro_command_reference/cistrans.html",a:"cistrans Perform a cis/trans inter-conversion of the double bond which contains the specified atom.  Syntax: cistrans [\u003catom1\u003e \u003catom2\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e  The atom which defines the double bond to have the cis/trans inter-conversion done. ",t:"cistrans"},"2261":{i:0.000141453764916373,u:"../maestro_command_reference/clip.html",a:"Adjust the clipping planes  Syntax: clip back= \u003cx\u003e backselect= \u003cx\u003e backsurface= \u003cx\u003e boxoffset= \u003cx\u003e front= \u003cx\u003e frontselect= \u003cx\u003e frontsurface= \u003cx\u003e leftslopesurface= \u003cx\u003e leftsurface= \u003cx\u003e objects= surfaces | surfacesselected | selected rightslopesurface= \u003cx\u003e rightsurface= \u003cx\u003e  Options: back Position at ...",t:"clip"},"2262":{i:0.000141505745050849,u:"../maestro_command_reference/clipatomset.html",a:"clipatomset Syntax: clipatomset [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. This set defines clipping atoms for clipping atoms. ",t:"clipatomset"},"2263":{i:0.000141521893039635,u:"../maestro_command_reference/clipsurfaceset.html",a:"clipsurfaceset Syntax: clipsurfaceset [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. This set defines clipping atoms for clipping surfaces. ",t:"clipsurfaceset"},"2264":{i:0.000141526909500412,u:"../maestro_command_reference/cliptoallatoms.html",a:"cliptoallatoms Move clipping planes to all atoms.  Syntax: cliptoallatoms",t:"cliptoallatoms"},"2265":{i:0.0001415284677109,u:"../maestro_command_reference/cliptoligand.html",a:"cliptoligand Move clipping planes to ligand atoms.  Syntax: cliptoligand",t:"cliptoligand"},"2266":{i:0.000141528951793007,u:"../maestro_command_reference/cliptoselectedatoms.html",a:"cliptoselectedatoms Move clipping planes to selected atoms.  Syntax: cliptoselectedatoms",t:"cliptoselectedatoms"},"2267":{i:0.00014152910208965,u:"../maestro_command_reference/color.html",a:"color Specifies a color or set color options.  Syntax: color alpha= \u003cn\u003e blue= \u003cn\u003e green= \u003cn\u003e red= \u003cn\u003e  Options: alpha Alpha color component. ",t:"color"},"2268":{i:0.000141529148812698,u:"../maestro_command_reference/coloratom.html",a:"coloratom Set the color for a group of atoms defined by the ASL operand.  Syntax: coloratom cindex= \u003cn\u003e color= \u003ctext\u003e [\u003cASL\u003e ]\n Options: cindex An integer which indicates color index which is to be used for the atoms ",t:"coloratom"},"2269":{i:0.000141529163289697,u:"../maestro_command_reference/coloratombonds.html",a:"coloratombonds Set the color of all bonds, specified in ASL Change the color used to draw an on-screen bond.  Syntax: coloratombonds [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. ",t:"coloratombonds"},"2270":{i:0.000141529167809134,u:"../maestro_command_reference/coloratomrgb.html",a:"coloratomrgb Set the color for a group of atoms defined by the ASL operand.  Syntax: coloratomrgb blue= \u003cn\u003e green= \u003cn\u003e red= \u003cn\u003e [\u003cASL\u003e ]\n Options: blue Blue color component. ",t:"coloratomrgb"},"2271":{i:0.000141529169197095,u:"../maestro_command_reference/colorbond.html",a:"colorbond Set the color of a bond, specified by two atoms Change the color used to draw an on-screen bond.  Syntax: colorbond cindex= \u003cn\u003e color= \u003ctext\u003e reset= yes | no [\u003catom1\u003e \u003catom2\u003e ]\n Options: cindex An integer which indicates color index which is to be used for bond coloring. ",t:"colorbond"},"2272":{i:0.000141529169638832,u:"../maestro_command_reference/colorscheme.html",a:"colorscheme Apply a predefined color scheme to the group of atoms defined by the ASL spec.  Syntax: colorscheme scheme= \u003ctext\u003e [\u003cASL\u003e ]\n Options: scheme The name of the current color scheme. ",t:"colorscheme"},"2273":{i:0.000141529169769905,u:"../maestro_command_reference/combilibenum.html",a:"combilibenum Start the job of Combinatorial Library Enumeration.  Syntax: combilibenum",t:"combilibenum"},"2274":{i:0.000141529169814632,u:"../maestro_command_reference/combilibenumaddattachment.html",a:"combilibenumaddattachment Adds an attachment to the core molecule using the given atoms.  Syntax: combilibenumaddattachment atom1= \u003cn\u003e atom2= \u003cn\u003e [\u003cattachment name\u003e ]\n Options: atom1 The atom number of the atom in the original core to set as an attachment point. This is the atom which will be kept. ",t:"combilibenumaddattachment"},"2275":{i:0.000141529169826485,u:"../maestro_command_reference/combilibenumclearreagentfile.html",a:"combilibenumclearreagentfile Clears the reagent file for the selected rows.  Syntax: combilibenumclearreagentfile",t:"combilibenumclearreagentfile"},"2276":{i:0.000141529169831404,u:"../maestro_command_reference/combilibenumdeleteattachment.html",a:"combilibenumdeleteattachment Deletes all of the selected attachments.  Syntax: combilibenumdeleteattachment",t:"combilibenumdeleteattachment"},"2277":{i:0.000141529169832364,u:"../maestro_command_reference/combilibenumexportdefinition.html",a:"combilibenumexportdefinition Stores the current core molecule and attachments in a file.  Syntax: combilibenumexportdefinition [\u003cfile name\u003e ]\n Operands: \u003cfile name\u003e  The name of the file to store the core definition in. ",t:"combilibenumexportdefinition"},"2278":{i:0.000141529169832972,u:"../maestro_command_reference/combilibenumimportdefinition.html",a:"combilibenumimportdefinition Reads a core molecule and attachments from the given file.  Syntax: combilibenumimportdefinition [\u003cfile name\u003e ]\n Operands: \u003cfile name\u003e  The name of the file to read the core definition from. ",t:"combilibenumimportdefinition"},"2279":{i:0.000141529169833031,u:"../maestro_command_reference/combilibenumoptions.html",a:"combilibenumoptions This command holds general options for Combinatorial Library Enumeration.  Syntax: combilibenumoptions untangle= yes | no  Options: untangle An option which allows post-combgen minimization (for library enumeration). ",t:"combilibenumoptions"},"2280":{i:0.000141529169833111,u:"../maestro_command_reference/combilibenumrefreshstructure.html",a:"This function refreshes the structure in the Workspace from the current core structure in CombiGlide.  Syntax: combilibenumrefreshstructure viewcappedcore= yes | no  Options: viewcappedcore An option which allows viewing of the minimally capped core, rather than the original core, in the Workspace. ",t:"combilibenumrefreshstructure"},"2281":{i:0.000141529169833112,u:"../maestro_command_reference/combilibenumrenameattachment.html",a:"combilibenumrenameattachment Renames the attachment in CombiLibEnum to the new name.  Syntax: combilibenumrenameattachment row= \u003cn\u003e [\u003cnew name\u003e ]\n Options: row The row to rename. ",t:"combilibenumrenameattachment"},"2282":{i:0.000141529169833122,u:"../maestro_command_reference/combilibenumselectextendtablerow.html",a:"combilibenumselectextendtablerow Extends the selection to this row in the attachments table in the CombiGlide Library Enumeration.  Syntax: combilibenumselectextendtablerow [\u003crow\u003e ]\n Operands: \u003crow\u003e  The row number to extend the select to. ",t:"combilibenumselectextendtablerow"},"2283":{i:0.000141529169833121,u:"../maestro_command_reference/combilibenumselectonlytablerow.html",a:"combilibenumselectonlytablerow Selects only this row in the attachments table in the CombiGlide Library Enumeration.  Syntax: combilibenumselectonlytablerow [\u003crow\u003e ]\n Operands: \u003crow\u003e  The row number to select only in the table row. ",t:"combilibenumselectonlytablerow"},"2284":{i:0.000141529169833122,u:"../maestro_command_reference/combilibenumselecttablerow.html",a:"combilibenumselecttablerow Selects the given row in the attachments table in the CombiGlide Library Enumeration.  Syntax: combilibenumselecttablerow [\u003crow\u003e ]\n Operands: \u003crow\u003e  The row number to select in the table. ",t:"combilibenumselecttablerow"},"2285":{i:0.000141529169833122,u:"../maestro_command_reference/combilibenumsetmolecule.html",a:"combilibenumsetmolecule Sets the core molecule for the CombiLibEnum to the molecule containing the given atom.  Syntax: combilibenumsetmolecule title= \u003ctext\u003e [\u003catom number\u003e ]\n Options: title This option sets the title for the core molecule. ",t:"combilibenumsetmolecule"},"2286":{i:0.000141529169833122,u:"../maestro_command_reference/combilibenumsetreagentfile.html",a:"combilibenumsetreagentfile Sets the reagent file for the selected rows.  Syntax: combilibenumsetreagentfile [\u003creagent name\u003e ]\n Operands: \u003creagent name\u003e  The name of the reagent file. ",t:"combilibenumsetreagentfile"},"2287":{i:0.000141529169833122,u:"../maestro_command_reference/combilibenumunselecttablerow.html",a:"combilibenumunselecttablerow Unselects the given row in the attachments table in the CombiGlide Library Enumeration.  Syntax: combilibenumunselecttablerow [\u003crow\u003e ]\n Operands: \u003crow\u003e  The row number to unselect in the table. ",t:"combilibenumunselecttablerow"},"2288":{i:0.000141529169833122,u:"../maestro_command_reference/compareatom.html",a:"Defines a single comparison atom to be used during a multiple minimization or conformational search. Comparison atoms are used to make comparisons in the process of determining if conformers are unique.  Syntax: compareatom [\u003catom\u003e ]\n Operands: \u003catom\u003e  The number of an atom which is to added to the ...",t:"compareatom"},"2289":{i:0.000141529169833122,u:"../maestro_command_reference/compareset.html",a:"Specifies a set of atoms to be used in comparisons of conformers during a multiple minimization or conformational search.  Syntax: compareset [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. All atoms which match this description will be added to the list of comparison atoms. ",t:"compareset"},"2290":{i:0.000141529169833122,u:"../maestro_command_reference/confelim.html",a:"This keyword is used to set various options associated with starting Redundant Conformer Elimination jobs from Maestro.  Syntax: confelim compare_in_place= yes | no energy_source= jaguar | mm2* | mm3* | amber* | opls* | amber94 | mmff | mmffs | oplsaa | opls2005 | opls2008 incorporate= replace | ...",t:"confelim"},"2291":{i:0.000141529169833122,u:"../maestro_command_reference/confelimstart.html",a:"confelimstart Start a Redundant Conformer Elimination job with the current settings.  Syntax: confelimstart",t:"confelimstart"},"2292":{i:0.000141529169833122,u:"../maestro_command_reference/confelimwrite.html",a:"confelimwrite Write a Redundant Conformer Elimination input file with the current settings.  Syntax: confelimwrite",t:"confelimwrite"},"2293":{i:0.000141529169833122,u:"../maestro_command_reference/confgenltsearch.html",a:"Defines settings for ConfGen conformational searching in MacroModel.  Syntax: confgenltsearch amidebonds= retain | trans compareatoms= heavy | heavy_polar_h distinguishenantiomers= yes | no eliminate= rmsd enhancedplanarity= yes | no limitsave= yes | no max_rmsd= \u003cx\u003e maxdist= \u003cx\u003e maxringconf= \u003cn\u003e ...",t:"confgenltsearch"},"2294":{i:0.000141529169833122,u:"../maestro_command_reference/confgenmini.html",a:"Used to set values associated with a MacroModel energy minimization for Ligand Torsional Search (ConfGen)  Syntax: confgenmini converge= energy | gradient | movement method= prcg | osvm | fmnr | tncg | lbfgs | optimal postmaxiter= \u003cn\u003e premaxiter= \u003cn\u003e threshold= \u003cx\u003e  Options: converge This option ...",t:"confgenmini"},"2295":{i:0.000141529169833122,u:"../maestro_command_reference/confgenpotential.html",a:"Set various options associated with the definition of the potential energy to be used in a MacroModel job.  Syntax: confgenpotential cele= \u003cx\u003e charges= structure_file chnd= \u003cx\u003e cutoff= extended | user_defined | none cvdw= \u003cx\u003e dielectric= \u003cx\u003e electrostatics= constant | distance_dependant field= mm3* ...",t:"confgenpotential"},"2296":{i:0.000141529169833122,u:"../maestro_command_reference/confgenreadpotential.html",a:"confgenreadpotential Read potential settings from a command file.  Syntax: confgenreadpotential [\u003cfile_name\u003e ]\n Operands: \u003cfile_name\u003e  The name of the file from which the potential settings will be read. If no name is specified, the default settings will be used. ",t:"confgenreadpotential"},"2297":{i:0.000141529169833122,u:"../maestro_command_reference/confgenstart.html",a:"confgenstart Start a Conformer Generation (Ligand Torsion Search) job with the current settings.  Syntax: confgenstart",t:"confgenstart"},"2298":{i:0.000141529169833122,u:"../maestro_command_reference/confgenstd.html",a:"confgenstd Launches a Standard ConfGen job.  Syntax: confgenstd",t:"confgenstd"},"2299":{i:0.000141529169833122,u:"../maestro_command_reference/confgenstdsettings.html",a:"Used to set values associated with a Standard ConfGen job.  Syntax: confgenstdsettings field= opls_ff16 minimize_input= yes | no minimize_output= yes | no strategy= fast | intermediate | comprehensive | fast_cf | phase_fast | phase_quality | combined structure_file= \u003ctext\u003e structure_source= ...",t:"confgenstdsettings"},"2300":{i:0.000141529169833122,u:"../maestro_command_reference/confgenstdwrite.html",a:"confgenstdwrite Write out the Standard ConfGen job files.  Syntax: confgenstdwrite",t:"confgenstdwrite"},"2301":{i:0.000141529169833122,u:"../maestro_command_reference/confgenwrite.html",a:"confgenwrite Write a Conformer Generation (Ligand Torsion Search) input file with the current settings.  Syntax: confgenwrite",t:"confgenwrite"},"2302":{i:0.000141529169833122,u:"../maestro_command_reference/confsearch.html",a:"Defines settings for conformational searching in MacroModel.  Syntax: confsearch distinguishenatiomers= yes | no eliminate= rmsd enableauto= yes | no max_distance_lmcs= \u003cx\u003e max_rmsd= \u003cx\u003e maxdist= \u003cx\u003e method= serial_mcmm | summ | mixed_lmcs | serial_mcmm_lmcs | pure_lmcs | serial_lmcs | large_lmcs | ...",t:"confsearch"},"2303":{i:0.000141529169833122,u:"../maestro_command_reference/connect.html",a:"connect Connect atom pairs.  Syntax: connect",t:"connect"},"2304":{i:0.000141529169833122,u:"../maestro_command_reference/connectfuseatom.html",a:"Define an atom pair for which will be connected in a subsequent connect operation.  Syntax: connectfuseatom [\u003catom1\u003e \u003catom2\u003e ]\n Operands: \u003catom1\u003e \u003catom2\u003e  Two atom numbers which represent an atom pair to be connected by a subsequent connect or fuse command. The two atoms must be from different ...",t:"connectfuseatom"},"2305":{i:0.000141529169833122,u:"../maestro_command_reference/constrainedangle.html",a:"Specifies a angle between three atoms which is to be constrained by a harmonic constraint during a MacroModel calculation.  Syntax: constrainedangle angle= \u003cx\u003e constant= \u003cx\u003e select= yes | no width= \u003cx\u003e [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e ]\n Options: angle The angle at which the atoms are to be constrained. ",t:"constrainedangle"},"2306":{i:0.000141529169833121,u:"../maestro_command_reference/constrainedatom.html",a:"Specifies a single atom to be constrained at its current positions during a MacroModel energy calculation. The atom will be constrained by the use of a harmonic constraint.  Syntax: constrainedatom constant= \u003cx\u003e frozen= yes | no select= yes | no width= \u003cx\u003e [\u003catom_number\u003e ]\n Options: constant The ...",t:"constrainedatom"},"2307":{i:0.000141529169833122,u:"../maestro_command_reference/constraineddist.html",a:"Specifies a distance between two atoms which is to be constrained by a harmonic constraint during a MacroModel calculation.  Syntax: constraineddist constant= \u003cx\u003e distance= \u003cx\u003e remove_nb= yes | no select= yes | no width= \u003cx\u003e [\u003catom1\u003e \u003catom2\u003e ]\n Options: constant The force constant for the harmonic ...",t:"constraineddist"},"2308":{i:0.000141529169833112,u:"../maestro_command_reference/constrainedset.html",a:"constrainedset Specifies a set of atoms to be constrained at their current positions. The atoms will be constrained by the use of a harmonic constraint.  Syntax: constrainedset constant= \u003cx\u003e width= \u003cx\u003e [\u003cASL\u003e ]\n Options: constant The force constant (in kJ/mol/Angs) for the harmonic constraint. ",t:"constrainedset"},"2309":{i:0.000141529169833111,u:"../maestro_command_reference/constrainedtorsion.html",a:"Specifies a torsion between four atoms which is to be constrained by a harmonic constraint during a MacroModel calculation.  Syntax: constrainedtorsion constant= \u003cx\u003e select= yes | no torsion= \u003cx\u003e width= \u003cx\u003e [\u003catom1\u003e \u003catom2\u003e \u003catom3\u003e \u003catom4\u003e ]\n Options: constant The force constant for the harmonic ...",t:"constrainedtorsion"},"2310":{i:0.000141529169833031,u:"../maestro_command_reference/contactcriteria.html",a:"Specify the criteria for calculating good, bad, ugly contacts. There is no upper-bound to C. C = {dist between the two atoms} divided by {vdW radius first atom + vdW radius of second atom}.  Syntax: contactcriteria bad= \u003cx\u003e display= yes | no displaybad= yes | no displaygood= yes | no displayugly= ...",t:"contactcriteria"},"2311":{i:0.000141529169832972,u:"../maestro_command_reference/contactset1.html",a:"Specify the first set of atoms used in determining good, bad, and ugly contacts.  Syntax: contactset1 [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. Typical usage is to define contactset1 and contactset2. This set, contactset1, defines the \"from\" atoms. The contactset2 atoms ...",t:"contactset1"},"2312":{i:0.000141529169832364,u:"../maestro_command_reference/contactset2.html",a:"Specify the second set of atoms used in determining good, bad, and ugly contacts.  Syntax: contactset2 [\u003cASL\u003e ]\n Operands: \u003cASL\u003e  A string in the atom specification language. Typical usage is to define contactset1 and contactset2. This set, contactset2, defines the \"to\" atoms. The contactset1 atoms ...",t:"contactset2"},"2313":{i:0.000141529169831404,u:"../maestro_command_reference/coordinatescan.html",a:"Used to set a distance or angle or dihedral coordinate to be scanned. The four operands are the atom numbers defining the dihedral to be driven. A maximum of two angles can be driven. The four operands are the atom numbers defining the coordinate. Depending on the type of scan coordiante set in ...",t:"coordinatescan"},"2314":{i:0.000141529169826485,u:"../maestro_command_reference/copyentryproperties.html",a:"Copy properties of given entry id. If copyoption is set to all , then copy all properties, otherwise copy shown properties, and hold these for subsequent paste properties action.  Syntax: copyentryproperties copyoption= all [\u003centry_id\u003e ]\n Options: copyoption Determines whether to copy shown ...",t:"copyentryproperties"},"2315":{i:0.000141529169814632,u:"../maestro_command_reference/coupling.html",a:"Specifies a pair of atoms to have their coupling measured and displayed.  Syntax: coupling xoffset= \u003cx\u003e yoffset= \u003cx\u003e [\u003catom1\u003e \u003catom2\u003e ]\n Options: xoffset Specifies the X offset in Angstroms. Any coupling created after this value is set will use this new value. Can be applied to an existing ...",t:"coupling"},"2316":{i:0.000141529169769905,u:"../maestro_command_reference/createcustompropertygroup.html",a:"This command creates a custom property group for the given space separated property names.  Syntax: createcustompropertygroup [\u003cpropertygroupname\u003e \u003cpropertynames\u003e ]\n Operands: \u003cpropertygroupname\u003e \u003cpropertynames\u003e  The name of the custom property group. The space separated property names use to create ...",t:"createcustompropertygroup"},"2317":{i:0.000141529169638832,u:"../maestro_command_reference/createlibrary.html",a:"createlibrary Start the creation of the library in the Analyse Library step of CombiGlide.  Syntax: createlibrary",t:"createlibrary"},"2318":{i:0.000141529169197096,u:"../maestro_command_reference/createmetalzeroorderbonds.html",a:"createmetalzeroorderbonds Create zero-order bonds to metals  Syntax: createmetalzeroorderbonds",t:"createmetalzeroorderbonds"},"2319":{i:0.000141529167809136,u:"../maestro_command_reference/createpropsubset.html",a:"This command creates a property subset for the given table using the given property names.  Syntax: createpropsubset [\u003ctable\u003e \u003cpropertynames\u003e ]\n Operands: \u003ctable\u003e \u003cpropertynames\u003e  The number of the table to create the subset for. If the table operand is missing, no resize will be done. The names of ...",t:"createpropsubset"},"2320":{i:0.000141529163289705,u:"../maestro_command_reference/createsubset.html",a:"createsubset Creates a subset in the project table using the currently selected entries. This function also switches to subset view.  Syntax: createsubset",t:"createsubset"},"2321":{i:0.000141529148812719,u:"../maestro_command_reference/createzeroorderbonds.html",a:"createzeroorderbonds Create or modify zero-order bonds to metals  Syntax: createzeroorderbonds",t:"createzeroorderbonds"},"2322":{i:0.00014152910208973,u:"../maestro_command_reference/crystalmakep1.html",a:"crystalmakep1 Generates the new model that encompasses the supercell as P1.  Syntax: crystalmakep1",t:"crystalmakep1"},"2323":{i:0.000141528951793212,u:"../maestro_command_reference/crystalperiodicstructure.html",a:"Generate crystal periodic structure based on asymmetric unit structure in workspace. This command may modify the original asymmetric unit structure. If ESL expression is specified, only entries in the expression that are included in workspace will be affected. Otherwise, the command will affect all ...",t:"crystalperiodicstructure"},"2324":{i:0.000141528467711639,u:"../maestro_command_reference/crystalpolyhedrons.html",a:"crystalpolyhedrons This keyword is used to set options associated with the crystal polyhedrons representation.  Syntax: crystalpolyhedrons color= \u003ctext\u003e opacity= \u003cx\u003e showmarker= yes | no  Options: color A string which is a 6-hexadecimal-digit RGB string for the color of the polyhedrons. ",t:"crystalpolyhedrons"},});