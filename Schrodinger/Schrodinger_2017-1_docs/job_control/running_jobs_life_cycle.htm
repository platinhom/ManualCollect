<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="Documentation.xml" data-mc-path-to-help-system="../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Installation and Jobs|Job Control Guide|Running Jobs">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>The Job Life Cycle</title>
        <link href="../Resources/Stylesheets/docs.css" rel="stylesheet" />
        <script src="../Resources/Scripts/custom.modernizr.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/require.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/require.config.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/foundation.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/plugins.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body><a name="aanchor8626"></a>
        <MadCap:concept term="Installation/Jobs" /><a name="aanchor8627"></a>
        <MadCap:concept term="Installation and Jobs" /><a name="running_jobs_2725597_744377"></a>
        <table class="NavLink" data-mc-conditions="Default.ScreenOnly">
            <tr class="NavLink">
                <td class="NavLeft"><span class="NavText">◀ <a href="running_jobs.htm#running_jobs_2725597_754833" class="NavLink MCXref xref xrefNavLink" xrefformat="{paratext}">Running Jobs</a></span>
                </td>
                <td class="NavCenter"><span class="NavText"><a class="NavLink MCXref xref xrefNavLink" href="job_controlTOC.htm#job_controltoc_4099964329_71112" xrefformat="{paratext}">Job Control Guide</a></span>
                </td>
                <td class="NavRight"><span class="NavText"><a href="running_jobs_command_line.htm#running_jobs_2725597_747198" class="NavLink MCXref xref xrefNavLink" xrefformat="{paratext}">Running Jobs From the Command Line</a> ▶</span>
                </td>
            </tr>
        </table>
        <h1 class="Title">The Job Life Cycle</h1>
        <p>To understand how information is obtained and passed on by Job Control, it is useful to have an understanding of how Schrödinger jobs are run. The “life cycle” of a job can be summarized as follows.</p>
        <table class="AutoNumber_p_Numbered1" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>1.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="1.">A top-level script is run locally (on the <i>submission host</i>). This script parses command-line arguments relating to Job Control and sets some environment variables.</td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>2.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="2.">The top-level script then runs the startup script for the program locally. This script parses the command arguments for the program, and assembles information on input and output files for the program. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>3.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="3.">The startup script then runs a job launch script locally, called <code>jlaunch</code>. This script assigns a job ID, creates a record in the job database, and populates it with initial values. It also verifies that the required input files exist. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>4.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="4.">If the job is to be run on a remote host, <code>jlaunch</code> starts a script locally, called <code>jserver</code>, that sets up a socket connection to the remote host that can be used for file transfer. For local jobs, <code>jserver</code> is also started, but it does not need to manage file transfer, only the interaction with the job database. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>5.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="5.">The job launch script then runs a script on the execution host to start the actual program. This script is called <code>jmonitor</code>. If the job is remote, it copies input files to the execution host using the connection established by <code>jserver</code>, runs the program, and copies output files back to the submission host. The program itself is responsible for checking in and checking out licenses. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>6.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="6.">The job launch script takes care of cleanup and incorporation into a Maestro project, if required, and updates the job record with the final status. </td>
            </tr>
        </table>
        <p>If you submit a job to a batch queue, there are some extra tasks that need to be performed. The life cycle of a batch job is as follows. </p>
        <table class="AutoNumber_p_Numbered1" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>1.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="1.">A top-level script is run locally (on the <i>submission host</i>). This script parses command-line arguments relating to Job Control and sets some environment variables. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>2.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="2.">The top-level script then runs the startup script for the program locally. This script parses the command arguments for the program, and assembles information on input and output files for the program. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>3.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="3.">The startup script then runs a job launch script locally, called <code>jlaunch</code>. This script creates a record in the job database and populates it with initial values. It also creates a batch script for the job and submits this script to the queue. </td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>4.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="4.">The job launch script starts a script locally, called <code>jserver</code>, that sets up a connection to the queue manager that can be used for file transfer. By default, this connection is an SSH tunnel, but if secure transfer is not in effect, a socket connection is used. Another <code>jserver</code> process is started on the queue manager (or other designated host) that sets up connections to the compute nodes when the queued jobs are started. This process acts as a proxy for the file transfer, and is done because it is not always possible to connect directly from the submission host to the compute nodes. This instance of <code>jserver</code> is also known as a <code>jproxy</code> process.</td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>5.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="5.">When the queued job is started on an execution host (a cluster node, for example), it runs <code>jmonitor</code>. <code>jmonitor</code> then copies input files to the execution host, runs the program (which checks out and checks in licenses), and copies output files back to the submission host. The copying is done via the SSH tunnel or the sockets opened by <code>jserver</code> processes on the manager node and the submission host. If the queue has license checking, the queueing software checks for license availability. See <a class="TopicLink MCXref xref xrefTopicLink" href="../install_guide/batch_queue.htm#batch_queue_1876641381_76138" xrefformat="{paratext}">Preparing for Batch Queue Submission</a> for information on setting up license checking.</td>
            </tr>
        </table>
        <table class="AutoNumber_p_Numbered1_" style="width: 100%; margin-left: 0;" cellspacing="0" cellpadding="0">
            <col style="width: 0px;" />
            <col style="width: 32px;" />
            <col style="width: auto;" />
            <tr>
                <td valign="top" />
                <td class="AutoNumber_p_Numbered1" valign="top"><span>6.</span>
                </td>
                <td class="AutoNumber_p_Numbered1" valign="top" data-mc-autonum="6.">The job launch script takes care of cleanup and incorporation into a Maestro project, if required, and updates the job record with the final status. </td>
            </tr>
        </table>
        <p>Jobs that are distributed over multiple processors usually have a script that manages the distribution of subjobs to the individual processors. Each subjob is then executed by <code>jmonitor</code>.</p>
    </body>
</html>