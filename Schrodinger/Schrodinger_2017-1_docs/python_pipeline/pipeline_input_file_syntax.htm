<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="Documentation.xml" data-mc-path-to-help-system="../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Command References|Python Pipeline Command Reference|The Python Pipeline Input File">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>Pipeline Input File Syntax</title>
        <link href="../Resources/TableStyles/StandardRules.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../Resources/Stylesheets/docs.css" rel="stylesheet" />
        <script src="../Resources/Scripts/custom.modernizr.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/require.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/require.config.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/foundation.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/plugins.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body><a name="aanchor1216"></a>
        <MadCap:concept term="Command Reference" /><a name="pipeline_input_file_872746276_744059"></a>
        <table class="NavLink" data-mc-conditions="Default.ScreenOnly">
            <tr class="NavLink">
                <td class="NavLeft"><span class="NavText">◀ <a href="pipeline_input_file.htm#pipeline_input_file_872746276_741933" class="NavLink MCXref xref xrefNavLink">The Python Pipeline Input File</a></span>
                </td>
                <td class="NavCenter"><span class="NavText"><a class="NavLink MCXref xref xrefNavLink" href="python_pipelineTOC.htm">Python Pipeline Command Reference Manual</a></span>
                </td>
                <td class="NavRight"><span class="NavText"><a href="pipeline_input_file_modules.htm#pipeline_input_file_872746276_744271" class="NavLink MCXref xref xrefNavLink">Available Pipeline Modules and Stages</a> ▶</span>
                </td>
            </tr>
        </table>
        <h1 class="Title">Pipeline Input File Syntax</h1>
        <p>The input file consists of a number of blocks. Each block has the following syntax</p><pre>
[ <i class="UserReplace">blocktype</i>:<i class="UserReplace">blockname</i> ]
&#160;&#160;&#160;<i class="UserReplace">keyword</i> <i class="UserReplace">value</i>
...
&#160;&#160;&#160;<i class="UserReplace">keyword</i> <i class="UserReplace">value</i></pre>
        <p>A block is terminated by the start of another block or the end of file. The keyword is separated from the value by a space. Otherwise, spaces and blank lines are not significant, but we recommend that you add them for readability. Keywords and their values are case-sensitive. </p>
        <p>In addition to the blocks, comments can be added by preceding them with a <code>#</code> sign. Any text following a <code>#</code> sign is treated as a comment, unless the <code>#</code> sign is inside single or double quotes. Thus, the <code>#</code> in <code>"ligand#1"</code> is not treated as the beginning of a comment because it is inside a set of quotes.</p>
        <p>The input file must have one or more <code>SET</code> blocks, which are used to specify the input files and other data, followed by one or more <code>STAGE</code> blocks, which specify the program (module) and its data, and be terminated by a <code>USEROUTS</code> block, which specifies the files to return to the launch directory.</p>
        <p>The <code>SET</code> block defines a variable that can be assigned a value. This variable can then be used as a value for a keyword later in the file. The variable name is the blockname value for the <code>SET</code> block. These variables are typically used to define input files. Setting variables allows you to easily reuse the input file and just change the variable values to run a calculation on another system. </p>
        <p>The class of variable is defined by the keyword, <code>VARCLASS</code>, which can be followed by one of several keywords that defines the value of the variable. These keywords may be valid only for certain classes. The keywords and their dependencies are described in <a class="Table_Number MCXref xref xrefTable_Number selected" href="#pipeline_input_file_872746276_744517">Table 1</a>.</p>
        <table class="TableStyle-StandardRules" style="caption-side: top;mc-table-style: url('../Resources/TableStyles/StandardRules.css');" cellspacing="0">
            <caption valign="top" style="padding-bottom: 7pt;">
                <p class="Table_Caption" data-mc-autonum="Table 1. "><span class="autonumber"><span>Table 1. </span></span><a name="pipeline_input_file_872746276_744517"></a>Keywords for the SET block</p>
            </caption>
            <thead>
                <tr class="TableStyle-StandardRules-Head-Header1">
                    <td class="TableStyle-StandardRules-HeadE-Column1-Header1">
                        <p class="Cell_Heading">Keyword</p>
                    </td>
                    <td class="TableStyle-StandardRules-HeadD-Column1-Header1">
                        <p class="Cell_Heading">Description</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-StandardRules-Body-Body1">
                    <td class="TableStyle-StandardRules-BodyH-Column1-Body1">
                        <p class="Cell_Body"><code>FILES</code>
                        </p>
                    </td>
                    <td class="TableStyle-StandardRules-BodyG-Column1-Body1">
                        <p class="Cell_Body">Comma-separated list of file names. Can be used with Grid, Structures, Text classes.</p>
                    </td>
                </tr>
                <tr class="TableStyle-StandardRules-Body-Body1">
                    <td class="TableStyle-StandardRules-BodyE-Column1-Body1">
                        <p class="Cell_Body"><code>PATH</code>
                        </p>
                    </td>
                    <td class="TableStyle-StandardRules-BodyD-Column1-Body1">
                        <p class="Cell_Body">Path to a directory. Used only with PhaseDB class.</p>
                    </td>
                </tr>
                <tr class="TableStyle-StandardRules-Body-Body2">
                    <td class="TableStyle-StandardRules-BodyB-Column1-Body2">
                        <p class="Cell_Body"><code>VARCLASS</code>
                        </p>
                    </td>
                    <td class="TableStyle-StandardRules-BodyA-Column1-Body2">
                        <p class="Cell_Body">Variable class. Allowed values: <code>Grid</code>, <code>PhaseDB</code>, <code>Structures</code>, <code>Text</code>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>An example from the VSW workflow is shown below:</p><pre>
[ SET:ORIGINAL_LIGANDS ]
    VARCLASS Structures
    FILES /zone1/me/glide/tutorial/structures/50ligs_epik.mae.gz
</pre>
        <p>This file can be referred to in any of the stages by the name <code>ORIGINAL_LIGANDS</code>.</p>
        <p>The <code>STAGE</code> block defines a stage in the pipelined workflow, in which a particular task is performed. The available stages and the keywords that are specific to each stage are defined in the next section. The stage name (value of <i class="UserReplace">blockname</i>) is a label for the stage. At the top of each stage, there must be a <code>STAGECLASS</code> keyword, which defines the module that is being executed and the particular stage from that module. It must be followed by an <code>INPUTS</code> keyword and an <code>OUTPUTS</code> keyword, which define the input and output files for the stage. These files are defined by an internal name, not by the actual file name. </p>
        <p>For example, the first stage in a VSW workflow could be a LigPrep stage, for which the top of the block could look like the following:</p><pre>
[ STAGE:LIGPREP ]
    STAGECLASS              ligprep.LigPrepStage
    INPUTS                  ORIGINAL_LIGANDS
    OUTPUTS                 LIGPREP_OUT
</pre>
        <p>Here, the module name is <code>ligprep</code>, and the stage name is <code>LigPrepStage</code>. The input structure file is labeled <code>ORIGINAL_LIGANDS</code>, and in this case is the file defined in the <code>SET</code> block above. The output structure file is labeled <code>LIGPREP_OUT</code>. The actual file name is set by the program using a default naming convention. In the next stage, <code>LIGPREP_OUT</code> can appear as the value for the <code>INPUTS</code> keyword, as follows:</p><pre>
[ STAGE:POSTLIGPREP ]
    STAGECLASS              ligprep.PostLigPrepStage
    INPUTS                  LIGPREP_OUT
    OUTPUTS                 POSTLIGPREP_OUT
</pre>
        <p>In this manner, files can be passed from one stage to another. If there are multiple files, they are given in a comma-separated list, as in the following example:</p><pre>
[ STAGE:DOCK_HTVS_1 ]
    STAGECLASS              glide.DockingStage
    INPUTS                  LIPFILTER_OUT, GRID_1
    OUTPUTS                 HTVS_OUT_1
</pre>
        <p>The <code>USEROUTS</code> block has two keywords, <code>USEROUTS</code>, which specifies the output files to return, and <code>STRUCTOUT</code>, which specifies the structure files to return. These are comma-separated lists of the values given for <code>OUTPUTS</code> in one or more of the stages.</p>
    </body>
</html>