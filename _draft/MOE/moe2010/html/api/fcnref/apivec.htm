<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--
!!    apivec.htm		API Vector utilities manpage
!!
!!    14-jan-99 (ms) created
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>

<meta functions svl_ReallocVector_C_>
<meta functions svl_ReallocVector_I_>
<meta functions svl_ReallocVector_R_>
<meta functions svl_ReallocVector_T_>

<meta functions svl_FreeVector_C_>
<meta functions svl_FreeVector_I_>
<meta functions svl_FreeVector_R_>
<meta functions svl_FreeVector_T_>

<meta functions svl_PullRwVector_C_>
<meta functions svl_PullRwVector_I_>
<meta functions svl_PullRwVector_R_>
<meta functions svl_PullRwVector_T_>

<meta functions svl_PullRoVector_C_>
<meta functions svl_PullRoVector_I_>
<meta functions svl_PullRoVector_R_>
<meta functions svl_PullRoVector_T_>

<meta functions svl_PushVector_C_>
<meta functions svl_PushVector_I_>
<meta functions svl_PushVector_R_>
<meta functions svl_PushVector_T_>

<title>API Vectors</title>

</head>

<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>API Vectors</h2>
<hr noshade="noshade" />


<h2>Syntax</h2>
<pre>
    svl_error <a class="fcnlink" href="#svl_ReallocVector_C_">svl_ReallocVector_C_</a>(svlChar **ptr, int n);
    svl_error <a class="fcnlink" href="#svl_ReallocVector_I_">svl_ReallocVector_I_</a>(svlInt **ptr, int n);
    svl_error <a class="fcnlink" href="#svl_ReallocVector_R_">svl_ReallocVector_R_</a>(svlReal **ptr, int n);
    svl_error <a class="fcnlink" href="#svl_ReallocVector_T_">svl_ReallocVector_T_</a>(svlTok **ptr, int n);

    void <a class="fcnlink" href="#svl_FreeVector_C_">svl_FreeVector_C_</a>(svlChar *ptr);
    void <a class="fcnlink" href="#svl_FreeVector_I_">svl_FreeVector_I_</a>(svlInt *ptr);
    void <a class="fcnlink" href="#svl_FreeVector_R_">svl_FreeVector_R_</a>(svlReal *ptr);
    void <a class="fcnlink" href="#svl_FreeVector_T_">svl_FreeVector_T_</a>(svlTok *ptr);

    svl_error <a class="fcnlink" href="#svl_PullRwVector_C_">svl_PullRwVector_C_</a>(
	svl_var v, 
	unsigned k,
	svlChar **ptr, 
	int *n
    );
    svl_error <a class="fcnlink" href="#svl_PullRwVector_I_">svl_PullRwVector_I_</a>(
	svl_var v, 
	unsigned k,
	svlInt **ptr, 
	int *n
    );
    svl_error <a class="fcnlink" href="#svl_PullRwVector_R_">svl_PullRwVector_R_</a>(
	svl_var v, 
	unsigned k,
	svlReal **ptr, 
	int *n
    );
    svl_error <a class="fcnlink" href="#svl_PullRwVector_T_">svl_PullRwVector_T_</a>(
	svl_var v, 
	unsigned k,
	svlTok **ptr, 
	int *n
    );

    svl_error <a class="fcnlink" href="#svl_PullRoVector_C_">svl_PullRoVector_C_</a>(
	svl_var v, 
	unsigned k,
	svlChar **ptr, 
	int *n
    );
    svl_error <a class="fcnlink" href="#svl_PullRoVector_I_">svl_PullRoVector_I_</a>(
	svl_var v, 
	unsigned k,
	svlInt **ptr, 
	int *n
    );
    svl_error <a class="fcnlink" href="#svl_PullRoVector_R_">svl_PullRoVector_R_</a>(
	svl_var v, 
	unsigned k,
	svlReal **ptr, 
	int *n
    );
    svl_error <a class="fcnlink" href="#svl_PullRoVector_T_">svl_PullRoVector_T_</a>(
	svl_var v, 
	unsigned k,
	svlTok **ptr, 
	int *n
    );

    svl_error <a class="fcnlink" href="#svl_PushVector_C_">svl_PushVector_C_</a>(svl_var v, unsigned k, svlChar **ptr);
    svl_error <a class="fcnlink" href="#svl_PushVector_I_">svl_PushVector_I_</a>(svl_var v, unsigned k, svlInt **ptr);
    svl_error <a class="fcnlink" href="#svl_PushVector_R_">svl_PushVector_R_</a>(svl_var v, unsigned k, svlReal **ptr);
    svl_error <a class="fcnlink" href="#svl_PushVector_T_">svl_PushVector_T_</a>(svl_var v, unsigned k, svlTok **ptr);
</pre>

<h4>Summary</h4>

<p>API vector utilities use a special type of managed buffers
that can be moved to and from the internal structure of an SVL variable
with minimal overhead.

<p>Each vector must be initialized to <tt>NULL</tt> at the beginning of the
function and freed at the end.  For example:

<pre>
    {
        svl_error e = NULL;
        svlReal *x = NULL;
	...
    X_:
        <a class="fcnlink" href="#svl_FreeVector_R_">svl_FreeVector_R_</a>(x);
        return e;
    }
</pre>

<p>The vector is resized with <tt>svl_ReallocVector_X_()</tt>.

<p><tt>svl_PullXxVector_X_()</tt> and <tt>svl_PushVector_X_()</tt>
move data between user-controlled buffers and SVL internal data
structures.  For example:

<pre>
	...
    n = 1;
    E_(<a class="fcnlink" href="#svl_PullRwVector_R_">svl_PullRwVector_R_</a>(v, 0, &x, &n));
    while (--n >= 0) x[n] = cos(x[n]);
    E_(<a class="fcnlink" href="#svl_PushVector_R_">svl_PushVector_R_</a>(v, 0, &x));
	...
</pre>

<a name="svl_FreeVector_C_"></a>
<a name="svl_FreeVector_I_"></a>
<a name="svl_FreeVector_R_"></a>
<a name="svl_FreeVector_T_"></a>

<h2>Description</h2>

<span class="fcndef">svl_FreeVector_X_(ptr)</span> 
<p>Frees the memory associated
with pointer <tt>ptr</tt>.  If the argument is <tt>NULL</tt>, the function
does nothing.  If <tt>svl_FreeVector_X_()</tt> is called anywhere inside
the function (i.e. not just at the end), it must be followed by an explicit
setting of the value of its argument to <tt>NULL</tt>.  

<p>For example:

<pre>
	...
    svl_Free_Vector_R_(x), x = NULL;
	...
X_:
</pre>

<a name="svl_ReallocVector_C_"></a>
<a name="svl_ReallocVector_I_"></a>
<a name="svl_ReallocVector_R_"></a>
<a name="svl_ReallocVector_T_"></a>

<p><a name="svl_ReallocVector_I_"></a></p>
<p><hr noshade="noshade" />

<span class="fcndef">svl_ReallocVector_X_(&ptr, n)</span> 
<p>Resizes the buffer
associated with pointer <tt>ptr</tt> to <tt>n</tt> elements of the
specified type, <tt>X</tt>.
Pointer <tt>ptr</tt> must either be <tt>NULL</tt> or
have its value set by a previous call
to an <tt>svl_XxxVector_X_()</tt> function of the <i>same type</i>.

<p>For example:

<pre>
    for (...) {
	size =  ...;
	E_(<span class="fcndef">svl_ReallocVector_I_</span>(&buf, size));
	    ...
    }
</pre>
</tr>

<a name="svl_PushVector_C_"></a>
<a name="svl_PushVector_I_"></a>
<a name="svl_PushVector_R_"></a>
<a name="svl_PushVector_T_"></a>

<p><hr noshade="noshade" />

<span class="fcndef">svl_PushVector_X_(v, k, &ptr)</span> 
<p>Replaces
the contents of the <tt>k</tt>-th element of variable <tt>v</tt>
with data stored in the buffer pointed to by pointer <tt>ptr</tt>.
Pointer <tt>ptr</tt> must either be <tt>NULL</tt> or
have its value set by a previous call
to an <tt>svl_XxxVector_X_()</tt> function of the <i>same type</i>.

<p>For efficiency reasons, the function is destructive:
after the call, the value of <tt>ptr</tt> is <tt>NULL</tt>.

<a name="svl_PullRwVector_C_"></a>
<a name="svl_PullRwVector_I_"></a>
<a name="svl_PullRwVector_R_"></a>
<a name="svl_PullRwVector_T_"></a>
<a name="svl_PullRoVector_C_"></a>
<a name="svl_PullRoVector_I_"></a>
<a name="svl_PullRoVector_R_"></a>
<a name="svl_PullRoVector_T_"></a>

<p><hr noshade="noshade" />

<span class="fcndef">svl_PullXxVector_X_(v, k, &ptr, &n)</span> 
<p>Verifies that
the contents of the <tt>k</tt>-th element of variable <tt>v</tt>
is a flat vector of elements of type <tt>X</tt> of length compatible
with the value stored in variable <tt>n</tt>.
If <tt>n</tt> is 1, then its value gets set to the length of
the vector <tt>v(k)</tt>.  If <tt>n</tt> is not 1, the function
verifies that the length of the vector <tt>v(k)</tt> is 1 or <tt>n</tt>, and
resizes the vector to length <tt>n</tt>.  If none of these conditions
hold then an error is returned.
Pointer <tt>ptr</tt> must either be <tt>NULL</tt> or
have its value set by a previous call
to an <tt>svl_XxxVector_X_()</tt> function of the <i>same type</i>.
The function then arranges for <tt>ptr</tt> to point to the first
element of the data buffer of vector <tt>v(k)</tt>.

<p>For efficiency reasons, the function is destructive:
after the call, the contents of the <tt>k</tt>-th element <tt>v</tt>
is undefined (but valid).

<p>Because SVL variables can share their data buffers, this function includes
two variants:
<ul>
<li><tt>svl_PullRoVector_X_()</tt> requires that the buffer of values
    be read-only.  This makes it more efficient to manipulate
    data buffers shared by several SVL variables.

<p><li><tt>svl_PullRwVector_X_()</tt> provides the user with
    a read-write buffer.  If the data buffer is shared with another
    SVL variable, the function will create a copy of it.
</ul>
</tr>
</table>

<h2>See Also</h2>

<table border="0">
<tr>
<td>
    <a class="svl" href="api_get.html">svl_Get_XXX</a><br />
    <a class="svl" href="api_get.html">svl_Get_XXX_</a><br />
    <a class="svl" href="api_get.html">svl_GetCv_XXX</a><br />
    <a class="svl" href="api_get.html">svl_GetCv_XXX_</a>
</td>
<td>
    <a class="svl" href="api_put.html">svl_Put_XXX</a><br />
    <a class="svl" href="api_put.html">svl_Put_XXX_</a><br />
    <a class="svl" href="api_put.html">svl_PutCv_XXX</a><br />
    <a class="svl" href="api_put.html">svl_PutCv_XXX_</a>
</td>
</tr>
</p>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../apifcnindex.html">API Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
