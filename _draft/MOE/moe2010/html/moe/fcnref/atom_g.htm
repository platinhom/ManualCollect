<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions aAngle, aAngleDeg, aDist, aSetDist, aDihedralCW, aDihedralCCW>
<meta functions aSetDihedralCW, aSetDihedralCCW>
<meta functions aSetAngle, aSetAngleDeg, aDihedralCWDeg, aSetDihedralCWDeg>
<meta functions aDihedralCCWDeg, aSetDihedralCCWDeg>
<meta functions aInvertChirality>
<meta functions aRSChiral, aRSWaterChiral, aRSChirality, aRSWaterChirality>
<meta functions aEZStereoBond>

<meta intro Atom Geometry Functions>

<title>Atom Geometry Functions</title>
</head>

<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Atom Geometry Functions</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<pre>
    angle_radians  = <a class="fcnlink" href="#aAngle">aAngle</a> [a_keys, b_keys, c_keys]
    angle_degrees  = <a class="fcnlink" href="#aAngleDeg">aAngleDeg</a> [a_keys, b_keys, c_keys]

    success_flags  = <a class="fcnlink" href="#aSetAngle">aSetAngle</a> [[a_keys, b_keys, c_keys], targets]
    success_flags  = <a class="fcnlink" href="#aSetAngleDeg">aSetAngleDeg</a> [[a_keys, b_keys, c_keys], targets]

    distances      = <a class="fcnlink" href="#aDist">aDist</a> [a_keys, b_keys]
    success_flags  = <a class="fcnlink" href="#aSetDist">aSetDist</a> [[a_keys, b_keys], targets]

    cw_angles      = <a class="fcnlink" href="#aDihedralCW">aDihedralCW</a> [a_keys, b_keys, c_keys, d_keys]
    ccw_angles     = <a class="fcnlink" href="#aDihedralCCW">aDihedralCCW</a> [a_keys, b_keys, c_keys, d_keys]

    cw_angles      = <a class="fcnlink" href="#aDihedralCWDeg">aDihedralCWDeg</a> [a_keys, b_keys, c_keys, d_keys]
    ccw_angles     = <a class="fcnlink" href="#aDihedralCCWDeg">aDihedralCCWDeg</a> [a_keys, b_keys, c_keys, d_keys]

    chirality_mask = <a class="fcnlink" href="#aRSChiral">aRSChiral</a> atom_keys
    chirality_mask = <a class="fcnlink" href="#aRSWaterChiral">aRSWaterChiral</a> atom_keys

    chiralities    = <a class="fcnlink" href="#aRSChirality">aRSChirality</a> atom_keys
    chiralities    = <a class="fcnlink" href="#aRSWaterChirality">aRSWaterChirality</a> atom_keys
    
    stereo         = <a class="fcnlink" href="#aEZStereoBond">aEZStereoBond</a> atom_keys

    success_flags  = <a class="fcnlink" href="#aInvertChirality">aInvertChirality</a> atom_keys

    success_flags  = <a class="fcnlink" href="#aSetDihedralCW">aSetDihedralCW</a> [[a_keys, b_keys, c_keys, d_keys], targets]
    success_flags  = <a class="fcnlink" href="#aSetDihedralCCW">aSetDihedralCCW</a> [[a_keys, b_keys, c_keys, d_keys], targets]

    success_flags  = <a class="fcnlink" href="#aSetDihedralCWDeg">aSetDihedralCWDeg</a> [[a_keys, b_keys, c_keys, d_keys], targets]
    success_flags  = <a class="fcnlink" href="#aSetDihedralCCWDeg">aSetDihedralCCWDeg</a> [[a_keys, b_keys, c_keys, d_keys], targets]

</pre>

<h2>Description</h2>

<p>
In MOE, molecular data is organized as a hierarchy of <i>molecular
objects</i> or <i>objects</i>.  MOE stores atom information in separate
internal data structures.  Atoms are referenced with an object key, which
is a unique number identifying the atom object.  The many atom functions
provided by MOE cover the following broad categories:

<ul>
<li><a href="atom.htm">Fundamental Properties</a>
<li><a href="atom_p.htm">Potential Properties</a>
<li><a href="atom_d.htm">Display Properties</a>
<li><a href="atom_g.htm">Geometry Properties</a> (this page)
</ul>

<p>
The following functions can be used to obtain information from atom objects:

<p><a name="aAngleDeg"></a></p><p><a name="aAngle"></a></p><p><hr noshade="noshade" />

<pre>
angle_radians = <span class="fcndef">aAngle</span> [a_keys, b_keys, c_keys]
angle_degrees = <span class="fcndef">aAngleDeg</span> [a_keys, b_keys, c_keys]
</pre>

<p><tt>aAngle</tt> returns angles in radians and <tt>aAngleDeg</tt>
returns angles in degrees between three atoms (or three vectors of atoms)
specified by <tt>a_keys</tt>, <tt>b_keys</tt> and <tt>c_keys</tt>. Each
atom given in <tt>b_keys</tt> is at the vertex of its respective angle.

<p><tt>a_keys</tt>, <tt>b_keys</tt> and
<tt>c_keys</tt> must all be of the same length. Unit extension applies.

<p><a name="aSetAngleDeg"></a></p><p><a name="aSetAngle"></a></p><p><hr noshade="noshade" />

<pre>
success_flags = <span class="fcndef">aSetAngle</span> [[a_keys, b_keys, c_keys], targets]
success_flags = <span class="fcndef">aSetAngleDeg</span> [[a_keys, b_keys, c_keys], targets]
</pre>

<tt>aSetAngle</tt> sets the angle between atoms (a<sub>i</sub>, b<sub>i</sub>,
c<sub>i</sub>) to the corresponding value in <tt>targets</tt> (in
radians). <tt>aSetAngleDeg</tt> is identical except that the angles are
specified in degrees.

<p><tt>a_keys</tt>, <tt>b_keys</tt> and
<tt>c_keys</tt> must all be of the same length. Unit extension applies.

<p>For each triplet of atoms, a non-zero value is returned if the 
angle was successfully set; otherwise, zero is returned.

<p><a name="aSetDist"></a></p><p><a name="aDist"></a></p><p><hr noshade="noshade" />

<pre>
distances     = <span class="fcndef">aDist</span> [a_keys, b_keys]
success_flags = <span class="fcndef">aSetDist</span> [[a_keys, b_keys], targets]
</pre>

<p><tt>aDist</tt> returns the distance
(in angstroms) for each atom specified in <tt>a_keys</tt>
to the corresponding atom in <tt>b_keys</tt>.

<p><tt>a_keys</tt> and <tt>b_keys</tt> must be of the same length; unit
extension applies. 


<p><tt>aSetDist</tt> sets the distance between each pair of atoms
(a<sub>i</sub>, b<sub>i</sub>) in <tt>a_keys</tt> and <tt>b_keys</tt> to
the corresponding value t<sub>i</sub> in <tt>targets</tt>.

<tt>a_keys</tt>, <tt>b_keys</tt> and <tt>targets</tt> must all be
of the same length. Unit extension applies.

<p>For each pair of atoms, a non-zero value is returned if the 
distance was successfully set; otherwise, zero is returned.

<p><a name="aDihedralCCW"></a></p><p><a name="aDihedralCW"></a></p>
<p><a name="aDihedralCCWDeg"></a></p><p><a name="aDihedralCWDeg"></a></p>
<p><hr noshade="noshade" />

<pre>
cw_angles = <span class="fcndef">aDihedralCW</span> [a_keys, b_keys, c_keys, d_keys]
ccw_angles = <span class="fcndef">aDihedralCCW</span> [a_keys, b_keys, c_keys, d_keys]
</pre>

<p>Return the clockwise and counterclockwise
dihedral angles for each vector of atoms
specified by <tt>a_keys</tt>, <tt>b_keys</tt>,
<tt>c_keys</tt>, and <tt>d_keys</tt>.  
Angles are in radians.

<p><tt>a_keys</tt>, <tt>b_keys</tt>, <tt>c_keys</tt>, and <tt>d_keys</tt> must
all be of the same length. Unit extension applies.

<p><b>Note:</b> <span class="fcndef">aDihedralCWDeg</span>
and <span class="fcndef">aDihedralCCWDeg</span>
behave in the same manner except that angles are in degrees.

<p>
<a name="aRSChiral"></a>
<a name="aRSWaterChiral"></a>
<a name="aRSChirality"></a>
<a name="aRSWaterChirality"></a>
<a name="aInvertChirality"></a>
</p>

<p><hr noshade="noshade" />

<p>Chirality in MOE is determined using the CIP system of rules.

<p><table cellspacing="0" cellpadding="5">
<tr>
<td valign="baseline"><span class="fcndef">aRSChiral</span>&nbsp;<tt>atom_keys</tt>
<td valign="baseline">Returns 0 or 1 for each atom specified in
<tt>atom_keys</tt>.  Zero is returned for non-chiral or planar atoms, 1
otherwise.
</tr>
<tr>
<td valign="baseline"><span class="fcndef">aRSWaterChiral</span>&nbsp;<tt>atom_keys</tt>
<td valign="baseline">Returns 0 or 1 for each atom specified in
<tt>atom_keys</tt>.  Zero is returned for atoms non-chiral in water, 1
otherwise.
</tr>
<tr>
<td valign="baseline"><span class="fcndef">aRSChirality</span>&nbsp;<tt>atom_keys</tt>
<td valign="baseline">Returns -1, 0 or 1 for each atom specified in
<tt>atom_keys</tt>.  Zero is returned for non-chiral or planar atoms, -1
for <i>S</i> chirality, and 1 for <i>R</i> chirality.
</tr>
<tr>
<td valign="baseline"><span class="fcndef">aRSWaterChirality</span>&nbsp;<tt>atom_keys</tt>
<td valign="baseline">Returns -1, 0 or 1 for each atom
specified in <tt>atom_keys</tt>.  Chirality is calculated for
atoms in water, i.e. zero is returned for atoms which are
non-chiral in water, etc.
</tr>
<tr>
<td valign="baseline"><span class="fcndef">aInvertChirality</span>&nbsp;<tt>atom_keys</tt>
<td valign="baseline">Attempts to invert the RS chirality of each atom in
<tt>atom_keys</tt>.  For each atom, a non-zero value is returned if the
operation was successful; otherwise, zero is returned.

</tr>
</table>

<p><a name="aEZStereoBond"></a></p><p><hr noshade="noshade" />

<pre>stereo = <span class="fcndef">aEZStereoBond</span> atom_keys</pre>

<p>The stereochemical configuration of double bonds is described in MOE using
the CIP atom ordering system to classify the bond-centered stereochemistry
as <i>Z</i> or <i>E</i> (also known as <i>cis</i> and <i>trans</i> respectively
in the case of alkenes which have a hydrogen on both side of the double bond).

<p>If a double bond has the highest priority atoms on the same side, it is
classified as <i>Z</i>, and the stereochemistry values of both atoms are 1. If
the highest priority atoms are on opposite sides, it is classified as <i>E</i>
and the stereochemistry values are -1. If the double bond is not
stereochemically active (e.g. one of the atoms has two equivalent substituents,
or the substituent orientation is considered fluxional), the stereochemistry
values are 0.

<p>The <tt>aEZStereoBond</tt> function operates only on the atoms whose keys are
fully included in the parameter. A value of 0 will be returned for double bonds
for which only one of the atoms is included in the list.

<p>Perception of stereochemistry by <tt>aEZStereoBond</tt> is done by geometry
and molecular connection table rules. The resulting atom codes are compatible
with the <i>R</i> and <i>S</i> notation used to enforce chirality. To force the
current double bond stereochemistry in a manner similar to chirality, use
<a class="svl" href="atom_p.htm">aSetForceRS</a>. For example:

<pre>
    stereo = aEZStereoBond atoms;
    aSetForceRS [atoms | stereo, pack stereo];
</pre>

<p>The above code sample forces the constraint for <tt>atoms</tt> which
participate in stereochemically active double bonds. It will not overwrite
existing chirality constraints, because they are defined to be mutually
exclusive with double bond stereochemistry.

<p><a name="aSetDihedralCCW"></a></p><p><a name="aSetDihedralCW"></a></p><p><hr noshade="noshade" />

<pre>
success_flags = <span class="fcndef">aSetDihedralCW</span> [[a_keys, b_keys, c_keys, d_keys], targets]
success_flags = <span class="fcndef">aSetDihedralCCW</span> [[a_keys, b_keys, c_keys, d_keys], targets]
</pre>

<p><tt>aSetDihedralCW</tt> sets the clockwise dihedral angles for each
vector of 4 atom keys specified by <tt>a_keys</tt>, <tt>b_keys</tt>,
<tt>c_keys</tt>, and <tt>d_keys</tt> to the corresponding angle in
<tt>targets</tt> (in radians). <tt>aSetDihedralCCW</tt> is identical
except that it sets the counterclockwise dihedral angles for each vector
of 4 atom keys.


<p><tt>a_keys</tt>, <tt>b_keys</tt>, <tt>c_keys</tt>, and <tt>d_keys</tt> must
all be of the same length. Unit extension applies.


<p>Both functions rotate the <tt>b-c</tt> bond such that the <tt>c-d</tt> bond
(at the rear) moves with respect to the <tt>a-b</tt> bond (at the front).  Note
that nothing is done if the bond between <tt>b</tt> and <tt>c</tt> is not
rotatable.

<p>The picture below depicts the positive dihedral angle alpha for
<tt>aSetDihedralCW</tt>:

<p><center><img src="atom_g/cw.gif" alt="Clockwise Dihedral Angle"></center>


<p>Similarly, the positive dihedral angle alpha for
<tt>aSetDihedralCCW</tt> appears as:

<p>
<center>
<img src="atom_g/ccw.gif" alt="Counterclockwise Dihedral Angle">
</center>


<p><tt>aSetDihedralCW [[a,b,c,d],alpha]</tt> is equivalent to
<span class="nobr"><tt>aSetDihedralCCW [[a,b,c,d],-alpha]</tt></span>.

<p>For each pair of atoms, a non-zero value is returned if the 
angle was successfully set; otherwise, zero is returned.

<p><a name="aSetDihedralCCWDeg"></a></p><p><a name="aSetDihedralCWDeg"></a></p><p><hr noshade="noshade" />

<pre>
success_flags = <span class="fcndef">aSetDihedralCWDeg</span> [[a_keys, b_keys, c_keys, d_keys], targets]
success_flags = <span class="fcndef">aSetDihedralCCWDeg</span> [[a_keys, b_keys, c_keys, d_keys], targets]
</pre>

<p><tt>aSetDihedralCWDeg</tt> and <tt>aSetDihedralCCWDeg</tt>
behave in the same manner as <tt>aSetDihedralCW</tt> and
<tt>aSetDihedralCCW</tt> except that angles are in degrees.


<h2>See Also</h2>

<p>
  <a class="svl" href="atom_p.htm">aSetForceRS</a><br />
  <a class="svl" href="draw.html">DrawMeters</a><br />
  <a class="svl" href="measure.html">MeasureAngles</a><br />
  <a class="svl" href="measure.html">MeasureDihedrals</a><br />
  <a class="svl" href="meters.html">MeterCreate</a><br />
  <a class="svl" href="../../proteins/fcnref/pro_bkdi.html">pro_BackboneDihedrals</a><br />
  <a class="svl" href="../../proteins/fcnref/pro_bkdi.html">pro_SetBackboneDihedrals</a>


<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
