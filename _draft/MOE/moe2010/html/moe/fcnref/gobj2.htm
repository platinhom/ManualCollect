<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--
!!    moe/fcnref/gobj2.htm	Graphics objects (G_ functions) manpage
!!
!!    14-jan-2010 (ms) added G_Arrow
!!    14-jan-1999 (ms) created
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions G_Cat, G_Cross, G_Box, G_WireBox>
<meta functions G_Sphere, G_WireSphere, G_PolySphere>
<meta functions G_Cylinder, G_WireCylinder, G_PolyCylinder>
<meta functions G_Cone, G_WireCone, G_PolyCone>
<meta functions G_Arrow, G_WireArrow, G_PolyArrow>
<meta functions G_Cap, G_WireCap, G_PolyCap>
<meta functions G_Circle, G_WireCircle>
<meta functions UnitSphere, UnitCircle>
<meta functions CircleNpoints>

<title>Graphics Object Functions: G_Cat...</title>

</head>

<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Graphics Object Functions</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<p><pre>
    obj_data = <a class="fcnlink" href="#G_Cat">G_Cat</a> [obj_data1, obj_data2, ... obj_dataN]

    obj_data = <a class="fcnlink" href="#G_Cross">G_Cross</a> [color, center, radius]
    obj_data = <a class="fcnlink" href="#G_Box">G_Box</a> [color, corner1, corner2]
    obj_data = <a class="fcnlink" href="#G_WireBox">G_WireBox</a> [color, corner1, corner2]

    obj_data = <a class="fcnlink" href="#G_Sphere">G_Sphere</a> [color, center, radius, quality]
    obj_data = <a class="fcnlink" href="#G_WireSphere">G_WireSphere</a> [color, center, radius, quality]
    obj_data = <a class="fcnlink" href="#G_PolySphere">G_PolySphere</a> [color, center, radius, quality]

    obj_data = <a class="fcnlink" href="#G_Cylinder">G_Cylinder</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_WireCylinder">G_WireCylinder</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_PolyCylinder">G_PolyCylinder</a> [color, center, axis, radius, quality]

    obj_data = <a class="fcnlink" href="#G_Cone">G_Cone</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_WireCone">G_WireCone</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_PolyCone">G_PolyCone</a> [color, center, axis, radius, quality]

    obj_data = <a class="fcnlink" href="#G_Arrow">G_Arrow</a> [color, center, axis, radius, cap, quality]
    obj_data = <a class="fcnlink" href="#G_WireArrow">G_WireArrow</a> [color, center, axis, radius, cap, quality]
    obj_data = <a class="fcnlink" href="#G_PolyArrow">G_PolyArrow</a> [color, center, axis, radius, cap, quality]

    obj_data = <a class="fcnlink" href="#G_Cap">G_Cap</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_WireCap">G_WireCap</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_PolyCap">G_PolyCap</a> [color, center, axis, radius, quality]

    obj_data = <a class="fcnlink" href="#G_Circle">G_Circle</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href="#G_WireCircle">G_WireCircle</a> [color, center, axis, radius, quality]

    [tri_idx, [x,y,z] = <a class="fcnlink" href="#UnitSphere">UnitSphere</a> quality;
    [x, y] = <a class="fcnlink" href="#UnitCircle">UnitCircle</a> n_points;

    [seg, idx, colors, [x,y,z], [nx,ny,nz] ] = <a class="fcnlink" href="#G_Xxx...">G_Xxx...</a>
    obj_data = <a class="fcnlink" href="#G_Xxx...">G_Xxx...</a>
    <a class="fcnlink" href="#GVertex">GVertex</a> cat [ obj_key, obj_data ]
</pre>

<p><a name="G_Xxx..."></a></p>
<p><a name="GVertex"></a></p>

</p><h2>Description</h2>

<p><b>General Usage</b>

<p>The <tt><span class="fcndef">G_Xxx...</span></tt>
functions allow the creation and manipulation of data sets that
define 3D graphics objects.   The actual graphics objects are then
created with the SVL function <tt>GVertex</tt>.
For example, the function <tt>G_Box</tt> returns the data vectors
that describe a unit box:

<pre>
    local obj_data = G_Box [color, corner1, corner2]
</pre>

<p>The data can then be used directly (without any modification)
to display the box:

<pre>
    <span class="fcndef">GVertex</span> cat [obj_key, obj_data]
</pre>

<p>or it can be broken down into separate vectors, modified or merged with
other objects, and then used to display customized objects:

<p><pre>
    local [seg, idx, colors, [x,y,z], [nx,ny,nz] ] = obj_data;
    z = z + z_offset;				// move along the Z axis
    colors = my_color_function [x,y,z];		// add custom colors
    GVertex cat [ obj_key, [seg, idx, colors, [x,y,z], [nx,ny,nz] ] ];
</pre>

<p>All arguments of the <tt>G_Xxx...</tt> functions unit extend.
For example, the following call returns the object data
of two identical unit cubes, positioned at
points (0,0,0) and (0,0,3):

<pre>
    G_Box [color, [0,0,[0,3]], [1,1,[1,4]]]
</pre>

<p>The <tt>color</tt> argument applies to all vertices of the object.
To color vertices individually, the object data must be explicitly
broken down and customized, as in the example above.

<p>When <tt>G_Xxx...</tt> represents a solid object (all except
<tt>G_Cross</tt>), the <tt>G_WireXxx...</tt> form of the function
returns the wireframe rendering of the object.

<p>When <tt>G_Xxx...</tt> represents a solid object
approximated by a number of polyhedral facets
(spheres, cylinders, cones, and caps),
the returned normals are perpendicular to the object itself
(e.g. radial in case of a sphere), not to the facets.
To obtain true polyhedral rendering, with normals perpendicular
to each facet of the polyhedron,
the <tt>G_PolyXxx...</tt> form of the function should be used instead.

<p>The number of facets used in the polyhedron
is governed by the <tt>quality</tt> argument,
which follows a subjective scale
of visual quality: 0..poor, 1..acceptable, 2..good,
3..excellent, 4..excessive, 5 and higher..wasteful.

<p>The positioning of facets around cylinders, cones, caps, and circles uses
the same algorithm, i.e.
when a cap is positioned on top of a cylinder of the same quality,
the edges of facets will match.

<p><a name="G_Cross"></a></p>
<p><a name="G_Box"></a></p>
<p><a name="G_WireBox"></a></p>
<p><a name="G_Circle"></a></p>
<p><a name="G_WireCircle"></a></p>
<p><hr noshade="noshade" />

<p><b>Simple Objects</b>

<p>Simple objects include a simple 3D cross consisting of three
intersecting lines, a rectangular box, and a polygonal approximation
of a circle.

<p><pre>
    obj_data = <span class="fcndef">G_Cross</span> [color, center, radius]
</pre>

<p>Function <tt>G_Cross</tt> returns three perpendicular intersecting lines,
each of length <tt>radius</tt>, with the intersection point at <tt>center</tt>.

<p><pre>
    obj_data = <span class="fcndef">G_Box</span> [color, corner1, corner2]
    obj_data = <span class="fcndef">G_WireBox</span> [color, corner1, corner2]
</pre>

<p>Function <tt>G_Box</tt> returns a box with the 3D diagonal formed by
points <tt>corner1</tt> and <tt>corner2</tt>.  The box does not depend on
the order of the points or the choice of the diagonal.

<p><pre>
    obj_data = <span class="fcndef">G_Circle</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_WireCircle</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Circle</tt> returns a circle of given <tt>center</tt>
and <tt>radius</tt>, perpendicular to <tt>axis</tt>.  The magnitude of
<tt>axis</tt> is irrelevant.

<p><a name="G_Sphere"></a></p>
<p><a name="G_WireSphere"></a></p>
<p><a name="G_PolySphere"></a></p>
<p><a name="G_Cylinder"></a></p>
<p><a name="G_WireCylinder"></a></p>
<p><a name="G_PolyCylinder"></a></p>
<p><a name="G_Cone"></a></p>
<p><a name="G_WireCone"></a></p>
<p><a name="G_PolyCone"></a></p>
<p><a name="G_Arrow"></a></p>
<p><a name="G_WireArrow"></a></p>
<p><a name="G_PolyArrow"></a></p>
<p><a name="G_Cap"></a></p>
<p><a name="G_WireCap"></a></p>
<p><a name="G_PolyCap"></a></p>

<p><hr noshade="noshade" />

<p><b>Spheres and Cylinders</b>

<p>Spheres and cylinders are approximated by a polyhedron of multiple
facets.  The number of facets is governed by the <tt>quality</tt>
argument which indicates the (subjective) visual quality of
the polyhedral approximation.

<pre>
    obj_data = <span class="fcndef">G_Sphere</span> [color, center, radius, quality]
    obj_data = <span class="fcndef">G_WireSphere</span> [color, center, radius, quality]
    obj_data = <span class="fcndef">G_PolySphere</span> [color, center, radius, quality]
</pre>

<p>Function <tt>G_Sphere</tt> returns
a sphere of given <tt>center</tt> and <tt>radius</tt>.

A sphere is an object created by rotating a point about
a center, i.e. a sphere consists of all points
at the same distance from the center.

<p><pre>
    obj_data = <span class="fcndef">G_Cylinder</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_WireCylinder</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_PolyCylinder</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Cylinder</tt> returns
a cylinder of given parameters.

A cylinder is an object created by rotating a line segment
about an axis parallel to the line segment.

<p><pre>
    obj_data = <span class="fcndef">G_Cone</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_WireCone</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_PolyCone</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Cone</tt> returns
a cone of given parameters.

A cone is an object created by rotating a line segment
about an axis that intersects the line segment at one of its
end points.

<p><pre>
    obj_data = <span class="fcndef">G_Arrow</span> [color, center, axis, radius, cap, quality]
    obj_data = <span class="fcndef">G_WireArrow</span> [color, center, axis, radius, cap, quality]
    obj_data = <span class="fcndef">G_PolyArrow</span> [color, center, axis, radius, cap, quality]
</pre>

<p>Function <tt>G_Arrow</tt> returns
an arrow of given parameters.

An arrow is a cylinder capped by one or two cones.  The <tt>radius</tt>
parameter specifies the radius of the cylinder.
The cone radius is somewhat larger.
The length of the cone is between 1/3 and 2/3 of the length of the arrow.

The <tt>cap</tt> parameter determines the presence of the cone(s):
If <tt>cap=2</tt> or <tt>-2</tt>, then
    the arrow is drawn with cones at both ends.
If <tt>cap=1</tt> or <tt>-1</tt>, then
    only one cone is drawn at either end.
    (If <tt>cap=-1</tt>, the cone points at the center.)
If <tt>cap=0</tt>, then
    no cones are drawn; both ends are drawn flat.
<!--
<ul>
    <li><b>-1:</b> One cone is drawn pointing at the center. </li>
    <li><b>1:</b> One cone is drawn pointing at (center+axis). </li>
    <li><b>2,-2:</b> Two cones are drawn at both ends. </li>
    <li><b>0:</b> No cones are drawn; both ends are drawn flat. </li>
</ul>
-->


<p><pre>
    obj_data = <span class="fcndef">G_Cap</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_WireCap</span> [color, center, axis, radius, quality]
    obj_data = <span class="fcndef">G_PolyCap</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Cap</tt> returns
a semi-spherical cap of given parameters.

A cap is an object created by intersecting a sphere
with a half-space.

<p>Functions <tt>G_Cylinder, G_Cone, G_Arrow, G_Cap</tt> return
rotationally symmetric objects that share the same
set of parameters.
The radius of the base of each object is given by the argument <tt>radius</tt>.
The base of the object is centered at <tt>center</tt>.
The top of the object is centered at <tt>center+axis</tt>.
The quality of the polyhedral approximation is governed by the
value of the <tt>quality</tt> argument.

The polyhedral approximation of circles, cylinders, arrows, cones, and caps
uses the same algorithm.

<p><a name="G_Cat"></a></p>
<p><a name="UnitSphere"></a></p>
<p><a name="CircleNpoints"></a></p>
<p><a name="UnitCircle"></a></p>

<p><hr noshade="noshade" />

<p><b>Utilities</b>

<p>In addition to the <tt>G_Xxx...</tt> functions,
the following utility
functions can further customize the graphics data objects.

<pre>
    obj_data = <span class="fcndef">G_Cat</span> [obj_data1, obj_data2, ... obj_dataN]
</pre>

<p>Function <tt>G_Cat</tt> returns
an object composed of objects given as arguments.
In addition to simply catenating the objects together and
adding offsets to the indices, the function finds and removes
duplicate vertices (defined by their color, coordinates and normals)
and duplicate graphics primitives (points, lines, triangles).

<pre>
    [tri_idx, [x,y,z] = <span class="fcndef">UnitSphere</span> quality;
</pre>

<p>Function <tt>UnitSphere</tt> returns
an approximation of a unit sphere.  Vectors <tt>[x,y,z]</tt> contain
3D coordinates of points on the unit sphere centered at point (0,0,0).
Vector <tt>tri_idx</tt> describes triangulation of the sphere:
each successive three numbers in the vector are indices of vertices
forming one triangle.

<pre>
    n_points = <span class="fcndef">CircleNpoints</span> quality;
    [x, y] = <span class="fcndef">UnitCircle</span> n_points;
</pre>


<p>Function <tt>CircleNpoints</tt> returns the number of points
used to approximate a circle of given <tt>quality</tt>.

<p>Function <tt>UnitCircle</tt> returns
an approximation of a unit circle of given number of points,
<tt>n_points</tt>.

Vectors <tt>[x,y]</tt> contain
2D coordinates of points on the unit circle centered at point (0,0,0).

<p><b>Example</b>

<p>A working example that uses all the above functions is
stored in file <tt>$MOE/sample/gobjdemo.svl</tt>.

<h2>See Also</h2>

<a href="gobj.htm">Graphics Object Functions</a>
<p>
<a class="svl" href="gsurface.html">GSurface</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
