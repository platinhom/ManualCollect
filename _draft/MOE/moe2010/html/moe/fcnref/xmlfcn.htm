<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--
!!	xmlfcn.htm			XML functions
!!
!!	09-aug-2010 (hf) created
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions xml_fopenr>
<meta functions xml_fopenw>
<meta functions xml_fclose>
<meta functions xml_fread>
<meta functions xml_next>
<meta functions xml_fwrite>
<meta functions xml_key>
<meta functions xml_keyr>
<meta functions xml_keyw>

<title>XML Parsing Functions</title>
</head>

<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>XML Parsing Functions</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<pre>
    key = <a class="fcnlink" href="#xml_fopen">xml_fopenr</a> 'filename'
    key = <a class="fcnlink" href="#xml_fopen">xml_fopenr</a> fnum
    key = <a class="fcnlink" href="#xml_fopen">xml_fopenw</a> 'filename'
    key = <a class="fcnlink" href="#xml_fopen">xml_fopenw</a> fnum

    <a class="fcnlink" href="#xml_fclose">xml_fclose</a> keys

    xmlnode = <a class="fcnlink" href="#xml_fread">xml_fread</a> key
    xmlnode = <a class="fcnlink" href="#xml_fread">xml_next</a> key
    <a class="fcnlink" href="#xml_fwrite">xml_fwrite</a> [key, xmlnode]

    keys = <a class="fcnlink" href="#xml_key">xml_key</a> keys
    keys = <a class="fcnlink" href="#xml_key">xml_keyr</a> keys
    keys = <a class="fcnlink" href="#xml_key">xml_keyw</a> keys
</pre>

<h2>Description</h2>

<p><a name="xml_fopen"></a></p><p><hr noshade="noshade" />
<pre>key = <span class="fcndef">xml_fopenr</span> 'filename'
key = <span class="fcndef">xml_fopenr</span> fnum
key = <span class="fcndef">xml_fopenw</span> 'filename'
key = <span class="fcndef">xml_fopenw</span> fnum</pre>
</p>
<p>
Opens an XML file for reading (<tt>xml_fopenr</tt>) or writing (<tt>xml_fopenw</tt>)
and returns a key.  Exits with an error if the file cannot be opened for any
reason.  These functions expect either a filename or a file handle of an
already opened file as their argument. The name of the file,
<tt>'filename'</tt>, must be a token. If a file handle <tt>fnum</tt> is
given, it is a number, and must have been open in the proper mode (i.e.
read or write as appropriate).
</p>

<p><a name="xml_fclose"></a></p><p><hr noshade="noshade" />
<pre><span class="fcndef">xml_fclose</span> keys</pre>
</p>
<p>
Closes an XML key or keys and the associated files and resources.
</p>

<p><a name="xml_fread"></a></p><p><hr noshade="noshade" />
<pre>xmlnode = <span class="fcndef">xml_fread</span> key
xmlnode = <span class="fcndef">xml_next</span> key

xmlnode = [tree_depth, nodetype, attributes, name, value]
</pre>

</p>
<p>
<tt>xml_fread</tt> reads the next node from the XML stream pointed to by
<tt>key</tt>, or returns an error if <tt>key</tt> does not refer to a valid
read-only XML stream.  <tt>xml_next</tt> behaves the same except it reads the
next sibling node in the XML stream rather than the next node.  This is
normally the next node with a depth less than or equal to the depth of the
current node.
<tt>xmlnode</tt> is a vector composed of the following elements:
</p>

<dl>
<dt><tt>tree_depth</tt>
</dt><dd>The depth of the node in the XML tree (an integer).  The root node
has depth 0.</dd>
<p></p>

<dt><tt>nodetype</tt>
</dt><dd>A token indicating the type of the XML node, which can be any of the
following:
<ul>
<li>none</li>
<li>element</li>
<li>attribute</li>
<li>text</li>
<li>cdata</li>
<li>entity_reference</li>
<li>entity</li>
<li>processing_instruction</li>
<li>comment</li>
<li>document</li>
<li>document_type</li>
<li>document_fragment</li>
<li>notation</li>
<li>whitespace</li>
<li>significant_whitespace</li>
<li>end_element</li>
<li>end_entity</li>
<li>xml_declaration</li>
<li>unknown</li>
</ul>
<p>See the <a href="http://www.w3.org/TR/DOM-Level-2-Core/core.html" target="_blank">
XML DOM</a> specification for more details on the various XML node types.</p>
</dd>
<p></p>

<dt><tt>attributes</tt>
</dt><dd>A tagged vector giving all the attributes of the current node.
Values are always given as strings.  Applies to node of type <i>element</i>
only.  If there are no attributes this will be null.</dd>
<p></p>

<dt><tt>name</tt>
</dt><dd>The name of the node, as a string.  Note that <i>significant_whitespace</i>
and <i>text</i> nodes will have the name <tt>#text</tt>.  <tt>name</tt> will
never be null.</dd>
<p></p>

<dt><tt>value</tt>
</dt><dd>The value associated with the node, as a string.  This is null for
<i>element</i> nodes and for <i>text</i> nodes gives the textual content of
the node.  The interpretation will vary depending on the <tt>nodetype</tt>.</dd>
</dl>

</pre>
</p>

<p><a name="xml_fwrite"></a></p><p><hr noshade="noshade" />
<pre><span class="fcndef">xml_fwrite</span> [key, xmlnode]
</pre>
</p>

<p>
Writes a node to the XML stream pointed to by <tt>key</tt>, or
returns an error if <tt>key</tt> does not refer to a valid write-only XML
stream.
<tt>xmlnode</tt> is a vector as described above for <tt>xml_fread</tt>.  No
formatting is performed, so any whitespace desired must be explicitly given.
Attributes should be included with the element node rather than written out
with a separate call to <tt>xml_fwrite</tt>.  Hence only the following node
types are supported for writing, with any others being ignored:
</p>

<ul>
<li>element</li>
<li>text</li>
<li>cdata</li>
<li>processing_instruction</li>
<li>comment</li>
<li>document</li>
<li>document_type</li>
<li>significant_whitespace</li>
<li>end_element</li>
</ul>

<p><a name="xml_key"></a></p><p><hr noshade="noshade" />
<pre>keys = <span class="fcndef">xml_key</span> keys
keys = <span class="fcndef">xml_keyr</span> keys
keys = <span class="fcndef">xml_keyw</span> keys
</pre>
</p>

<p>Takes a list of XML keys and returns them, replacing any which are invalid
with 0.  <tt>xml_keyr</tt> replaces any keys which are not valid read-only
keys with 0, <tt>xml_keyw</tt> replaces any keys which are not valid write-only
keys with 0, and <tt>xml_key</tt> replaces keys which are neither valid
read-only nor write-only keys with 0.
</p>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
