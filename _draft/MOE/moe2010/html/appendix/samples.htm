<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->


<!--
!!	samples.htm Guide to MOE sample applications
!!
!!	06-oct-2010 (cc) minor edits, removed kinase.svl and kspredict.svl
!!	17-jul-2009 (al) add csearch.svl
!!	07-oct-2008 (kk) minor edits; reference format
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../manstyle.css" />


<style type="text/css">
.index {
	font-weight:bold;
	font-family:Arial,sans-serif;
	color:#008080;
}
.index ul {
	font-weight:normal;
	font-family:serif;
	color:black;
	padding-bottom:1em;
}
pre {
	margin-left:2em;
}
</style>

<title>MOE Sample Programs</title>

<meta panel JDBC Database Viewer>

<meta main_keywords Java Database Connectivity />
<meta main_keywords SVL_JVM, CLASSPATH, SQL, PostgreSQL, MySQL />

<meta keywords MDB, password, URL, environment variable />
<meta keywords third party, import, alias, username, password />
<meta keywords mpu_password, driver />

</head>

<body bgcolor="#ffffff">
<a href="../index.htm"><img src="../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>MOE Sample Programs</h2>
<hr noshade="noshade" />

<p>The MOE package includes a variety of sample programs that not
only illustrate the versatility and practicality of MOE's various
tools but also the ease with which one can program new applications
using the SVL programming language.  The SVL files can be found 
in the directory $MOE/sample.  For an alphabetical listing of these
files see <a href="#QuickRef">Sample Programs Quick Reference</a>.</p>

<ol class="index">
<li>Molecular Systems
    <ul>
    <li><a href="#Typer">Atom Typer (patty.svl)</a></li>
    <li><a href="#EEM">Partial Charge Calculation (eem.svl)</a></li>
    </ul>
</li>
<li>Molecular Surfaces
    <ul>
    <li><a href="#Water">Water Accessible Surfaces (asurf.svl)</a></li>
    <li><a href="#Charge">Surface Coloring by Charge (csurf.svl)</a></li>
    <li><a href="#Electro">Electrostatic Surfaces (esurf.svl)</a></li>
    <li><a href="#Gridsurf">Grid Surface Demo (gridex.svl)</a></li>
    <li><a href="#Nabstack">DNA Base Stacking (nabstack.svl)</a></li>
    <li><a href="#Solv">Solvation Free Energy from Surface Area (vajdaweng.svl)</a></li>
    </ul>
    </li>

<li>Molecular Databases
    <ul>
    <li><a href="#Molshape">Molecular Shape Similarity (molshape.svl)</a></li>
    <li><a href="#Pairsim">Typed Pair Distance Similarity (pairsim.svl)</a></li>
    <li><a href="#WebMake">Output As HTML (webmake.svl)</a></li>
    <li><a href="#JDBCViewer">JDBC Database Viewer (jdbcview.svl)</a></li>
    </ul></li>

<li>Quantitative Structure Activity Relationships
    <ul>
    <li><a href="#Kier">Kier Descriptors (q_estate.svl)</a></li>
    <li><a href="#Randic">Randic Descriptor (q_randic.svl)</a></li>
    <li><a href="#MACCS">MACCS Key Count Descriptors (q_maccs.svl)</a></li>
    </ul></li> 

<li>Molecular Modeling
    <ul>
    <li><a href="#CSearch">Systematic Conformational Search (csearch.svl)</a></li>
    <li><a href="#4Dconf">4D Conformational Sampling (cs4d.svl)</a></li>
    <li><a href="#HMC">Hybrid Monte Carlo Simulation (hmc.svl)</a></li>
    <li><a href="#Langevin">Langevin Implicit Euler Dynamics (iedyn.svl)</a></li>
    <li><a href="#Molsup">Molecular Superposition (seal.svl)</a></li>
    <li><a href="#Flexsup">Flexible Molecular Superposition (sealflex.svl)</a></li>
    <li><a href="#NVE">NVE Molecular Dynamics Simulation (verlet.svl)</a></li>
    <li><a href="#dihmplot">Dihedral Energy Plot with Minimization (dihmplot.svl)</a></li>
    </ul></li>

<li>Protein Analysis and Modeling
    <ul>
    <li><a href="#Alpha">Protein Reconstruction from Alpha Carbon Trace
    (alphabuild.svl)</a></li>
    <li><a href="#OCCO">OCCO Plot (occo.svl)</a></li>
    <li><a href="#DistPlot">Alpha Carbon Distance Matrix (distplot.svl)</a></li>
    <li><a href="#Jack">Mean Pair Potential Jackknife Test (pairpot.svl)</a></li>
    </ul></li>

<li>MOE/smp</font></b>
    <ul>
    <li><a href="#smics">Parallelized Stochastic Search (smics.svl)</a></li>
    <li><a href="#psearch">Parallelized Homology Search (psearch.svl)</a></li>
    </ul></li>

<li>SVL Programming
    <ul>
    <li><a href="#grdemo">2D Graphics Demo (grdemo.svl)</a></li>
    <li><a href="#Gobj">3D Graphics Objects Demo (gobjdemo.svl)</a></li>
    <li><a href="#Gridcode">Grid Code Example (gridcode.svl)</a></li>
    <li><a href="#Window">SVL Window Toolkit Demo (windemo.svl)</a></li>
    </ul></li>
</ol>

<!-- ATOM TYPER -->
<hr noshade>
<h3> <a name="Typer">Atom Typer</a> </h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/patty.svl</tt></li>
    <li><p> <b>Description</b>: This sample types atoms in the system
    according to PATTY and draws the resulting type tokens next to
    their respective atoms in the MOE rendering window.</p>

    <p><cite> Reference: B.L.Bush, R.P.Sheridan
    PATTY: A Programmable Atom Typer and Language for
    Automatic Classification of Atoms in Molecular Databases.
    J.Chem.Info.Comp.Sci, 33, pp756-762, 1993.
    </cite></p>

    <p>The tokens returned are:</p>

    <table>

    	<tr>
    	<td valign="top">'CAT'</td>
    	<td valign="top">CATION</td>
    	<td>used for basic functionality; i.e. protonated</td>
    	</tr>

    	<tr>
    	<td valign="top">'ANI'   </td>
    	<td valign="top">ANION</td>
    	<td>used for acidic functionality; i.e. de-protonated</td>
    	</tr>

    	<tr>
    	<td valign="top">'POL'   </td>
    	<td valign="top">POLAR</td>
    	<td>atom is neither an ANION nor a CATION and has a lone pair
    	and a polar H, or (due to tautomerization) can be a donor
    	or an acceptor.</td>
    	</tr>

	<tr>
	<td valign="top">'DON'    </td>
	<td valign="top">DONOR</td>
	<td>an atom that is none of the above and has a polar H.</td>
	</tr>

	<tr>
	<td valign="top">'ACC'    </td>
	<td valign="top">ACCEPTOR</td>
	<td>an atom that is none of the above and has a lone pair.</td>
	</tr>

	<tr>
	<td valign="top">'HYD'   </td>
	<td valign="top"> HYDROPHOBIC</td>
	<td>an atom that is none of the above and is an
	accessible atom that has hydrophobic functionality</td>
	</tr>

	<tr>
	<td valign="top">'OTH'   </td>
	<td valign="top"> OTHER</td>
	<td>an atom that falls into none of the above classes.</td>
	</tr>
    </table>

    <p>(A polar H is an H that is strongly positively charged.)  Hydrogens are
    typed as either HYD or POL.

    The environment is assumed to be at a particular pH value or in a
    narrow (although unspecified) pH range.</p>


    <li><b>Instructions</b>:<br />

    <ol>
    <li>You can run the file by typing:

    <pre>run '$MOE/sample/patty.svl'</pre>

	In this case all the atoms in the current system will be used.
    </li>
    <li>Or you can load the file by typing:

    <pre>load '$MOE/sample/patty.svl'</pre>

	and then run the function passing only the keys of atoms of
	interest:
<pre>PATTY_Type atom_keys</pre>
</li>
<li>Further, if you wish to have the types returned, use:
<pre>type_tokens = PATTY_Type atom_keys</pre>
</li>
    </ol>
    </li>
</ul>

<!-- EEM -->

<hr noshade>
<h3> <a name="EEM">Partial Charge Calculation</a> </h3>
<ul>
    <li><p><b>File</b> : <tt>$MOE/sample/eem.svl</tt></p></li>
    <li><p><b>Description</b>:

	SVL function <b><tt>EEM</tt></b>.
	Computes the partial charges according to the Electrostatic Energy
	Minimization partial charge model for all currently loaded atoms.
	The EEM charge model consists of an energy function as a function
	of charge for each atom in the system, along with Coulomb
	electrostatic energy terms, so that charge depends on molecular
	conformation. The current potential setup determines the form of
	the Coulombic terms.</p>

	<p>Note: This model should not be used if the atomic coordinates are
	unreasonable. A topological algorithm (not dependent on
	conformation) such as PEOE should be used instead.</p>
    </li>
    <li><b>Instructions</b>:

	<ol>
	<li>Load the module using the following command:

	<pre>load '$MOE/sample/eem.svl'</pre>
	</li>
	<li>Run the function using:
	<pre>EEM []</pre>

	<p>EEM returns the partial charge for every atom in the system.

	<p>Note that <tt>EEM</tt> returns the partial charges but
	does not actually set the atom charges. To do so, use:

	<pre>aSetCharge [ Atoms [], EEM [] ] </pre>
	</li>
	</ol>
	</li>
</ul>

<!--             asurf.svl   -->

<hr noshade>
<h3><a name="Water">Water Accessible Surface</a> </h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/asurf.svl</tt></li>
    <li><p><b>Description</b>: Plots the water accessible surface 
    of a compound.</p>


<p style="text-align:center"><img src="samples/s_asurf2.png" alt="Water Accessible Surface" />
</p>
</li>
    <li><p><b>Instructions</b>: </p>
    <ol>
    	<li>
	<p>Run the file by typing:</p>
	<pre>run '$MOE/sample/asurf.svl'</pre>
	<p>A panel titled Water Accessible Surface is displayed:</p>
	<p style="text-align:center"><img src="samples/s_asurf1.gif" alt="Water Accessible Surface Panel"></p>
	</li>
	<li>The Name is used to identify the 
	surface in the Graphics Objects Manager. 
	</li>
	<li>The Radius value controls the radius of the spherical
	probe used to calculate the water accessible surface.
	</li>
	<li>The Density buttons are used to choose how many dots
	will be drawn to render the water accessible surface. 
	</li>
	<li>The Atoms buttons are used to determine whether to draw
	the surface around all atoms or a selected group of atoms.
	</li>
	<li>Press OK to draw the surface. Once drawn, the surface can be
	managed (shown or hidden in the MOE rendering window) or deleted
	using the Graphics Objects Manager.
	</li>
    </ol>
    <p> For more information, see <a href="../apps/surfmap.htm">Molecular Surfaces</a>.</p>
    </li>
</ul>


    
    <!--   ----------     csurf.svl   ----------- -->

<hr noshade>

<h3> <a name="Charge">Surface Coloring by Charge </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/csurf.svl</tt></li>
    <li><p><b>Description</b>: Plots a molecular surface
    colored by charge.</p>

	<p style="text-align:center"><img src="samples/s_csurf2.png" alt="Color-Coded Surface" />
	</p>
	
	</li>
    <li><b>Instructions</b>: <br>
        <ol>
	    <li><p>Before running this sample, make sure partial charges
	    have been computed for the compound.</p></li>

	    <li><p>Type the following command at the SVL command line:</p>
	    <pre>run '$MOE/sample/csurf.svl'</pre>
	    <p>A panel titled Charge Surface is displayed.</p>

	    <p style="text-align:center"><img src="samples/s_csurf1.gif" alt="Charge Surface Panel" /></p>
		</li>
		<li>The Name is used to identify the 
		surface in the Graphics Objects Manager. 
		</li>
		<li>The Radius value controls the radius of the spherical
		probe used to calculate the surface. 
		</li>
		<li>The Density buttons are used to choose how many dots
		will be drawn to render the surface. 
		</li>
		<li>The Atoms buttons are used to determine whether to draw the
		surface around all atoms or a selected group of atoms.
		</li>
		<li>Press OK to draw the surface. Once drawn, the surface can be
		managed (shown or hidden in the MOE rendering window) or deleted using
		the Graphics Objects Manager.
		</li>
	</ol>
    <p>For more information, see <a href="../apps/surfmap.htm">Molecular Surfaces</a>.</p>
    </li>
</ul>

<!--  esurf.svl  -->

<hr noshade>

<h3> <a name="Electro"> Electrostatic Surfaces </a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/esurf.svl</tt></li>
    <li><p><b>Description</b>: Calculates electrostatic potential and 
    plots iso-surfaces of specified levels.</p>

<p style="text-align:center"><img src="samples/s_esurf2.png" alt="Electrostatic Iso-Surface">
</p>

</li>
    <li><b>Instructions</b>: <br>
        <ol>
	    <li><p> Before running this sample, make sure partial charges
	    have been computed.</li>

	    <li>The file may be run with
	    <pre>    run '$MOE/sample/esurf.svl' </pre>
	    A panel titled Electrostatic Field Iso-Surface is displayed.

	<p style="text-align:center"><img src="samples/s_esurf1.gif" 
	alt="Electrostatic Field Iso-Surface Panel" /></p>
	
	</li>

        <li>The Name is used to identify the surface in the Graphics Objects
	Manager.</li>

	<li>The Probe Charge value is used to scale the iso-surface.</li>

	<li>The Levels value is used to specify the levels of iso-surfaces to
	be drawn. More than one level can be specified at once; separate each
	value by a space.</li>

	<li>The Spacing buttons are used to choose line density of the
	iso-surface mesh.</li>

	<li>The Use Selected Atoms Only checkbox is used to specify around
	which atoms the surface will be drawn.  If on, only selected atoms will
	be considered in the surface calculations, otherwise, all atoms will be
	used.</li>

	<li>Press OK to draw the surface. Once drawn, the surface can be
	managed (shown or hidden in the MOE rendering window) or deleted using
	the Graphics Objects Manager.</li>

    </ol>

    <p> For more information, see <a href="../apps/surfmap.htm">Electrostatic
    Feature Maps</a>.

    <!-- <p> For more information, see <a
    href="../moe/molsystems/pboltz.htm">Poisson-Boltzmann Electrostatics</a>.
    -->

</ul>

<!--      gridex.svl -->

<hr noshade>

<h3> <a name="Gridsurf">Grid Surface Demo </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/gridex.svl</tt>

    <li><p><b>Description</b>: Demonstrates the various drawing 
    modes used to render a grid surface.</p>

    <li><p><b>Instructions</b>: <br />
        <ol>
	    <li><p> Type the following command at the SVL Command Line:
	    <pre>    run '$MOE/sample/gridex.svl' </pre>
	    A panel titled Grid Surfaces Demo is displayed.
<p style="text-align:center"><img src="samples/s_gridex1.gif" alt="Grid code panel" /></p>
	</li>
	<li>Turn on the Apply Changes Immediately toggle box so that
	values are instantaneously reflected on the surface displayed in
	the MOE rendering window.
	</li>
	<li>The Camnet fill ratio and Tile/loop separation parameters
	are only available when the appropriate Surface type is in
	effect.
<p style="text-align:center"><img src="samples/s_gridex2.png" alt="Grid Surface" /> </cp>
	</li>
    </ol>
    </li>
</ul>



<hr noshade>
<h3> <a name="Nabstack"> DNA Base Stacking </a> </h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/nabstack.svl</tt>
    <li><p><b>Description</b>: Displays base-base stacking contacts.</a>

	<p><cite> Reference:
	Finding and Visualizing Nucleic Acid Base Stacking.
	Journal of Molecular Graphics, Vol.14, No.1, February 1995, pp.6-11.
	H.A.Gabb, S.R.Sanghani, C.H.Robert, and C.Prevost
	</cite></p>

<p style="text-align:center"><img src="samples/s_nabstack.png" alt="DNA Base Stacking" />
</p>
</li>
    <li><b>Instructions</b>:
	<ol>
	    <li>Run the program with:
	    <pre>run '$MOE/sample/nabstack.svl'</pre>
	    </li>
	    <li>Graphics objects are managed (shown or hidden in the MOE
	    rendering window) or deleted using the Graphics Objects
	    Manager.
	    </li>
	</ol>
	</li>
    </ul>

<!-- vadjaweng.svl -->
    
<hr noshade>
<h3> <a name="Solv">Solvation Free Energy From Surface Area </a></h3>

<ul>
    <li><b>File</b>: <tt>$MOE/sample/vajdaweng.svl</tt></li>
    <li><p><b>Description</b>: Prints at the CLI an estimate of the 
    transfer free energy based on the area of the water-accessible surface.
    </p>
    <p><cite> Reference:
    Extracting Hydrophobicity Parameters from Solute Partition
    and Protein Mutation/Unfolding Experiments.
    Protein Engineering Vol.8, No.11, November 1995, pp.1081-1092
    S.Vajda, Z.Weng
    </cite></p>

    <li><p><b>Instructions</b>: </p>
    <pre>run '$MOE/sample/vajdaweng.svl'</pre>

<p>and open the SVL Commands window to see the output.</p>
</li>
</ul>

<!-- molshape.svl -->

<hr noshade>
<h3> <a name="Molshape">Molecular Shape Similarity</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/molshape.svl</tt></li>
    <li><p><b>Description</b>:
    Implementation of the Nilakantan, Bauman and  Venkataraghavan
    algorithm to find similarities in molecular shapes of molecules.  The
    search is performed by comparing one molecule, which is loaded in MOE,
    to molecules in a specified database.  The first molecule field found
    in the database is used as the search field. Progress of the search is
    printed to the SVL Commands window.</p>

    <p><cite>
    Reference: R.Nilakantan, N.Bauman, R.Venkataraghavan.
    New Method for Rapid Characterization of Molecular
    Shapes: Applications in Drug Design.
    J. Chem. Info. and Comp. Sci., 33, pp79-85, 1993.
    </cite></p>

    <li><p><b>Instructions</b>: </p>
    <ol>
    <li>Load a Search Molecule into MOE.</li>
    <li>Open a database of molecules to search.</li>
    <li>In the command line of the Database Viewer, type:
    <pre>run ['$MOE/sample/molshape.svl', tol]</pre>

    <p>where <tt>tol</tt> is in the range [0,1] and represents a search
    tolerance.  A value of 1 searches for exactly similar structures.  If
    no tolerance is given, then a tolerance of 0.5 is used.  In this case,
    you can run the program with:</p>

    <pre>run '$MOE/sample/molshape.svl'</pre>

    <p>Molecules ascertained to be similar will be selected in the Database 
    Viewer. Note that the default tolerance is fairly low, and will result
	in many molecules being flagged as similar.</p>
	</li>
    </ol>
</li>
</ul>

<!-- pairsim.svl -->

<hr noshade>
<h3><a name="Pairsim">Typed Pair Distance Similarity </a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/pairsim.svl</tt></li>
    <li><p><b>Description</b>: Calculates real-valued fingerprints based
    on binned, Cartesian atom pair distances for atoms of selected types in
    a molecule. Output fingerprints have variable length based on the number
    of distance bins and the number of requested atom types.</p>

    <p><cite>
    Reference:
    R.P.Sheridan, M.D.Miller, D.J.Underwood, S.K.Kearsley
    Chemical Similarity Using Geometric Atom Pair Descriptors.
    J. Chem. Info. Comput. Sci., Vol 36, No. 1, 1996
    </cite></p>

    <li><p><b>Instructions</b>: </p>
    <ol>
    <li>
    <p>Load the fingerprinting module with the following command:</p>
    <pre>load '$MOE/sample/pairsim.svl'</pre>
    <p>This defines two functions:</p>
    <pre>fp2_FingerPrint [atom_keys, type_vector, sel_types]</pre>
    <p>which calculates the fingerprint for a single molecule, and</p>
    <pre>fp2_Similarity [fprint1, fprint2]</pre>
    <p>which yields a similarity between 0 and 1.</p>
    </li>
    <li>
    <p>Create methanol, and generate its fingerprint:</p>
<pre>
atoms1 = sm_Build 'CO';
type_vector1 = aElement atoms1;
fprint1 = fp2_FingerPrint [atoms1, type_vector1, ['C','O','H']];
</pre>
</li>
    <li>
    <p>Create ethanol, and generate its fingerprint:</p>
    <pre>
atoms2 = sm_Build 'CCO';
type_vector2 = aElement atoms2;
fprint2 = fp2_FingerPrint [atoms2, type_vector2, ['C','O','H']];
    </pre>
    <p>Both fprint1 and fprint2 are vectors of length 189 (21*9), containing
    the occupancy of each distance bin for each pair: C-C, C-O, etc.  The
    occupancies of the distance bins sum to the number of atom pairs of
    the specified type.</p>
    </li>
    <li>
    <p>Generate the similarity metric between ethanol and methanol:</p>
    <pre>print fp2_Similarity [fprint1, fprint2];</pre>
     <p>yielding roughly 0.55.</p>
    </li>
    <li>
    <p>To calculate the fingerprint using all atoms of the molecule:</p>
    <pre>print fp2_FingerPrint [atoms2, one atoms2, 1];</pre>
    <p>which indicates that all atoms are of type 1, and that all atoms
    of type 1 should be considered.</p>
    </ol>
</ul>

<!-- webmake.svl -->

<hr noshade>
<h3><a name="WebMake">Output As HTML</h3></a>

<ul>

<li><p><b>File</b>: <tt>$MOE/sample/webmake.svl</tt></p></;li>
<li><p><b>Description</b> : 

    A program which can output the contents of a MOE database as an HTML page,
    showing the rows and columns in a table. Molecule fields are shown as 2D
    diagrams, and stored as PNG (Portable Network Graphic) bitmap files.</p>
</li>  
<li><p><b>Interactive Instructions</b>:</p>

    <ol>
    
    <li><p>Use the Database Viewer to open a MOE database of choice.</p></li>
    
    <li><p>Run the program with:</p>
    
<pre>run '$MOE/sample/webmake.svl'</pre>
    
    <p><img src="samples/webmake1.gif" /></p>
    </li>
    <li><p>If necessary, change the default output directory, HTML filename and
    title.</p>
    </li>
    <li><p>Adjust the dimensions (in pixels) for the molecular graphics.</p>
    </li>
    <li><p>If the molecule-type fields already have 2D coordinates which are
    appropriate for diagrammatic display, uncheck the Depict 2D coordinates box.
    Otherwise the coordinates will be regenerated for aesthetic purposes.</p>
    </li>
    <li><p>To limit the selection of fields or entries, toggle the Selected fields
    only and Selected entries only checkboxes.</p>
    </li>
    </ol>
    </li>

<li><p><b>Batch Instructions</b> :</p>

    <ol>
    
    <li><p>Load the program:</p>
    
<pre>load '$MOE/sample/webmake.svl'</pre>
	</li>
    <li><p>Call the function:</p>
    
<pre>webmake_BuildFiles [dbfn, opt]</pre>
	
    <p><tt>dbfn</tt> is the MOE database from which the web files will be
    built.  <tt>opt</tt> is a tag vector which contains various parameters, all
    of which are optional. See the SVL source of
    <tt>$MOE/sample/webmake.svl</tt> for a detailed description of the options.
    </p></li>
    </ol>
    </li>

<li><p><b>Output</b> : 

    The following fragment is an example of the output, rendered with a browser:</p>

    <p style="text-align:center"><img src="samples/webmake2.gif" /></p>
</li>

</ul>

<!-- jdbcview.svl -->

<hr noshade>
<h3><a name="JDBCViewer">JDBC Database Viewer</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/jdbcview.svl</tt></li>
    <li><p><b>Description</b>: 

Displays database information
obtained from third party relational database applications
such as IBM DB2, Oracle,
Microsoft SQL Server, PostgreSQL and MySQL.
<b>JDBC</b> is an acronym for
<i>Java Database Connectivity</i>, the protocol used to
make the connection to the external databases.
Tables and fields defined in the databases are
displayed and can be imported into MOE database formats using SQL (Standard
Query Language) commands.
Note that in order to use this application, Java must be installed and
the proper <a href="#Environment">environment variables</a> must be set.

    <li><p><b>Instructions</b>: </p>
<p>To open the JDBC Database Viewer, run the program with

<pre>run '$MOE/samples/jdbcview.svl'</pre>

The following panel appears:

<p><center><img src="samples/jdbc_panel.png"></center>

<p>The <b>Database Alias</b> menu shows all defined JDBC Database Connection
information.  If no JDBC connection information has been defined then the menu
will show <nobr><tt>'(no server defined)'</tt></nobr>.  The JDBC database
connection information can be set either directly in the <tt>.moe-rc</tt> file
or by using the 
<a href="../appendix/moeconfig.htm">Configuration Options Panel</a> 
as described below.  If connection data is defined, the drop-down
menu will display the <i>alias</i> for each defined connection.  Choose the
database to be viewed and press <b>Connect</b> to establish the connection.

<p>The JDBC Database Viewer consists of two lists and a textfield for entering
SQL commands.  SQL commands can be entered directly into the textfield;
selecting items in the lists will automatically
set the appropriate SQL command.
</p>

<p>To view the fields and data types of a particular table, select the table
name in the <b>Database Tables</b> list.  The fields contained in the selected
table are displayed in the <b>Table Fields</b> list.  The SQL command is
automatically updated to reflect the selected table.  In the following image,
a connection has been made
to the MSServer database and is currently displaying
the fields from the <tt>boiling_point</tt> table.  The SQL command is set to
retrieve all fields from this table.

<p><center><img src="samples/jdbc_tables.gif" alt="Connection to MSServer" />
</center></p>

<p>To create a MOE database, type in the SQL command (or select the
desired entries in the lists) and press <b>Save as MDB</b>.
A file prompter will ask for the new database file name and the created
database will be opened in a MOE Database Viewer.

<a name="Config"></a><h4>Setting the JDBC Database Connections</h4>

<p>The <a href="../appendix/moeconfig.htm">Configuration Options Panel</a>
allows for up to four JDBC database connections to be defined.
Open the panel using <nobr><b>MOE | Window | Options</b></nobr>
and choose <b>JDBC Database Connections</b> from the pulldown.  The
following panel appears:

<p><center>
<img src="samples/jdbc_config.png">
</center>

<p>The fields and commands in this window are as follows:
<p><table>
<tr>
<td valign="top"><b>Alias</b>
<td valign="top">
String used for the <b>Database Alias</b> option menu in the JDBC Database
Viewer.  If no alias is given then the URL itself will be used in the menu.

<tr>
<td valign="top"><b>URL</b>
<td valign="top">
The URL specifying the database to which to connect.  This
is a JDBC URL that begins with the protocol string <tt>jdbc:</tt>.  The
specific form of this URL will be defined in the documentation of the JDBC
driver used.

<tr>
<td valign="top"><b>Driver</b>
<td valign="top">
The JDBC driver class file to be used to communicate with the database server.
Refer to the documentation of the JDBC driver used for the exact string to
enter.

<tr>
<td valign="top"><b>Username</b>
<td valign="top">
The user account to use when connecting to the database server.

<tr>
<td valign="top"><b>Password</b>
<td valign="top">
Defines the password to use when logging-in to the database server.  This must
be either the <tt>mpu_</tt> encoded password for the given <b>Username</b> or
the non-encoded password.
If the non-encoded password is entered, then <tt>mpu_password[]</tt>
will be run on the text when <tt>Return</tt> is pressed.  If the desired
password is an empty string, press <tt>Return</tt> in the
textfield when the textfield is blank.

<p><font color="#ff0000"><b>Tip</b></font>&nbsp;&nbsp;
A pre-encoded password can be pasted into this field.


<tr>
<td valign="top"><b>Validate Connection</b>
<td valign="top">
Calls <tt>jdbc_open</tt> with the currently displayed values to determine if
the data allows for a valid connection to be established.

<tr>
<td valign="top"><b>Clear Form</b>
<td valign="top">Clear each entry in the form.
</table>

<p>
<b>OK</b> or <b>Apply</b> must be pressed before the changes will take
effect.

<p><font color="#ff0000"><b>Warning!</b></font>&nbsp;&nbsp;
The JDBC Database Viewer must be closed and reopened to have new connections
recognized by the viewer.


<a name="Environment"></a><h4>Environment Variables</h4>

<p>Several environment variables must be set properly for the viewer to
function.  These are <tt>SVL_JVM</tt> (specifies the Java Virtual Machine) and
<tt>CLASSPATH</tt> (specifies the search path to find the driver).  If these
variables are not set then connections will not be established.

For more information on the environment variables refer to
<a href="../install/install.htm#JDBC">Installing Java and JDBC Drivers</a>.



<a name="Trouble"></a><h4>Troubleshooting</h4>

<table class="titlebar" width="100%">
<tr>
<th>Error Message</th>
<th>Possible Problem</th>

<tr>
<td valign="baseline" nowrap="nowrap">
<tt>Unable to load Java class</tt>
<td valign="baseline">
Make sure the <tt>CLASSPATH</tt> and <tt>SVL_JVM</tt> environment variables are
set and then restart MOE.

<tr>
<td valign="baseline" nowrap="nowrap">
<tt>I/O error reading from JVM</tt>
<td valign="baseline">
Java may not be installed on your machine.  See
<a href="../install/install.htm#JDBC">Installing Java and JDBC Drivers</a>
for information on how to install java.

<tr>
<td valign="baseline" nowrap="nowrap">
<tt>jvm: Can't locate file</tt>
<td valign="baseline">
The <tt>java</tt> executable file cannot be found in the path.  Ensure that
<tt>SVL_JVM</tt> correctly refers to this file.  See 
<a href="../install/install.htm#JDBC">Installing Java and JDBC Drivers</a> for
information on how to install java.
</table>


<a name="SVL"></a><h4>SVL Commands</h4>
<a class="svl" href="../svl/fcnref/svlmpu.htm#mpu_password">mpu_password</a>
<br />
<a class="svl" href="../svl/fcnref/jdbc_fcn.htm#jdbc_open">jdbc_open</a>

<h4>See Also</h4>

<a href="../proteins/pdb_mdb.htm">PSILO/RCSB Download</a><br>
<a href="../appendix/moeconfig.htm">Configuring MOE</a><br>
<a href="../svl/manual/jdbc_man.htm">SVL Relational Database Access</a><br>
<a href="../svl/fcnref/jdbc_fcn.htm">SVL Relational Database Functions</a><br>


</li>
</ul>

<!-- q_estate.svl -->

<hr noshade>
<h3><a name="Kier">Kier Descriptors</h3></a>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/q_estate.svl</tt></li>
    <li><p> <b>Description</b>:
    This file contains over 100 new descriptors that all pertain to
    Kier's electrotopological state indices for atom types.  </p>

    <p><cite>
    Reference:
    Electrotopological State Indices for Atom Types: A Novel
    Combination of Electronic, Topological, and Valence State Information.
    Hall,L.H., Kier, L.B.
    Journal of Chemical Information and Computer Sciences, 1995, 35
    </cite></p>
    </li>

    <li><p><b>Instructions</b>:</p>
    <ol>
        <li><p>Load the file with:</p>
	<pre>load '$MOE/sample/q_estate.svl'</pre>
	</li>
	<li>Open the QuaSAR-Descriptor panel 
	(<span class="menu">DBV | Compute | Descriptors</span>) 
	from the Compute menu in the Database
	Viewer.
	</li>

        <li>The codes of the Kier descriptors all begin with 'kS_*' or 'kC_*'.</li>
    </ol>
    </li>

</ul>

<!-- q_randic.svl -->

<hr noshade>
<h3><a name="Randic">Randic Descriptor</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/q_randic.svl</tt></li>
    <li><p><b>Description</b>: QuaSAR descriptor used to calculate the Randic
Molecular Identification Number. This descriptor is based on the weighted
paths of the connectivity graph.</p>
    <p><cite>
    Molecular Identification Numbers
    J. Chem. Inf. Comput. Sci. 1984, 24, 164-175.
    </cite></p>

    <li><p><b>Instructions</b>: </p>
        <ol>
        <li><p>Load the file with:</p>
	<pre>load '$MOE/sample/q_randic.svl'</pre>
	</li>
        <li>Open the QuaSAR-Descriptor panel 
	(<span class="menu">DBV | Compute | Descriptors</span>) 
	from the Compute menu in the Database Viewer.
	</li>
        <li>The Randic descriptor code is <tt>randicMID</tt>.</li>
        </ol>
	</li>
</ul>

<!-- q_maccs.svl -->

<hr noshade>
<h3><a name="MACCS">MACCS Key Count Descriptors</a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/q_maccs.svl</tt></li>
    <li><p> <b>Description</b>: Individual MACCS keys
	can be used as descriptors in QuaSAR model building.</p>
	</li>
    <li><p><b>Instructions</b>: </p>
        <ol>
        <li>Load the file with:
	<pre>load '$MOE/sample/q_maccs.svl'</pre>
	</li>
        <li>Open the QuaSAR-Descriptor panel 
	(<span class="menu">DBV | Compute | Descriptors</span>) 
	from the Compute menu in the Database Viewer.
	</li>
        <li>The MACCS descriptor codes all begin with '<tt>MACCS</tt>'.</li>
        </ol>
	</li>
</ul>

<!-- csearch.svl -->

<hr noshade>

<h3> <a name="CSearch">Systematic Conformational Search </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/csearch.svl</tt></li>
    <li><p> <b>Description</b>:

    This sample demonstrates how to generate molecular conformations
    by systematically rotating bonds in a molecule by discrete increments.</p>
    </li>

    <li><p><b>Instructions</b>: </p>
    <ol>
	<li><p>Make sure there is only one molecule loaded in MOE.</p></li>
	<li><p><a href="../apps/emin.htm">Minimize the energy</a>
	of the molecular system under study to an RMS gradient of 0.1
	or smaller.</p></li>

	<li><p>Run the file using the following command:</p>
	<pre>run '$MOE/sample/csearch.svl'</pre>
	<p>The following panel appears:</p>
	<p style="text-align:center"><img src="samples/csearch.png" /></center></p></li>
	<li><p>Add or remove rotation bonds from the list and decide on the
	rotation increments for each one.</p></li>
	<li><p>Once all parameters are chosen, press <b>OK</b> to begin
	the search.  The search may produce many conformations;
	as a result, if energy minimization is enabled, the calculations may
	take some time to complete.</p></li>
    </ol>
    </li>
</ul>

<!-- cs4d.svl -->

<hr noshade>

<h3> <a name="4Dconf">4D Conformational Sampling </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/cs4d.svl</tt></li>
    <li><p> <b>Description</b>:

    This sample demonstrates how to perform conformational sampling and 
    energy minimization in 4D coordinates.</p></li>

    <li><p> <b>Instructions</b>:</p>
        <ol>
	    <li><p> Type the following command to load the 4D conformational
	    sampling module in MOE:</p>
            <pre>load '$MOE/sample/cs4d.svl'</pre>
	    </li>
	    <li>To perform 4D energy minimization of a molecule:
	    <pre>CS4D []</pre>
	    </li>
	    <li>To perform 4D energy minimization of all compounds in a
	    molecular database:
	    <pre>CS4D_MDB 'dbname.mdb' </pre>
	    <p>The function minimizes the first molecule field in the database.</p>
	    </li>
	</ol>
    </li>
</ul>

<!-- hmc.svl -->

<hr noshade>
<h3><a name="HMC">Hybrid Monte Carlo Simulation</a> </h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/hmc.svl</tt></li>
    <li><p><b>Description</b>:

	Implementation of the Hybrid Monte Carlo simulation method.

    </p></li>
    <li><p><b>Instructions</b>:</p>
	<ol>
	<li><p><a href="../apps/emin.htm">Minimize the energy</a>
	of the molecular system under study to an RMS gradient of 0.1
	or smaller.</p>
	</li>
	<li><p>Run the file using the following command:</p>
	<pre>run '$MOE/sample/hmc.svl'</pre>
	<p>The following panel appears:</p>
	<p style="text-align:center"><img src="samples/hmc.gif" /></p>
	<li><p>Once all parameters are chosen, press <b>OK</b> to begin
	the simulation.</p></li>
	</ol>
    </li>
</ul>

<!-- iedyn.svl -->

<hr noshade>

<h3> <a name="Langevin">Langevin Implicit Euler Dynamics </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/iedyn.svl</tt></li>
    <li><p> <b>Description</b>:
    This sample implements Langevin Implicit Euler dynamics.</p>
    
    <p><cite> Reference: P.Derreumaux, T.Schlick
    Long Timestep Dynamics of Peptides by the Dynamics Driver Approach
    PROTEINS: Structure, Function, and Genetics 21:282-302 (1995)
    </cite></p>
    </li>
    <li><p> <b>Instructions</b>:</p>
    <ol>
	<li><p> Load a molecule in MOE.</p></li>
	<li>Load the Langevin Dynamics module:
	<pre>load '$MOE/sample/iedyn.svl' </pre>
	</li>
	<li>Start molecule animation by typing the following command:
	<pre>IE [] </pre>
	</li>
	<li>Use the Cancel menu to terminate the function.</li>
    </ol>
    </li>
</ul>

<!-- seal.svl -->

<hr noshade>
<h3><a name="Molsup">Molecular Superposition</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/seal.svl</tt></li>
    <li><p> <b>Description</b>: Performs an alignment of small molecules
    using geometry and electrostatic contacts. Creates a database of
    superpositions and their scores.</p>

    <p><cite> Reference:
    An Alternative Method for the Alignment of Molecular
    Structures: Maximizing Electrostatic and Steric Overlap.
    Tetrahedron Computer Methodology, Vol. 3, No. 6C, pp615-633, 1990.
    </cite></p>
    </li>

    <li><p><b>Instructions</b>:</p>
        <ol>
	    <li>Load the SEAL module:
	    <pre>load <tt>'$MOE/sample/seal.svl'</tt></pre></li>
	    <li>Load two molecules into MOE (e.g. 
	    <tt>Open '$MOE/sample/seal.moe'</tt>).
	    </li>
	    <li>Type <tt>SEAL []</tt> at the CLI.
	    <p style="text-align:center"><img src="samples/seal.gif" /></p>
	    </li>

	    <li>Enter the name for the output database.</li>
	    <li>Press OK to start the procedure with all default values.</li>
        </ol>
	</li>

</ul>

<!-- sealflex.svl -->

<hr noshade>
<h3><a name="Flexsup">Flexible Molecular Superposition</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/sealflex.svl</tt></li>
    <li><p> <b>Description</b>: Performs an alignment of small molecules
using geometry and electrostatic contacts. Bond angles may change during
the calculations. The resulting superposition appears in the MOE rendering
window.</p>

    <p><cite> Reference:
    An Alternative Method for the Alignment of Molecular
    Structures: Maximizing Electrostatic and Steric Overlap.
    Tetrahedron Computer Methodology, Vol. 3, No. 6C, pp615-633, 1990.
    </cite></p>
    </li>

    <li><p><b>Instructions</b>: 
    
    <ol>
	<li>Load the SEAL Flex module:
	<pre>load '$MOE/sample/sealflex.svl'</pre></li>
	<li>Load two molecules into MOE (e.g. <tt>Open
	'$MOE/sample/seal.moe'</tt>).
	</li>

	<li>Type <tt>SEALFLEX []</tt> at the CLI.</li>
    </ol>
</ul>

<!-- verlet.svl -->

<hr noshade>
<h3><a name="NVE">NVE Molecular Dynamics Simulation</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/verlet.svl</tt></li>
    <li><p> <b>Description</b>: 
    This SVL program loops indefinitely, performing velocity verlet integration
    steps.  At each iteration, the internal atom positions are updated
    so that the simulation is animated automatically.
    </p>
    <p style="text-align:center"><img src="samples/verlet.gif" /></p>
    </li>

    <li><p> <b>Instructions</b>:</p>
	<ol>
	<li>Load a molecule in MOE.</li>
	<li>Run the sample using:
        <pre>    run '$MOE/sample/verlet.svl'</pre></li>
	<li>Use the Cancel menu to stop the sample execution.</li>
	</ol>
</ul>

<!-- dihmplot.svl -->

<hr noshade>
<h3> <a name ="dihmplot">Dihedral Energy Plot with Minimization</a> </h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/dihmplot.svl</tt></li>

    <li><p> <b>Description</b>:   Given 4 atoms defining a torsion, this
	program
	performs an energy minimization at each dihedral angle increment
	(using torsion restraints) and produces a plot
	of the energy at equally spaced angles.
	</p></li>

    <li><p> <b>Instructions</b>:</p>
    <ol>
	<li>Before running this program first select four atoms 
	    defining a torsion.</li>
	<li>Type the following command at the SVL 
	command line: <pre>    run '$MOE/sample/dihmplot.svl'</pre></li>

	<li>Once the calculation is complete a plot panel will appear:
	<p style="text-align:center"><img src="samples/dihmplot.gif" /></p>
	</li>
    </ol>
    </li>
</ul>

<!-- alphabuild.svl -->

<hr noshade>

<h3><a name="Alpha">Protein Reconstruction From Alpha-Carbon Traces </h3> </a>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/alphabuild.svl</tt></li>

    <li><p> <b>Description</b>: Routines to build proteins from 
alpha-carbon traces based on the method developed by P. Correa. </p>

    <p><cite> Reference: The building of protein 
    structures from alpha-carbon coordinates,
    PROTEINS: Structure, Function, and Genetics, 7, 266-377, 1990.</cite></p>
    </li>

    <li><p> <b>Instructions</b>: </p>
    <ol>
	<li>Load the protein <tt>$MOE/sample/mol/1crn.pdb</tt>
	into MOE.</li>

	<li>Select all alpha-carbons.</li>

	<li>Invert the selection. The selection set now comprises all atoms
	that are not alpha-carbons.</li>

	<li>Delete all selected atoms.</li>

	<li>Type the following command at the SVL Command Line to
	 reconstruct the protein from its alpha traces:
	<pre>    run '$MOE/sample/alphabuild.svl'</pre></li>

    </ol>
    </li>
</ul>

<!-- occo.svl -->

<hr noshade>
<h3> <a name="OCCO"> OCCO Plot </a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/occo.svl</tt></li>
    <li><p> <b>Description</b>:
    Function <tt>Protein_OCCO_Plot</tt> computes the backbone OCCO dihedral
    angle and puts it in the ResScalar field of each residue (normalized to +/-
    1).  This plot can then be viewed in the Sequence Editor.</p>

    <p><cite> Reference:
    Pseudotorsional OCCO backbone angle as a single descriptor of protein
    secondary structure. S. Laiter, et. al, Protein Science, Vol. 4, 1995
    </cite></p>
    </li>

    <li><p><b>Instructions</b>: </p>
        
    <p>Run the program with:</p>
    <pre>run '$MOE/sample/occo.svl'</pre>

    <p><b>Note:</b> This function assumes that all chains consist of amino 
    acids containing backbone carbonyl C and O atoms named 'C' and 'O'.</p>
</ul>

<!-- distplot.svl -->

<hr noshade>
<h3> <a name="DistPlot">Alpha Carbon Distance Plot</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/distplot.svl</tt></li>
    <li><p> <b>Description</b>: 
Draws a matrix of the distances between alpha carbons in a protein chain.
<p style="text-align:center"><img src="samples/distmat.png" alt="Distance Matrix" /></p>

    </li>

    <li><p><b>Instructions</b>: </p>
    <ol>
        <li>Load a protein into MOE.</li>
	<li><p>Type the following command at the SVL Command Line:</p>
	    <pre>run '$MOE/sample/distplot.svl' </pre>
	<li>A prompter in the Sequence Editor allows a protein chain to be chosen.</li>
    </ol> 
    </li>
</ul>

<!-- pairpot.svl -->

<hr noshade>
<h3> <a name="Jack"> Mean Pair Potential Jackknife Test </a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/pairpot.svl</tt></li>
    <li><p> <b>Description</b>: Implements a method that
    improves a simple pair potential of mean force in such a way
    that it recognizes native protein folds with high reliability.</p>

    <p><cite> Reference:
    An Improved Pair Potential to Recognize Native Protein Folds.
    Aron Bauer and Anton Beyer.
    PROTEINS: Structure, Function and Genetics 18:254-261 (1994).
    </cite></p>
    </li>

    <li><p><b>Instructions</b>: </p>
    <ol>
	<li><p>Type the following command at the SVL Command Line:</p>
	    <pre>run '$MOE/sample/pairpot.svl' </pre>
	    <p>A panel titled Mean Pair Potential Jackknife Test is displayed.</p>
<p style="text-align:center"><img src="samples/s_pairpot.gif" alt="Jackknife Panel" /></p>
	    </li>
	<li>The PDB Code List is used to specify the file of PDB entries.
	All list entries will be used in the jackknife test.</li>
	<li>The Database File is used to specify the name of the
	database from which protein chains will be loaded.  </li>
	<li>The smoothing options let you select the smoothing treatment
	used in the test. You can use none, either or both of these
	smoothing treatments.</li>

    </ol> 
    </li>
</ul>

<!-- smics.svl -->

<hr noshade>
<h3> <a name="smics">Parallelized Stochastic Search</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/smics.svl</tt></li>
    <li><p> <b>Description</b>:
	A MOE/smp multi-processor sample program for stochastic
	search of small molecules.
	</p></li>
    <li><p> <b>Instructions</b>:</p>
    <ol>
	<li>Create a file in your current working directory 
	called <tt>smics.smi</tt> which contains
	one smiles string per line.  A sample <tt>smics.smi</tt> can be
	found in the <tt>$MOE/sample</tt> directory.
	</li>
	<li>In either MOE or MOE/smp, run the file as follows:
	<pre>run '$MOE/sample/smics.svl'</pre>
	</li>

	<li>A MOE Database called <tt>smics.mdb</tt> will be created
	and opened so that you can see the results of the search as
	they are found.
	</li>
	</ol>
    </li>
</ul>

<!-- psearch.svl -->

<hr noshade>
<h3> <a name="psearch">Parallelized Homology Search</a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/psearch.svl</tt></li>
    <li><p> <b>Description</b>: A MOE/smp multi-processor sample program
    for homology search of protein sequences.  This program takes as
    input a Fasta file containing a set of query protein sequences.
    The output is a text file, located in MOE's current directory,
    containing one line for each hit of a query sequence to a family
    in MOE's family database.
    </p></li>

    <li><p> <b>Instructions</b>:</p>
    <ol>
	<li>Load the SVL file:<pre>load '$MOE/sample/psearch.svl'</pre></li>
	<li>In either MOE or MOE/batch run the function by typing the
	following at the SVL command line:
	<pre>svl&gt; mpu_psearch 'myfile'</pre>
	<p> where <tt>myfile</tt> is a Fasta file containing a set of
	query sequences.</p></li>
	<li><p>Output is written to a file <tt>myfile.log</tt> and
	errors are printed in the SVL Commands Window.  A sample
	of the output file created after running <tt>mpu_psearch</tt>
	on <tt>'$MOE/sample/mol/p2genes500.fsa'</tt> may look like this:</p>
	
<pre>
    SSO0044       PDB_1EHK.A   1.47e-032    Skip
    SSO0044       PDB_1AR1.A   2.37e-021    Skip
    SSO0050       PDB_1HZD.A   7.21e-020    Skip
    SSO0050       PDB_1EF8.A   8.81e-020    Skip
    SSO0053       PDB_1F3O.A   2.55e-031    Skip
    SSO0053       PDB_1G29.1   3.36e-022    Skip
    SSO0082       PDB_1B87.A   1.38e-003    8.71
    SSO0082       PDB_1BO4.A   1.93e-002    7.71
    SSO0090       PDB_1EOV.A   1.30e-076    Skip
    SSO0090       PDB_1KRS     6.61e-012    23.16
    SSO0091       PDB_1JJ2.F   5.15e-031    Skip
    SSO0091       PDB_1CK5.B   1.20e-002    10.74
</pre>

	<p>The columns of data show, in this order, the name of the query sequence,
	the PDB code of the best scoring structure from the family hit,
	the expectation value, and the Z-score.
	Note that if the E-value is lower than the default threshold then the
	Z-score calculation is skipped).</p>
	</li>
	</ol>
	<p>For detailed information on MOE's Homology Search application please
see <a href="../proteins/promodel.htm">Building 3D Protein Models</a>.</p>
    </li>
</ul>



<!-- grdemo.svl -->

<hr noshade>

<h3> <a name="grdemo"> 2D Graphics Demo </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/grdemo.svl</tt></li>

    <li><p> <b>Description</b>: 
    
The MOE 2D graphics features allow schematic drawings to be produced from a
concise alphabet of graphics primitives. These drawings can be rendered within
panels, exported to files, copied to the clipboard, or printed. This sample
program contains drawing instructions for several pages which showcase the range
and capabilities of the graphics primitives. It also provides a facility
for testing the file formats that are available for exporting the 2D
graphics objects.</p>
</li>

    <li><p> <b>Instructions</b>: </p>
    <ol>
	<li>Type the following command at the SVL Command Line:
	<pre>    run '$MOE/sample/grdemo.svl' </pre>
	<p>The following panel will appear:</p>

	<p style="text-align:center">
	<img src="samples/grdemo.png" alt="2D Graphics Primitives" />
	</p>
	</li>
	<li>The default graphic, page 1, is shown above. To flip between pages,
	press the numbers labeled by <b>Graphics</b>.
	</li>

    	<li>To test the exporting abilities, make sure that the location given
	in <b>Directory</b> is suitable for writing a
	number of files, then press the <b>Export</b> button. For each of the
	pages of graphics, a file will be created for every available output
	format. Output formats include raster (PNG, JPG, GIF, BMP) and
	vector (EMF+, SVG, Grob) formats.
	</li>
    </ol>
    
    <p>For more information, see <a href="../svl/fcnref/grfcn.htm">Flat Graphics
Object Functions</a>.</p>
</li>
</ul>

<hr noshade>

<h3> <a name="Gobj"> 3D Graphics Objects Demo </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/gobjdemo.svl</tt></li>

    <li><p> <b>Description</b>: Running this program displays the Graphics
Objects Demo panel, which allows you to select a function defining a
graphic object and to modify the object's parameters on an interactive
basis.  The resulting graphic object is displayed in the MOE rendering
window.</p>

<p><b>Note:</b> The objects are rendered using green lines and
triangles.  The direction of the normals is shown by red line segments
(optional).</p>


<p style="text-align:center">
<img src="gobjdemo/wire_spheres.png" alt="Wireframe Spheres in MOE" />
</p>


    <li><p> <b>Instructions</b>: </p>
    <ol>
	<li>Type the following command at the SVL Command Line:
	<pre>run '$MOE/sample/gobjdemo.svl' </pre>
	<p>A panel titled Graphics Objects Demo is displayed.</p>
	<p style="text-align:center"><img src="samples/gobjdemo_panel.png" 
	alt="GOBJ Demo Panel" /></p>
	</li>
	<li>The Object section contains each available
	graphic object in MOE. Press a button to display the corresponding
	object in the MOE rendering window.
	</li>
	<li>The Show Normals toggle box controls the display of red arrows 
	indicating the graphic object normals. 
	</li>
	<li>The three wheels in the Center section are used
	to change the coordinates of the displayed object.
	</li>
	<li>The three wheels in the Axis section are used to change
	the height, declination from Z axis and angle about the Z axis
	of the currently displayed graphic object.
	</li>
	<li>The Radius scale determines the size of the displayed object.
	To modify this value, enter a number in the text field and
	press <tt>Enter</tt> or move the scale.
	</li>
	<li>The Quality scale controls the visual quality of the surface
	of the displayed objects. 
	</li>
	<li>The Replicate scale determines the number of graphic objects
	to display. 
	</li>
	<li>The Separation scale controls the amount of space between
	the replicated graphic objects.
	</li>
	<li>The SVL display area shows the SVL code used to create the
	currently displayed object.
	</li>
    </ol>
    </li>
</ul>




<p>Each object is defined by its basic shape and desired appearance
(solid, wireframe or polyhedral).  Wireframe objects are composed of
lines, whereas solid and polyhedral objects are composed of triangles that
form polyhedral facets.  Solid and polyhedral objects differ in their
normals:  while normals of a solid object are perpendicular to the
analytic surface of the object, normals of a polyhedral object are
perpendicular to each individual facet.

<table border="1" style="margin:1em auto;" class="titlebar"> 

<tr>
  <th>Object</th>
  <th>Solid </th>
  <th>Wireframe </th>
  <th>Polyhedral </th>

</tr><tr>
  <th>cross</th>
  <td>&nbsp; </td>
  <td><img src="gobjdemo/cross.gif" /> </td>
  <td>&nbsp; </td>

</tr><tr><th>circle</th>
  <td><img src="gobjdemo/circle.gif" /> </td>
  <td><img src="gobjdemo/wcircle.gif" /> </td>
  <td>&nbsp; </td>

</tr><tr>
  <th>box</th>
  <td><img src="gobjdemo/box.gif" /></td>
  <td><img src="gobjdemo/wbox.gif" /></td>
  <td>&nbsp; </td>

</tr><tr><th>sphere</th>
  <td><img src="gobjdemo/sphere.gif" /> </td>
  <td><img src="gobjdemo/wsphere.gif" /> </td>
  <td><img src="gobjdemo/psphere.gif" /></td>

</tr><tr>
  <th>cylinder</th>
  <td><img src="gobjdemo/cylinder.gif" /> </td>
  <td><img src="gobjdemo/wcylinder.gif" /> </td>
  <td><img src="gobjdemo/pcylinder.gif" /></td>

</tr><tr>
  <th>cone</th>
  <td><img src="gobjdemo/cone.gif" /> </td>
  <td><img src="gobjdemo/wcone.gif" /></td>
  <td><img src="gobjdemo/pcone.gif" /> </td>

</tr><tr>
  <th>arrow</th>
  <td><img src="gobjdemo/arrow_solid.png" /> </td>
  <td><img src="gobjdemo/arrow_wireframe.png" /></td>
  <td><img src="gobjdemo/arrow_polyhedral.png" /> </td>

</tr><tr><th>cap</th>
  <td><img src="gobjdemo/cap.gif" /> </td>
  <td><img src="gobjdemo/wcap.gif" /></td>
  <td><img src="gobjdemo/pcap.gif" /> </td>
</tr>
</table>

<!-- gridcode.svl -->

<hr noshade>

<h3> <a name="Gridcode"> Grid Code Example </a></h3>
<ul>
    <li><b>File</b> : <tt>$MOE/sample/gridcode.svl</tt></li>

    <li><p> <b>Description</b>:
    Demonstrates how to use grid-related SVL functions.</p>

<p style="text-align:center">
<img src="samples/s_gridcode2.png" alt="Gridcode Surface" /> 
</p>
</li>
    <li><p> <b>Instructions</b>: <br><br>
    <ol>
	<li>Load the aspirin molecule <tt>'$MOE/sample/mol/asa.mol'</tt>
	into MOE.</li>

	<li>Type the following command at the SVL Command Line:
	<pre>run '$MOE/sample/gridcode.svl' </pre>
	<p>A panel titled Grid Surfaces SVL Demo is displayed.</p>
	<p style="text-align:center"><img src="samples/s_gridcode1.gif" 
	alt="Grid Code Panel" /></p>

	</li>
	<li>Modify the various parameters of the program and press 
	Apply to see the corresponding surface in the MOE rendering window.
	</li>
    </ol>
    </li>
</ul>

<!-- windemo.svl -->

<hr noshade>

<h3><a name="Window"> SVL Window Toolkit Demo </a></h3>

<ul>
    <li><b>File</b> : <tt>$MOE/sample/windemo.svl</tt></li>
    <li><p> <b>Description</b>:
    Displays a panel showing the different widgets available in the 
    <a href="../svl/svlgui/wt_intro.htm">SVL Window Toolkit</a> and their respective
    attributes.  Adjusting the attributes allows you to
    see how different attribute values affect the widget layout.</p>

    <p style="text-align:center"><img src="samples/s_windemo.gif" /></p>
    </li>
    <li><p><b>Instructions</b>: </p>
    Run the sample with 
	<pre>run '$MOE/sample/windemo.svl'</pre>
    <p>and follow the instructions.</p>
    </li>
</ul>

<hr noshade>


<a name="QuickRef">
<h2>Sample Programs Quick Reference</h2>
<dir>
<table>
<tr>
    <td><a href="#Alpha">alphabuild.svl</a></td>
    <td>Protein Reconstruction from Alpha Carbon Trace</td>
</tr><tr>
    <td><a href="#Water">asurf.svl</a></td>
    <td>Water Accessible Surfaces</td>
</tr><tr>
    <td><a href="#">cartoon.svl</a></td>
    <td>Graphics object protein backbones</td>
</tr><tr>
    <td><a href="#4Dconf">cs4d.svl</a></td>
    <td>4D Conformational Sampling</td>
</tr><tr>
    <td><a href="#CSearch">csearch.svl</a></td>
    <td>Systematic Conformational Search</td>
</tr><tr>
    <td><a href="#Charge">csurf.svl</a></td>
    <td>Surface Coloring by Charge</td>
</tr><tr>
    <td><a href="#">dbimport.svl</a></td>
    <td>Legacy tool for importing data into a MOE database</td>
</tr><tr>
    <td><a href="#">dgeom.svl</a></td>
    <td>Distance Geometry</td>
</tr><tr>
    <td><a href="#dihmplot">dihmplot.svl</a></td>
    <td>Dihedral Energy Plot with Minimization</td>
</tr><tr>
    <td><a href="#DistPlot">distplot.svl</a></td>
    <td>Alpha carbon distance matrix plot</td>
</tr><tr>
    <td><a href="#">echo.svl</a></td>
    <td>Example custom loaded SVL function</td>
</tr><tr>
    <td><a href="#EEM">eem.svl</a></td>
    <td>Partial Charge Calculation</td>
</tr><tr>
    <td><a href="#epb">epb.svl</a></td>
    <td>Electrostatic surface using Poisson-Boltzmann</td>
</tr><tr>
    <td><a href="#Electro">esurf.svl</a></td>
    <td>Electrostatic Surfaces</td>
</tr><tr>
    <td><a href="#Gobj">gobjdemo.svl</a></td>
    <td>3D Graphics Objects Demo</td>
</tr><tr>
    <td><a href="#Gobj">grdemo.svl</a></td>
    <td>2D Graphics Objects Demo</td>
</tr><tr>
    <td><a href="#Gridcode">gridcode.svl</a></td>
    <td>Grid Code Example</td>

</tr><tr>
    <td><a href="#Gridsurf">gridex.svl</a></td>
    <td>Grid Surface Demo</td>
</tr><tr>
    <td><a href="#">hello_world.svl</a></td>
    <td>Example custom run SVL function</td>
</tr><tr>
    <td><a href="#HMC">hmc.svl</a></td>
    <td>Hybrid Monte Carlo Simulation</td>
</tr><tr>
    <td><a href="#">hrot.svl</a></td>
    <td>Random Helix Rotation</td>
</tr><tr>
    <td><a href="#Langevin">iedyn.svl</a></td>
    <td>Langevin Implicit Euler Dynamics</td>

</tr><tr>
    <td><a href="#Molshape">molshape.svl</a> </td>
    <td>Molecular Shape Similarity</td>
</tr><tr>
    <td><a href="#Nabstack">nabstack.svl</a></td>
    <td>DNA Base Stacking</td>
</tr><tr>
    <td><a href="#OCCO">occo.svl</a></td>
    <td>OCCO Plot</td>
</tr><tr>
    <td><a href="#">open_template.svl</a></td>
    <td>Template SVL for adding a new file type to <b>File | Open</b></td>
</tr><tr>
    <td><a href="#Jack">pairpot.svl</a></td>
    <td>Mean Pair Potential Jackknife Test</td>
</tr><tr>
    <td><a href="#Pairsim">pairsim.svl</a></td>
    <td>Typed Pair Distance Similarity</td>
</tr><tr>
    <td><a href="#Typer">patty.svl</a></td>
    <td>Atom Typer</td>

</tr><tr>
    <td><a href="#psearch">psearch.svl</a></td>
    <td>Parallelized Homology Search</td>

</tr><tr>
    <td><a href="#Kier">q_estate.svl</a></td>
    <td>Kier Descriptors</td>
</tr><tr>
    <td><a href="#Randic">q_randic.svl</a></td>
    <td>Randic Descriptor</td>
</tr><tr>
    <td><a href="#MACCS">q_maccs.svl</a></td>
    <td>MACCS Key Count Descriptors</td>

</tr><tr>
    <td><a href="#Molsup">seal.svl</a></td>
    <td>Molecular Superposition</td>
</tr><tr>
    <td><a href="#Flexsup">sealflex.svl</a></td>
    <td>Flexible Molecular Superposition</td>

</tr><tr>
    <td><a href="#smics">smics.svl</a></td>
    <td>Parallelized Stochastic Search</td>
</tr><tr>
    <td><a href="#">sniffer.svl</a></td>
    <td>Sniffer Pseudodynamics</td>
</tr><tr>
    <td><a href="#Solv">vajdaweng.svl</a></td>
    <td>Solvation Free Energy from Surface Area</td>
</tr><tr>
    <td><a href="#NVE">verlet.svl</a></td>
    <td>NVE Molecular Dynamics Simulation</td>
</tr><tr>
    <td><a href="#WebMake">webmake.svl</a></td>
    <td>Output Database as HTML</td>
</tr><tr>
    <td><a href="#Window">windemo.svl</a></td>
    <td>SVL Window Toolkit Demo</td>
</tr>
</table>
</dir>


<p><a href="../index.htm">MOE Table of Contents</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
