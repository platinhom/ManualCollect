<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--
!!	arithmet.htm
!!
!!	27-oct-2009 (ms) roundf
!!	01-apr-2009 (al) added anynan, allfinite
!!	10-sep-2008 (pl) added mod1
!!	15-nov-2002 (pl) added finite, even, ceil, one, etc.
!!
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions add, div, div1p, mul, sub, iadd, imul, isub, inc, dec>
<meta functions inv, invz, mod, pscan, abs, neg, sign, sgn>
<meta functions isnan, finite, infinite, ceil, floor, round, roundf, one, zero>
<meta functions anynan, allfinite>
<meta functions even, odd, mod1>
<meta keywords>

<title>Arithmetic Functions</title>
</head>
<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Arithmetic Functions</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<pre>
    v = x + y
    v = x / y
    v = x * y
    v = x - y
    v = -x

    v = <a class="fcnlink" href="#abs">abs</a>       x
    v = <a class="fcnlink" href="#add">add</a>       [x1,...,xN]
    v = <a class="fcnlink" href="#allfinite">allfinite</a> x
    v = <a class="fcnlink" href="#anynan">anynan</a>    x
    v = <a class="fcnlink" href="#ceil">ceil</a>      x
    v = <a class="fcnlink" href="#dec">dec</a>       x
    v = <a class="fcnlink" href="#div">div</a>       [x,y]
    v = <a class="fcnlink" href="#div1p">div1p</a>     [x1,...,xN]
    v = <a class="fcnlink" href="#even">even</a>      x
    v = <a class="fcnlink" href="#finite">finite</a>    x
    v = <a class="fcnlink" href="#floor">floor</a>     x
    v = <a class="fcnlink" href="#iadd">iadd</a>      [x1,...,xN]
    v = <a class="fcnlink" href="#inc">inc</a>       x
    v = <a class="fcnlink" href="#infinite">infinite</a>  x
    v = <a class="fcnlink" href="#inv">inv</a>       x
    v = <a class="fcnlink" href="#invz">invz</a>      x
    v = <a class="fcnlink" href="#isnan">isnan</a>     x
    v = <a class="fcnlink" href="#imul">imul</a>      [x1,...,xN]
    v = <a class="fcnlink" href="#isub">isub</a>      [x,y]
    v = <a class="fcnlink" href="#mod">mod</a>       [x,y]
    v = <a class="fcnlink" href="#mod1">mod1</a>      x
    v = <a class="fcnlink" href="#mul">mul</a>       [x1,...,xN]
    v = <a class="fcnlink" href="#neg">neg</a>       x
    v = <a class="fcnlink" href="#odd">odd</a>       x
    v = <a class="fcnlink" href="#one">one</a>       x
    v = <a class="fcnlink" href="#pscan">pscan</a>     [x1,...,xN]
    v = <a class="fcnlink" href="#round">round</a>     x
    v = <a class="fcnlink" href="#roundf">roundf</a>    x
    v = <a class="fcnlink" href="#sgn">sgn</a>       [x,y]
    v = <a class="fcnlink" href="#sign">sign</a>      x
    v = <a class="fcnlink" href="#sub">sub</a>       [x,y]
    v = <a class="fcnlink" href="#zero">zero</a>      x
</pre>

<h2>Description</h2>

<p>
SVL provides a number of <i>arithmetic functions</i> that are used
for basic arithmetic operations like addition, subtraction, multiplication
and division.  The binary infix notation <tt>+, -, *, /</tt> are
shorthand for the <tt>add</tt>, <tt>sub</tt>, <tt>mul</tt> and <tt>div</tt>
functions, respectively, with two arguments.

<!-- DESC -->

<p>
<center>
<table class="titlebar" border="1" cellpadding="5" width="90%">
<tr>
<th>Function</th>
<th align="center">Value</th>
<th>Description</th>
</tr>

<tr>
<td>
<a name="abs"></a><tt>abs&nbsp;x</tt>
</td>
<td align="center">|&nbsp;<i>x</i>&nbsp;|
<td>The absolute value of <tt>x</tt>.  Returns <tt>-x</tt> for negative
<tt>x</tt> and <tt>x</tt> otherwise.
</td>
</tr>

<tr>
<td>
<a name="add"></a><tt>add&nbsp;[x1,...,xN]</tt>
</td>
<td align="center">
<i>x</i><sub>1</sub>&nbsp;+&nbsp;...&nbsp;+&nbsp;<i>x<sub>N</sub></i>
<td>The sum of the {<i>x<sub>i</sub></i>}.  Addition is carried out
in floating point.
</td>
</tr>

<tr>
<td>
<a name="allfinite"></a><tt>allfinite&nbsp;x</tt>
</td>
<td align="center">
<td>Returns 1 if all elements of <tt>x</tt> are finite, i.e.
not NaN or Inf, otherwise returns 0.
</td>
</tr>

<tr>
<td>
<a name="anynan"></a><tt>anynan&nbsp;x</tt>
</td>
<td align="center">
<td>Returns 1 if any elements of <tt>x</tt> are NaN, otherwise
returns 0.
</td>
</tr>

<tr>
<td>
<a name="ceil"></a><tt>ceil&nbsp;x</tt>
</td>
<td align="center">round_up&nbsp;(<i>x</i>)
<td>Rounds each given value up (towardes <tt>+Inf</tt>) to the nearest integer.
</td>
</tr>

<tr>
<td>
<a name="dec"></a><tt>dec&nbsp;x</tt>
</td>
<td align="center">decrement&nbsp;(<i>x</i>)
<td>For integer values 
<a name="isub"></a><tt>isub&nbsp;[x,1]</tt> is returned.
For floating point values <tt>sub&nbsp;[x,1]</tt> is returned.
For character values the previous ASCII character is returned.
Use this function carefully since integer or character overflow is
possible.
</td>
</tr>

<tr>
<td>
<a name="div"></a><tt>div&nbsp;[x,y]</tt>
</td>
<td align="center"><i>x</i>&nbsp;/&nbsp;<i>y</i>
<td>The quotient <tt>x</tt> divided by <tt>y</tt>.  If <tt>y</tt> is zero
then <tt>Inf</tt> or <tt>-Inf</tt> will result.  If <tt>x</tt> and
<tt>y</tt> are both zero or both infinite then <tt>NaN</tt> results.
Division is carried out in floating point.
</td>
</tr>

<tr>
<td>
<a name="div"></a>
<a name="div1p"></a><tt>div1p&nbsp;[x1,...,xN]</tt>
</td>
<td align="center"><img src="arithmet/div1p.gif"></center>
<td>Evaluation of continued fractions.
For two values <tt>x</tt> and <tt>y</tt> use <tt>div1p&nbsp;[x,y]</tt>
for improved precision to calculate <tt>x</tt>/(1+<tt>y</tt>)
when <tt>y</tt> is near zero.
Division is carried out in floating point.
</td>
</tr>

<tr>
<td>
<a name="even"></a><tt>even&nbsp;x</tt>
</td>
<td align="center"><i>x</i>&nbsp;+&nbsp;1&nbsp;(mod&nbsp;2)
<td>Returns 1 if the given value is even otherwise 0.  Fractional values
are rounded to the nearest integer.
</td>
</tr>

<tr>
<td>
<a name="finite"></a><tt>finite&nbsp;x</tt>
</td>
<td align="center">isfinite(<i>x</i>)
<td>Returns 1 if the given value is finite; that is, neither
<tt>+Inf</tt>, -<tt>Inf</tt> nor <tt>NaN</tt>.  Otherwise 0 is returned.
</td>
</tr>

<tr>
<td>
<a name="floor"></a><tt>floor&nbsp;x</tt>
</td>
<td align="center">round_down&nbsp;(<i>x</i>)
<td>Rounds each given value down (towardes <tt>-Inf</tt>)
to the nearest integer.
</td>
</tr>

<tr>
<td>
<a name="iadd"></a><tt>iadd&nbsp;[x1,...,xN]</tt>
</td>
<td align="center">
<i>x</i><sub>1</sub>&nbsp;+&nbsp;...&nbsp;+&nbsp;<i>x<sub>N</sub></i>
<td>The integer sum of the {<i>x<sub>i</sub></i>}.  Floating point
values are first rounded to integer values, then converted to integer
representation.
Addition is carried out with integer arithmetic:
<i>integer overflow is possible</i>.
This function should only be used when space and memory are at a premium,
and when the data are known to be integers.
</td>
</tr>

<tr>
<td>
<a name="inc"></a><tt>inc&nbsp;x</tt>
</td>
<td align="center">increment&nbsp;(<i>x</i>)
<td>For integer values 
<a name="iadd"></a><tt>iadd&nbsp;[x,1]</tt> is returned.
For floating point values <tt>add&nbsp;[x,1]</tt> is returned.
For character values the next ASCII character is returned.
Use this function carefully since integer or character overflow is
possible.
</td>
</tr>

<tr>
<td>
<a name="infinite"></a><tt>infinite&nbsp;x</tt>
</td>
<td align="center">not&nbsp;isfinite(<i>x</i>)
<td>Returns 1 if the given value is not finite; that is, one of
<tt>+Inf</tt>, -<tt>Inf</tt> or <tt>NaN</tt>.   Otherwise 0 is returned.
</td>
</tr>

<tr>
<td>
<a name="inv"></a><tt>inv&nbsp;x</tt>
</td>
<td align="center">1&nbsp;/&nbsp;x
<td>
The multiplicative inverse of <tt>x</tt>.  If <tt>x</tt> is zero then
<tt>Inf</tt> is returned.
</td>
</tr>

<tr>
<td>
<a name="inv"></a>
<a name="invz"></a><tt>invz&nbsp;x</tt>
</td>
<td align="center">1&nbsp;/&nbsp;x
<td>
The multiplicative inverse of <tt>x</tt> with zero check.  If <tt>x</tt> is
zero then 0 is returned.
</td>
</tr>

<tr>
<td>
<a name="imul"></a><tt>imul&nbsp;[x1,...,xN]</tt>
</td>
<td align="center"><img src="arithmet/imul.gif">
<td>The integer product of the {<i>x<sub>i</sub></i>}.  Floating point
values are first rounded to integer values, then converted to integer
representation.
Multiplication is carried out with integer arithmetic:
<i>integer overflow is possible</i>.
This function should only be used when space and memory are at a premium,
and when the data are known to be integers.
</td>
</tr>

<tr>
<td>
<a name="isnan"></a><tt>isnan&nbsp;x</tt>
</td>
<td align="center">isnan(<i>x</i>)
<td>Returns 1 if the given value is <tt>NaN</tt> ("not a number") otherwise 0.
</td>
</tr>

<tr>
<td>
<a name="isub"></a><tt>isub&nbsp;[x,y]</tt>
</td>
<td align="center">
<i>x</i>&nbsp;-&nbsp;<i>y</i>
<td>The integer difference <tt>x</tt> minus <tt>y</tt>.
Floating point values are first rounded to integer values, then converted
to integer representation.
Subtraction is carried out with integer arithmetic:
<i>integer overflow is possible</i>.
This function should only be used when space and memory are at a premium,
and when the data are known to be integers.
</td>
</tr>

<tr>
<td>
<a name="mod"></a><tt>mod&nbsp;[x,y]</tt>
</td>
<td align="center"><i>x</i>&nbsp;(mod&nbsp;<i>y</i>)
<td>
The value of <tt>x</tt> modulo <tt>y</tt>.  Loosely speaking, this is the
remainder when <tt>x</tt> is divided by <tt>y</tt>.  The returned value
is always in the range [0,<i>x</i>) when <i>y</i> is positive and
(<i>x</i>,0] when <i>y</i> is negative.  Zero is returned when <i>y</i>=0.
</td>
</tr>

<tr>
<td>
<a name="mod"></a>
<a name="mod1"></a><tt>mod1&nbsp;x</tt>
</td>
<td align="center"><i>x</i>&nbsp;(mod&nbsp;<i>1</i>)
<td>
The value of <tt>x</tt> modulo <tt>1</tt>.  This is equivalent to
<tt>mod&nbsp;[x,1].
</td>
</tr>

<tr>
<td>
<a name="mul"></a><tt>mul&nbsp;[x1,...,xN]</tt>
</td>
<td align="center"><img src="arithmet/mul.gif">
<td>The product of the {<i>x<sub>i</sub></i>}.
Multiplication is carried out in floating point.
</td>
</tr>

<tr>
<td>
<a name="neg"></a><tt>neg&nbsp;x</tt>
</td>
<td align="center">-&nbsp;<i>x</i>
<td>Negate <tt>x</tt>.
</td>
</tr>

<tr>
<td>
<a name="odd"></a><tt>odd&nbsp;x</tt>
</td>
<td align="center"><i>x</i>&nbsp;(mod&nbsp;2)
<td>Returns 1 if the given value is odd otherwise 0.  Fractional values
are rounded to the nearest integer.
</td>
</tr>

<tr>
<td>
<a name="one"></a><tt>one&nbsp;x</tt>
</td>
<td align="center">1
<td>Returns 1 for every value in the input vector.
</td>
</tr>

<tr>
<td>
<a name="pscan"></a><tt>pscan&nbsp;[x1,...,xN]</tt>
</td>
<td align="center"><img src="arithmet/pscan.gif">
<td>The vector of partial sums.  The resulting vector <tt>v</tt> is such
that <tt>v(i)</tt> is the sum of the first <tt>i</tt> elements of the
input vector.
Addition is carried out in floating point.
</td>
</tr>

<tr>
<td>
<a name="round"></a><tt>round&nbsp;x</tt>
</td>
<td align="center">round&nbsp;(<i>x</i>)
<td>Rounds each given value towards the nearest integer.
</td>
</tr>

<tr>
<td>
<a name="roundf"></a><tt>roundf&nbsp;x</tt>
</td>
<td align="center">round&nbsp;(<i>x</i>)
<td>Rounds each given value towards the nearest IEEE 32-bit floating
point number.
</td>
</tr>

<tr>
<td>
<a name="sgn"></a><tt>sgn&nbsp;[x,y]</tt>
</td>
<td align="center"><img src="arithmet/sgn.gif">
<td>
Returns <tt>x</tt> if <tt>y</tt>&gt;0 and <tt>-x</tt> otherwise.
Note that the IEEE standard provides for two representations of zero:
0 and -0.
</td>
</tr>

<tr>
<td>
<a name="sign"></a><tt>sign&nbsp;x</tt>
</td>
<td align="center">sign(<i>x</i>)
<td>
Returns -1 for negative <tt>x</tt>, 0 when <tt>x</tt>=0 and 1 for
positive <tt>x</tt>.
Note that the IEEE standard provides for two representations of zero:
0 and -0.
</td>
</tr>

<tr>
<td>
<a name="sub"></a><tt>sub&nbsp;[x,y]</tt>
</td>
<td align="center"><i>x</i>&nbsp;-&nbsp;<i>y</i>
<td>The difference <tt>x</tt> minus <tt>y</tt>.
Subtraction is carried out in floating point.
</td>
</tr>

<tr>
<td>
<a name="zero"></a><tt>zero&nbsp;x</tt>
</td>
<td align="center">0
<td>Returns 0 for every value in the input vector.

</table>
</center>
</p>

<!-- ENDDESC -->

<p>
The unary operators (like <tt>inc</tt> and <tt>dec</tt>)
apply to all scalar values in the argument vector (no matter how deeply
nested).
The binary operators (like <tt>add</tt> and <tt>mul</tt>)
match elements of the arguments in pair no matter how deeply nested.  Unit
extension applies.


<h2>See Also</h2>

<p>
<a href="exponent.htm">Exponentiation Functions</a><br />
<a href="specfcn.htm">Special Functions</a><br />
<a href="trigfcn.htm">Trigonometric Functions</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
