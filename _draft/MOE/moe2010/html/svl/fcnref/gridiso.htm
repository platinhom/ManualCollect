<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions GRID_ISO_VALUE, GRID_ISO_POLY, GRID_ISO_EVEN>
<meta functions GRID_ISO_X, GRID_ISO_Y, GRID_ISO_Z>
<meta functions GRID_ISO_FX, GRID_ISO_FY, GRID_ISO_FZ>
<meta functions grid_iso, grid_isovtx_coord, grid_isovtx_grad>
<meta functions grid_isoidx_emit, grid_isoidx_drop>


<title>Grid Isosurface: grid_iso, grid_isovtx_coord, grid_isovtx_grad...</title>

</head>

<body  bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Grid Isosurface</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>


<pre>
    [isovtx, isoidx] = <a class="fcnlink" href="#grid_iso">grid_iso</a> [data, shape, level, [d1,d2]]
    [isovtx, isoidx] = <a class="fcnlink" href="#grid_iso">grid_iso</a> [data, shape, level, [d1,d2,d3]]

    points = <a class="fcnlink" href="#grid_isovtx_coord">grid_isovtx_coord</a> [data, shape, isovtx, level, [d1,d2..]]
    normals = <a class="fcnlink" href="#grid_isovtx_grad">grid_isovtx_grad</a> [data, shape, isovtx, level, [d1,d2..]]
    index = <a class="fcnlink" href="#grid_isoidx_emit">grid_isoidx_emit</a> [isoidx, gtype, opt]
    isoidx = <a class="fcnlink" href="#grid_isoidx_drop">grid_isoidx_drop</a> [isoidx, flag]
</pre>


<h2>Description</h2>


SVL provides a special set of functions to generate and manipulate
grid iso-contours and iso-surfaces of different kinds.

<p>In general, function <tt>grid_iso</tt> is used to generate
a representation of the isosurface of the specified level:

a list of <em>iso-vertices</em> and a list <em>iso-indices</em>.

Both lists are flat vectors of integers with special markers
that allow them to be processed into 3D coordinates of line segments and
triangles that form different graphical forms of the iso-surface.

<p>The remaining functions process these lists and
extract the specific information needed by the functions of the
graphical interface (i.e. <tt>GVertex</tt>).

<!-- DESC -->

<table width=100% cellpadding=5>

<tr>
<td valign="baseline">
<a name="grid_iso"></a><tt>grid_iso</tt>
<td valign="baseline">Generates isosurface of the specified level
with iso-vertices lying
    on the specified axes.

<tr>
<td valign="baseline">
<a name="grid_iso"></a>
<a name="grid_isovtx_coord"></a><tt>grid_isovtx_coord</tt>
<td valign="baseline">Returns coordinates of a set of isovertices.

<tr>
<td valign="baseline">
<a name="grid_iso"></a>
<a name="grid_isovtx_grad"></a><tt>grid_isovtx_grad</tt>
<td valign="baseline">Returns gradients of a set of isovertices.

<tr>
<td valign="baseline">
<a name="grid_iso"></a>
<a name="grid_isoidx_emit"></a><tt>grid_isoidx_emit</tt>
<td valign="baseline">Returns a list of indices (with no markers)
of either line segments
    that form a set of 2D contours or a 3D mesh or triangles that form a 3D
    surface.

<tr>
<td valign="baseline">
<a name="grid_iso"></a>
<a name="grid_isoidx_drop"></a><tt>grid_isoidx_drop</tt>
<td valign="baseline">Returns only those of the supplied iso-indices
that correspond to
    odd cubes.  If <tt>flag=1</tt>, iso-indices only from even cubes are
    returned.
</table>

<!-- ENDDESC -->

<p>The process of generating an isosurface is as follows:


<ol>
<li><tt>grid_iso</tt> is used to generate a list of
isovertices,<tt>isovtx</tt>, and a list of isoindices, <tt>isoidx</tt>.

<p>
<li><tt>grid_isovtx_coord</tt> and
<tt>grid_isovtx_grad</tt> are used calculate the points of the isosurface
and the field gradients at those points.

<p>
<li><tt>grid_isoidx_emit</tt> is used to produce a list of line
segments or triangles that form the surface.

<p>The parameter <tt>gtype</tt> determines the type of surface generated:
<p><table border="1" cellpadding="5">
    <th>gtype</th><th>Surface Type</th>
    <tr><td>1	<td>unique indices of points of a dot-surface.
    <tr><td>2	<td>indices of line segments of a 3D mesh or a 2D curves.
    <tr><td>3	<td>indices of triangles of a 3D surface.
</table>

<p>The value of <tt>gtype</tt> should be given as the segment descriptor
to function <tt>GVertex</tt>.

<p>The parameter <tt>opt</tt>, a vector of numbers, can be used to specify
additional constraints.  Its default value is <tt>[]</tt> 

<p>If <tt>gtype = 3</tt>, <tt>opt</tt> can be used to
determine the order of the vertices in the generated triangles.
By default the triangles are generated in the positive
(counter-clockwise) direction about the gradient of the field.
This allows the direct use of function <tt>grid_isovtx_grad</tt> to calculate
the surface normals.

<p>If <tt>opt</tt> includes value -1, the triangles will be generated
in reverse order, which allows the use of the negative gradient of the field
for the surface normals.

<p>If <tt>gtype = 2</tt> and the <tt>isoidx</tt> represents a 3D mesh,
then the value of <tt>opt</tt> can be used to determine whether the line
segments on the 6 grid boundaries (boundary rectangles) should be omitted.
This is used when plotting surfaces of multiple adjacent grids.

</ol>

<p>
Each of the 6 boundaries of a 3D grid is perpendicular to
one axis.  Of the two boundaries perpendicular to the same axis,
the boundary of the smaller grid coordinate along that axis is
called the "front" boundary.  The other one is called the "rear" boundary.

<p>
By default all boundaries are included.  Otherwise,
small positive integers specify boundaries to be excluded.

Numbers 1, 2, and 3 correspond
to front grid boundaries perpendicular to axis X, Y, and Z, respectively.
Numbers 4, 5, and 6 correspond to both front and rear boundaries
perpendicular to axis X, Y, and Z, respectively.


<p>The argument <tt>isoidx</tt> of function <tt>grid_isoidx_emit</tt>
may be optionally pre-processed by function <tt>grid_isoidx_drop</tt>:

<pre>
    isoidx = <span class="fcndef">grid_isoidx_drop</span> [isoidx, flag]
</pre>

This will remove from the list all iso-indices that correspond to
even isocubes, with the result of the generated surface assuming
a checkered pattern of a camouflage net.

If <tt>flag=1</tt>, iso-indices only from even cubes are returned.

<p>Example: generate an isosurface of a grid
<tt>[data,shape]</tt> at a given level, <tt>level</tt>.

<pre>
    const color = 0xcccccc;
    local dims = [1,2,3];
    local gtype = 2;

    local [isovtx, isoidx] = grid_iso [data, shape, level, dims];
    local points = grid_isovtx_coord [data, shape, isovtx, level, dims];
    local normals = - grid_isovtx_grad [data, shape, isovtx, level, dims];
    local idx = grid_isoidx_emit [isoidx, gtype, -1];

    GVertex  [GCreate SURF_NAME, gtype, idx, color, points, normals];
</pre>


<h4>Details</h4>

<p>Instead of using the provided isovertex/isoindex processing functions,
the user can choose to generate the necessary graphical information
explicitly with SVL expressions.

<p>The following describes the format of the lists returned by
functions <tt>grid_iso</tt>.

<p>
The isosurface is generated by a 2D or 3D marching-cube algorithm.
The algorithm uses the value of the field at the corners of each isocube
and produces a list of polygons connecting points of the same value.

<p>
<p>Each isovertex and each isoindex contains an index value in
its low order bits and a set of markers in its high-order bits.

Mask <tt>GRID_ISO_VALUE</tt> can be used to strip the high-order bits.

<p>Each vertex of the isosurface lies on a grid line between two neighboring
gridpoint along one of the specified axes.  When three grid axes are specified,
we can connect the vertices either with line segments, creating a mesh-like
appearance of the isosurface, or with opaque triangles, creating appearance
of a solid surface.  When only two grid axes are specified, the isosurface
will appear as a series the iso-contours.

<p>Each of the iso-vertices, <tt>isovtx</tt>, is marked by one of the
markers in high-order bits
<tt>GRID_ISO_X</tt>,
<tt>GRID_ISO_Y</tt>, and
<tt>GRID_ISO_Z</tt>,
which specifies the axis on which the vertex lie.

<p>The low-order bits contain the higher of the indices of the two
neighboring gridpoints.

<p>
Each of the iso-indices, <tt>isoidx</tt> points to one iso-vertex,
with multiple iso-indices possibly pointing to the same iso-vertex.
The type of each iso-index is stored in the high-order bits.

<p>
The following markers (bits) can be used
identify and process the polygons generated
by the marching-cube algorithm:

<p><table align="center" border="1" cellpadding="5">
<tr>
<td valign=top><tt>GRID_ISO_POLY</tt>
<td valign=top>marks the beginning of each new polygon.

<tr>
<td valign=top><tt>GRID_ISO_EVEN</tt>
<td valign=top>marks the beginning of a new polygon of an even cube.

<tr>
<td valign=top>
    <tt>GRID_ISO_X</tt><br />
    <tt>GRID_ISO_Y</tt><br />
    <tt>GRID_ISO_Z</tt> 
<td valign=top>mark vertices on grid boundaries (both the front and the
rear boundaries).

<tr>
<td valign=top>
    <tt>GRID_ISO_FX</tt><br />
    <tt>GRID_ISO_FY</tt><br /> 
    <tt>GRID_ISO_FZ</tt> 
<td valign=top>mark vertices on front grid boundaries.  
</table></center>

<p>The low-order bits contain the index into the list of isovertices,
identifying the point on the surface.

<p>Example: given a list of isoindices, <tt>isoidx</tt>,
a list of points, and a list of normals,
generated by functions <tt>gridx_isovtx_coord</tt>
and <tt>gridx_isovtx_grad</tt>,
isolate each polygon of the surface and shrink it by 15%
towards its center.
Generate a list of indices, points, and normals that represent
the new surface:

<pre>
local function shrink_polygons [isoidx, points, normals]
    const S = 0.15;		// shrink by 15%

        // Find the polygons

    local m = notnot bitand [isoidx, GRID_ISO_POLY];
    local c = mtoc m;

        // Calculate the indices of the triangles and the centers
	// of each polygon

    local idx = grid_isoidx_emit [isoidx, 3];
    local cidx = grid_isoidx_emit [
	bitor [ pscan m, bitand [isoidx, bitnot GRID_ISO_VALUE] ], 
	3
    ];

        // Calculate the center of each polygon

    local center = apt get [points, [bitand[GRID_ISO_VALUE, isoidx]]];
    center = app pscan center || [rotl m];
    center = center - apt rotrpoke [center, 0];
    center = center / [c];

        // Align points and normals with the centers

    points = apt get [points, [idx]];
    normals = apt get [normals, [idx]];
    center = apt get [center, [cidx]];
    idx = x_id idx;

        // Shrink the polygons

    points =  (1-S) * points + S * center;

    return [idx, points, normals];
endfunction
</pre>

<h2>See Also</h2>

<a href="introgrid.htm">Grid Functions</a><br />
<a href="../manual/gridman.htm">SVL Multidimensional Grids</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
