<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->


<!--
!!	s_stmt.htm			statements
!!
!!	19-oct-2002 (pl) created
!!
!! supersedes: svl_stmt.htm svl_ifthen.htm svl_loop.htm
!!
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta functions break, continue, for, while, loop, until>
<meta functions if, elseif>

<meta SVL break, continue, for, while, loop, until, endloop>
<meta SVL if, elseif, else>
<meta SVL:syntax SVL Statements>

<title>SVL Statements</title>
</head>
<body  bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>SVL Statements</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<p>
<blockquote>
<table border="0">

<tr>
<td valign="top"><i>statement</i>
<td width="10">
<td>
: <i>expression</i> <tt>;</tt><br />
: <tt>print</tt> <i>expression</i> <tt>;</tt><br />
: <tt>if</tt> <i>expression</i> <tt>then</tt>
  <b>{</b> <tt>elseif</tt> <i>statements</i> <b>}</b>* <b>{</b>
  <tt>else</tt> <i>statements</i> <b>}</b>
  <tt>endif</tt><br />
: <b>{</b> <tt>for</tt> <i>for</i> <b>}</b>
  <b>{</b> <tt>while</tt> <i>expression</i> <b>}</b>*
  <tt>loop</tt> <i>statements</i>
  <b>{</b> <tt>until</tt> <i>expression</i> <b>}</b>*
  <tt>endloop</tt> <br />
: <tt>break ;</tt> <br />
: <tt>continue ;</tt>
</tr>

<tr>
<td valign="top"><i>for</i>
<td width="10">
<td>: <i>expression</i><br />
: <i>lvalue</i> <tt>=</tt> <i>expression</i> <tt>,</tt> <i>expression</i>
  <b>{</b> <tt>,</tt> <i>expression</i> <b>}</b><br />
: <i>lvalue</i> <tt>in</tt> <i>expression</i>
</tr>

<tr>
<td valign="top"><i>statements</i>
<td width="10">
<td>: <b>{</b> <i>statement</i> <b>}</b>*
</tr>

</table>
</blockquote>

<h2>Description</h2>

<p>SVL statements are the primary programming construct.  Statements can be
entered at an SVL command line interpreter or incorporated into definitions
of functions.  Statements serve to effect calculations, control program
execution and iteration in loops.
Control flow statements dictate the order in which computations are
done. By default, statements are executed linearly, in the order in which
they appear in a program.  Conditional execution, looping and jump
statements alter the flow of a program, allowing certain pieces of code to
be bypassed, and others to be repeated.

<p>
The following notation is used to describe SVL syntax and syntactic
categories.
The name of a category is printed in italics, e.g. <i>lvalue</i>.</li>
SVL keywords and symbols are printed in teletype, e.g. <tt>loop</tt>
or <tt>[]</tt>.</li>
Each category is defined as a list of syntactic patterns composed
of SVL keywords or symbols and of names of other categories (like BNF
notation); for example,
<i>lvalue</i> : <i>identifier</i> <tt>[</tt> <i>expression</i> <tt>]</tt> 
means "an lvalue can be an identifier followed by a bracketed expression".
Bold braces are used to apply a special rule to the part of the pattern
inside the braces:

<ul>
<li><b>{</b>...<b>}</b> specifies an optional pattern, e.g.
    <span class="nobr"><b>{</b><em>for</em><b>}</b> <tt>loop</tt></span>
</li>

<li><b>{</b>...<b>}<sup>*</sup></b> specifies a sequence of zero or more
    repetitions, e.g.
    <span class="nobr"><b>{</b><em>while</em><b>}<sup>*</sup></b> <tt>loop</tt></span>
</li>

<li><b>{</b>...<b>}<sup>+</sup></b> specifies a sequence of one or more
    repetitions, e.g.
    <span class="nobr"><b>{</b><em>digit</em><b>}<sup>*</sup></b></span>
</li>

<li><b>{</b>...<b>|</b>...<b>}</b> and
    <b>{</b>...<b>|</b>...<b>}<sup>1</sup></b> specify
    (optional and compulsory) alternative patterns, e.g.
    <span class="nobr"><b>{</b><tt>local</tt><b> | </b><tt>global</tt><b>}</b>
	<tt>function</tt></span>
</li>
</ul>

<p>
<b>Expression and Print Statements</b>.
An <i>expression</i> followed by semicolon is a statement.  For example,
<pre>    x = y + z;
</pre>
is a statement that stores the result of summing the vectors <tt>y</tt>
and <tt>z</tt> into the variable <tt>x</tt>.  An expression statement
preceded by the keyword <tt>print</tt> will cause the resulting value of
the expression to be printed to the output terminal.  For example,
<pre>    <b>print</b> sqrt 2;
</pre>
will print an approximation to the square root of two to the output terminal.
At the SVL command line, the trailing semicolon can be omitted.

<p>
<b>Conditional Execution</b>.
The <tt>if</tt> statement causes execution of at most one of the contained
<i>statements</i> blocks.
The <tt>if</tt> statement is used to make a multi-way decision. A piece of
code is executed only if a certain condition is satisfied. The optional
<tt>elseif</tt> and <tt>else</tt> branches of the <tt>if</tt> statement allow
for alternative routes of possibly conditioned execution in the event that
earlier conditions are not met. The formal syntax is
<blockquote>
  <tt>if</tt> <i>expression</i> <tt>then</tt>
  <b>{</b> <tt>elseif</tt> <i>statements</i> <b>}</b>* <b>{</b>
  <tt>else</tt> <i>statements</i> <b>}</b>
  <tt>endif</tt><br />
</blockquote>
There is no limit on the number of <tt>elseif</tt> constructs that may be
present. The <tt>if</tt>, </tt>then</tt> and <tt>endif</tt> keywords
must all be present. No terminating semi-colon is required after the
<tt>endif</tt>.
<p>
All of the <i>expression</i> constructs following <tt>if</tt> and
<tt>elseif</tt> must evaluate to a numeric scalar.  If they do not, a run-time
error will result.
If the scalar value of such an <i>expression</i> is non-zero then the
<i>expression</i> is considered to be the value "true" otherwise it has the
value "false".  Whenever an <i>expression</i> in the <tt>if</tt> statement
evaluates to "true" the <i>statements</i> block immediately following the next
<tt>then</tt> keyword is executed, following which, execution jumps immediately
after the </tt>endif</tt> keyword (skipping all other <i>statements</i> blocks
contained in the entire <tt>if</tt> statement.  If none of the <i>expression</i>
constructs evaluate to "true" then the <i>statements</i> block after the
<tt>else</tt> keyword is executed (if present) and execution then jumps
to immediately after the <tt>endif</tt> keyword</tt>.
<p>
For example, suppose that the variable <tt>x</tt> contains some value,
then the <tt>if</tt> statement
<pre>    <b>if</b> x >= 100 <b>then</b>
        print 'more than two digits';
    <b>elseif</b> x >= 10 <b>then</b>
        print 'two digits';
    <b>elseif</b> x >= 0 <b>then</b>
        print 'one digit';
    <b>else</b>
        print 'negative';
    <b>endif</b>
</pre>
<p>will print exactly one token: the token <tt>'more than two digits'</tt> if
<tt>x</tt> has a value greater than or equal to 100; the token
<tt>'two digits'</tt> if <tt>x</tt> has a value less than 100 and greater
than or equal to 10; the token <tt>'one digit'</tt> if <tt>x</tt> has
a value greater than or equal to 0 and less than 10; and the token
<tt>'negative'</tt> otherwise.
<p>
If <tt>y</tt> is a numeric vector of scalars then the <tt>if</tt> statement
<pre>    <b>if</b> add y <> 0 <b>then</b>
        y = y / add y;
        print 'normalized';
    <b>endif</b>
</pre>
will divide each element of <tt>y</tt> and print the token <tt>'normalized'</tt>
provided that the sum of the elements
in <tt>y</tt> is non-zero.  Note that if the expression <tt>add y <> 0</tt>
evaluated to a value that is not a numeric scalar (e.g., a vector) then
a run-time error would result.

<p>
<b>Loop Statements</b>.
Repeating a block of statements is effected with the <tt>loop</tt> keyword.
Loop termination tests may be present at both the start and end of a loop;
these are indicated by the presence of the <tt>for</tt>, <tt>while</tt>
and <tt>until</tt> keywords (all of which are optional).  The simplest
loop has the form <tt>loop</tt> <i>statements</i> <tt>endloop</tt>.
The <i>statements</i> block is repeatedly executed (an infinite loop).
For example, the code
<pre>    <b>loop</b>
        print randU 1;
    <b>endloop</b>
</pre>
will print uniformly distributed random numbers to the output terminal
indefinitely.  Zero or more <tt>while</tt> <i>expression</i> constructs
can be placed before the <tt>loop</tt> keyword.   Each such <tt>while</tt>
construct will terminate execution of the loop when the given <i>expression</i>
evaluates to "false" (and the others skipped). The definition of how "true"
and "false" are calculated is given above in the section on Conditional
Execution.  Each such <i>expression</i> is evaluated at the start of each
iteration of the loop in the order presented.  For example, the following
code evaluates the first order Bessel function J0:
<pre>    local J0 = 1, term = 1, i = 0;
    local xx = sqr (x/2);

    <b>while</b> (i = inc i) < MAX_ITERATIONS
    <b>while</b> abs term > EPSILON
    <b>loop</b>
        term = -term * xx / sqr i;
        J0 = J0 + term; 
    <b>endloop</b>
</pre>
<p>
Note that the presence of two <tt>while</tt> keywords does <i>not</i>
indicate two nested loops; there is only one loop but it has two
termination conditions that are evaluated at the start of each iteration.
<p>
Zero or more <tt>until</tt> <i>expression</i> constructs can be placed before
the <tt>endloop</tt> keyword.   Each such <tt>until</tt> construct will
terminate execution of the loop when the given <i>expression</i>
evaluates to "true" (and the others skipped).  Each such <i>expression</i> is
evaluated at the end of each iteration of the loop in the order presented.
For example, the following code evaluates the first order modified Bessel
function IO(x).
<pre>    local I0 = 1, term = 1, i = 1; 
    local xx = sqr (x/2), fac = xx;

    <b>loop</b>
        local fact = xx / sqr (i=inc i);
        term = term * fac;
        I0 = I0 + term;

        if i &gt;= 2 then fac = fact; endif
        local bd = term / (sgn [1,(1-fact)] * maxE [abs(1-fact),EPSILON]);
    <b>until</b> i &gt; MAX_ITERATIONS
    <b>until</b> abs bd &lt; EPSILON
    <b>endloop</b> 
</pre>
<p>
The presence of two <tt>until</tt> keywords does <i>not</i> indicate two
nested loops.a  There is only one loop but it has two termination conditions
that are evaluated at the end of each iteration.
<p>
At most one <tt>for</tt> construct can appear in a loop and, if present,
it must be placed prior to any <tt>while</tt> constructs.
The <tt>for</tt> loop has an explicit counter associated with it. Unlike
the <tt>while</tt> and <tt>until</tt> conditions, the data related to the
counter in the <tt>for</tt> is evaluated just once (prior to the start
of the loop).
The simplest <tt>for</tt> loop form is <tt>for</tt> <i>expression</i>.
The expression must evaluate to a numeric scalar (otherwise a run-time
error will result).  This value is then rounded down to the nearest integer
and the loop executed that many times.  For example,
<pre>    <b>for</b> 10 <b>loop</b>
        print randU 1;
    <b>endloop</b>
</pre>
will print out exactly ten uniformly distributed random number in the
interval [0,1).  This loop is equivalent to the following code:
<pre>    i = 10;
    <b>while</b> i &gt;= 1 <b>loop</b>
        print randU 1;
        i = i - 1;
    <b>endloop</b>
</pre>
<p>
Note that the value of the loop counter is evaluated prior to the loop.
The <tt>for</tt> <i>lvalue</i> <tt>in</tt> <i>expression</i> form of the
<tt>for</tt> loop derives its loop limits from the length of the value
supplied <i>expression</i>.  The code
<pre>    <b>for</b> x <b>in</b> list <b>loop</b>
        print x;
    <b>endloop</b>
</pre>
<p>is equivalent to
<pre>    e = list;
    i = 1;
    <b>while</b> i &lt;= length e <b>loop</b>
        x = e(i);
        print x;
        i = i + 1;
    <b>endloop</b>
</pre>
<p>The values of <tt>e</tt> and <tt>i</tt> are not available in the loop.
Notice that the expression (in this case <tt>list</tt>) is evaluated only
once prior to the loop.  The <i>lvalue</i> can be any expression that
is legal on the left hand side of an assignment operator.  The previous
example of code equivalence still applies: substitute <tt>x</tt> (symbolically)
with the <i>lvalue</i> and substitute <tt>list</tt> with the <i>expression</i>.
For example,
<pre>    <b>for</b> [a,b] in [ "ab", "cd", "ef" ] <b>loop</b>
        print [b,a];
    <b>endloop</b>
</pre>
<p>will print
<pre>    "ba"
    "dc"
    "fe"
</pre>
<p>to the output terminal.  The <tt>for</tt> <i>lvalue</i> <tt>=</tt>
<i>expression</i> <tt>,</tt> <i>expression</i> <tt>,</tt> <i>expression</i>
form of the for loop is used to directly set the limits of the loop counter
as well as making the loop counter value available in the body of the loop.
The third expression is optional.
This is analogous to the Fortran do loop.  All three expression must
evaluate to a numeric scalar (otherwise a run-tim error results).
The first expression is the start value of the counter.  The second expression
is the end value of the counter.  The third expression is the increment
value of the counter; if the third expression is omitted then 1 is used.
All three expressions can be negative or event non-integral.  For example,
<pre>    <b>for</b> a <b>=</b> 10.5, 6.5, -1 <b>loop</b>
        print a;
    <b>endloop</b>
</pre>
<p>produces the result
<pre>    10.5
    9.5
    8.5
    7.5
    6.5
</pre>
<p>All three expressions are evaluated once prior to the loop.  The code
<pre>    <b>for</b> x <b>=</b> start<b>,</b> end<b>,</b> incr <b>loop</b>
        ....
    <b>endloop</b>
</pre>
is equivalent to
<pre>    x = start;
    i = incr;
    n = floor ((end + i - x) / i);

    <b>for</b> n <b>loop</b>
	....
        x = x + i;
    <b>endloop</b>
</pre>
Note: the value of <i>lvalue</i> (in this case <tt>x</tt>) after the
<tt>endloop</tt> is not defined.

<p>
<b>Jump Statements</b>.
A jump statement causes program execution to unconditionally transfer to
another point in the program.  There are two jump statements indicated
by the keywords <tt>break</tt> or <tt>continue</tt> (followed by a semicolon).
Normally, a <tt>loop</tt> statement terminates when one of the loop
termination conditions is encountered (i.e., a <tt>for</tt> limit, or a
<tt>while</tt> condition, or an <tt>until</tt> condition is satisfied).
However, it may be desirable to truncate the entire iteration or to
truncate the current iteration.  The <tt>break</tt> and <tt>continue</tt>
statements are used to do this.
<p>
The <tt>break</tt> statement causes unconditional transfer of program
execution to the point immediately following the next <tt>endloop</tt>
keyword.  In other words, the entire <tt>loop</tt> construct is terminated.
It is a syntax error to use the <tt>break</tt> statement outside
of a <tt>loop</tt> ... <tt>endloop</tt> statement.  The <tt>while</tt>
and <tt>until</tt> conditions are really just shorthands for <tt>break</tt>
constructs.  For example, the loop
<pre>    while x > 10 loop
        ....
    endloop
</pre>
<p>is the same as
<pre>    loop
        if not (x > 10) then
            <b>break</b>;
        endif
        ....
    endloop
</pre>
<p>
The <tt>continue</tt> statement causes unconditional transfer of program
execution to the point immediately after the <i>statements</i> block
between the <tt>loop</tt> and <tt>endloop</tt> keywords that surround it.
In other words, the remaining statements in the <i>statements</i> block
are skipped and the next iteration is started (after first executing
any <tt>until</tt> conditions).
It is a syntax error to use the <tt>continue</tt> statement outside
of a <tt>loop</tt> ... <tt>endloop</tt> statement.

<h2>See Also</h2>

<a href="s_lex.htm">SVL Lexical Analysis</a><br />
<a href="s_expr.htm">SVL Expressions</a><br />
<a href="s_decl.htm">SVL Declarations</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
