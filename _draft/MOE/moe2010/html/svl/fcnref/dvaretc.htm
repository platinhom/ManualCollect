<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<!--	dvaretc.htm	dvar functions
!!	in: $MANSRC/moemanuals/svl/fcnref/
!!
!!	15-sep-2009 (ms) new rules for dvar_pkey, dvar_okey
!!	12-aug-2009 (ms) dvar_lock/unlock/pkey/keylock/pkeylock/otype/okeylock
!!	12-aug-2009 (ms) dvar_keyopen, unop dvar_close, dvar_open 0
!!	30-apr-2008 (al) fix typos, small clarifications
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>

<meta functions dvar_open>
<meta functions dvar_close>

<meta functions dvar_lock>
<meta functions dvar_olock>
<meta functions dvar_unlock>

<meta functions dvar_ref>
<meta functions dvar_taskref>

<meta functions dvar_keylist>

<meta functions dvar_key>
<meta functions dvar_keyopen>
<meta functions dvar_keylock>

<meta functions dvar_name>

<meta functions dvar_pkey>

<meta functions dvar_otype>
<meta functions dvar_setotype>

<meta functions dvar_okey>
<meta functions dvar_okeyopen>
<meta functions dvar_okeylock>

<meta functions dvar_value>
<meta functions dvar_setvalue>

<meta SVL:syntax *&lt;variable&gt;>


<title>Dynamic Variables</title>

</head>

<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Dynamic Variables</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<pre>
    key = <a class="fcnlink" href="#dvar_open">dvar_open</a> []
    key = <a class="fcnlink" href="#dvar_open">dvar_open</a> name
    key = <a class="fcnlink" href="#dvar_open">dvar_open</a> key
    key = <a class="fcnlink" href="#dvar_close">dvar_close</a> key

    value = <a class="fcnlink" href="#dvar_value">dvar_value</a> key
    value = <a class="fcnlink" href="#dvar_value">*key</a>

    value = <a class="fcnlink" href="#dvar_stxvalue">*</a>key<a
	class="fcnlink" href="#dvar_stxvalue">(</a>index<a
	class="fcnlink" href="#dvar_stxvalue">)</a>
    value = <a class="fcnlink" href="#dvar_stxvalue">*</a>key<a
	class="fcnlink" href="#dvar_stxvalue">[</a>index<a
	class="fcnlink" href="#dvar_stxvalue">]</a>
    value = <a class="fcnlink" href="#dvar_stxvalue">*</a>key<a
	class="fcnlink" href="#dvar_stxvalue">.</a>tag
    value = <a class="fcnlink" href="#dvar_stxvalue">*</a>key <a
	class="fcnlink" href="#dvar_stxvalue">|</a> mask
    value = <a class="fcnlink" href="#dvar_stxvalue">*</a>key <a
	class="fcnlink" href="#dvar_stxvalue">||</a> mask

    <a class="fcnlink" href="#dvar_setvalue">dvar_setvalue</a> [key, value]
    <a class="fcnlink" href="#dvar_setvalue">*</a>key <a
	class="fcnlink" href="#dvar_setvalue">=</a> value

    <a class="fcnlink" href="#dvar_stxsetvalue">*</a>key<a
	class="fcnlink" href="#dvar_stxsetvalue">(</a>index<a
	class="fcnlink" href="#dvar_stxsetvalue">) =</a> value
    <a class="fcnlink" href="#dvar_stxsetvalue">*</a>key<a
	class="fcnlink" href="#dvar_stxsetvalue">[</a>index<a
	class="fcnlink" href="#dvar_stxsetvalue">] =</a> value
    <a class="fcnlink" href="#dvar_stxsetvalue">*</a>key<a
	class="fcnlink" href="#dvar_stxsetvalue">.</a>tag <a
	class="fcnlink" href="#dvar_stxsetvalue">=</a> value
    <a class="fcnlink" href="#dvar_stxsetvalue">*</a>key <a
	class="fcnlink" href="#dvar_stxsetvalue">|</a> mask <a
	class="fcnlink" href="#dvar_stxsetvalue">=</a> value
    <a class="fcnlink" href="#dvar_stxsetvalue">*</a>key <a
	class="fcnlink" href="#dvar_stxsetvalue">||</a> mask <a
	class="fcnlink" href="#dvar_stxsetvalue">=</a> value

    key = <a class="fcnlink" href="#dvar_lock">dvar_lock</a> key
    key = <a class="fcnlink" href="#dvar_lock">dvar_olock</a> [key, otype]
    key = <a class="fcnlink" href="#dvar_unlock">dvar_unlock</a> key

    count = <a class="fcnlink" href="#dvar_ref">dvar_ref</a> key
    count = <a class="fcnlink" href="#dvar_taskref">dvar_taskref</a> key

    keys = <a class="fcnlink" href="#dvar_keylist">dvar_keylist</a> []

    key = <a class="fcnlink" href="#dvar_key">dvar_key</a> key_or_name
    key = <a class="fcnlink" href="#dvar_key">dvar_keyopen</a> key_or_name
    key = <a class="fcnlink" href="#dvar_key">dvar_keylock</a> key_or_name

    name = <a class="fcnlink" href="#dvar_name">dvar_name</a> key
    name = <a class="fcnlink" href="#dvar_name">dvar_name</a> 'name'

    key = <a class="fcnlink" href="#dvar_pkey">dvar_pkey</a> key

    otype = <a class="fcnlink" href="#dvar_otype">dvar_otype</a> key
    <a class="fcnlink" href="#dvar_setotype">dvar_setotype</a> [key, otype]

    key = <a class="fcnlink" href="#dvar_okey">dvar_okey</a> [key, otype]
    key = <a class="fcnlink" href="#dvar_okey">dvar_okeyopen</a> [key, otype]
    key = <a class="fcnlink" href="#dvar_okey">dvar_okeylock</a> [key, otype]
</pre>


<h2>Description</h2>

<p> Dynamic variables are data containers that are explicitly dynamically
allocated and which can be accessed from different tasks.  The variables are
accessed via a unique numerical key or a unique token name.  Each variable
must be explicitly opened with the function <tt>dvar_open</tt> and remains
accessible using its numerical handle or token name until it is explicitly
closed with the function <tt>dvar_close</tt> or implicitly closed by
the termination of the associated task. A dynamic variable can be opened
multiple times and from different tasks, and remains in existence until
all <tt>dvar_open</tt> calls have been matched by corresponding calls to
<tt>dvar_close</tt>, whereupon the variable is destroyed.

<p>SVL provides syntactic shortcuts for accessing dynamic variables
in the form of the star operator.  The star operator has higher
precedence than the indexing operations,
i.e. <span class="nobr"><tt>"*a(k) == (*a)(k)"</tt>.</span>

<p><a name="dvar_open"></a></p>
<p><hr noshade="noshade" />

<pre>
key = <span class="fcndef">dvar_open</span> []
key = <span class="fcndef">dvar_open</span> key
key = <span class="fcndef">dvar_open</span> 'name'
</pre>

Returns a key to the specified dynamic variable.  The dynamic
variable will be available to the current task until the
task calls <tt>dvar_close</tt> or terminates.

<p><i>Programming style:</i>
Each <tt>dvar_open</tt> should be always matched by corresponding
<tt>dvar_close</tt>.

<p>
If passed a <tt>[]</tt> argument, a new, unnamed dynamic variable is
allocated and its key is returned.


<p>
When passed a <tt>key</tt>, <tt>dvar_open</tt> duplicates the key of an
existing dynamic variable.  This will keep the key available to the
current task, even after the termination of the task that allocated the
dynamic variable.

If the given key does not refer to an existing
dynamic variable, the function reports an error.

<p>When passed a <tt>name</tt>, <tt>dvar_open</tt>
creates a new dynamic variable of a given name and returns its key.
If a dynamic variable of the same name already exists,
the function duplicates and returns its key.  The name must be non-empty.
When an empty name is used, the function returns a key of a new
unnamed dynamic variable.

<p><a name="dvar_close"></a></p>
<p><hr noshade="noshade" />

<pre>
<span class="fcndef">dvar_close</span> key
</pre>

Destroys the dynamic variable specified by <tt>key</tt>.
If the variable has been opened several times,
it remains accessible to the current task until the
number of calls of <tt>dvar_close</tt> matches the number
of calls of <tt>dvar_open</tt>.

<p>If <tt>key</tt> does not refer to an existing dynamic variable,
the function will <i>not</i> report an error.

<p>The function accepts an arbitrarily nested vector.


<p><a name="dvar_setvalue"></a></p>
<p><a name="dvar_value"></a></p>
<p><hr noshade="noshade" />

<pre>
value = <span class="fcndef">dvar_value</span> key
value = <span class="fcndef">*</span>key

<span class="fcndef">dvar_setvalue</span> [key, value]
<span class="fcndef">*</span>key <span class="fcndef">=</span> value
</pre>

Return or set the contents of the dynamic variable specified by <tt>key</tt>.
If the key is not a valid key, the function reports an error.


<p><a name="dvar_stxvalue"></a></p>
<p><hr noshade="noshade" />

<pre>
value = <span class="fcndef">*</span>key<span class="fcndef">(</span>index<span
    class="fcndef">)</span>
value = <span class="fcndef">*</span>key<span class="fcndef">[</span>index<span
    class="fcndef">]</span>
value = <span class="fcndef">*</span>key<span class="fcndef">.</span>tag
value = <span class="fcndef">*</span>key <span class="fcndef">|</span> mask
value = <span class="fcndef">*</span>key <span class="fcndef">||</span> mask
</pre>

Returns the contents of the specified portion of the dynamic variable
specified by <tt>key</tt>.  Equivalent to (respectively):

<pre>
    value = peek [*key, index]
    value = get [*key, index]
    value = tagpeek [*key, 'tag']
    value = mget [*key, mask]
    value = apt mget [*key, mask]
</pre>

<p><a name="dvar_stxsetvalue"></a></p>
<p><hr noshade="noshade" />

<pre>
<span class="fcndef">*</span>key<span class="fcndef">(</span>index<span
    class="fcndef">) =</span> value
<span class="fcndef">*</span>key<span class="fcndef">[</span>index<span
    class="fcndef">] =</span> value
<span class="fcndef">*</span>key<span class="fcndef">.</span>tag <span
    class="fcndef">=</span> value
<span class="fcndef">*</span>key <span class="fcndef">|</span> mask <span
    class="fcndef">=</span> value
<span class="fcndef">*</span>key <span class="fcndef">||</span> mask <span
    class="fcndef">=</span> value
</pre>

Sets the contents of the specified portion of the dynamic variable
specified by <tt>key</tt>.  Equivalent to (respectively):

<pre>
    *key = poke [*key, index, value]
    *key = put [*key, index, value]
    *key = tagpoke [*key, 'tag', value]
    *key = mput [*key, mask, value]
    *key = apt mput [*key, mask, value]
</pre>

<p><a name="dvar_lock"></a></p>
<p><a name="dvar_unlock"></a></p>
<p><hr noshade="noshade" />

<pre>
<span class="fcndef">dvar_lock</span> key
<span class="fcndef">dvar_olock</span> [key, otype]
<span class="fcndef">dvar_unlock</span> key
</pre>

Function <tt>dvar_lock</tt>

locks the dynamic variable for an exclusive access by the calling task.

If the variable is already locked by another task, <tt>dvar_lock</tt>
will wait and will return only when the variable becomes unlocked.

When the function returns, the variable becomes locked by
the calling task.

Any other task trying to access the contents of the variable or trying
to lock the variable will be blocked and must wait until the variable is
unlocked.

<p>Function <tt>dvar_olock</tt> additionally insists that the dynamic variable
was created in the same module and, if the second argument is not empty,
is also of the given <i>otype</i>.  More precisely, the function insists that

<pre>
    dvar_okey [key, otype]
</pre>
would return non-0.

Otherwise, the function will report an error.

(See

<a class="fcnlink" href="#dvar_otype"><tt>dvar_otype</tt></a>,

and

<a class="fcnlink" href="#dvar_okey"><tt>dvar_okey</tt></a>

for details.)

<p>Function <tt>dvar_unlock</tt> unlocks the variable to allow other
tasks to access its contents.  If the task that locked the variable
is destroyed before it calls <tt>dvar_unlock</tt>, the variable
will be unlocked automatically.

<p>Both functions accept arbitrarily nested vectors.  When given keys to
several variables, function <tt>dvar_lock</tt> will wait until
<i>all</i> variables become unlocked and then locks them all at once, in
an atomic action.

<p><i>Note:</i>

Function <tt>dvar_lock</tt> guarantees that all keys that are valid
when the function is called will be valid when the function returns and
then will stay valid until the corresponding <tt>dvar_unlocked</tt> is
called or the task is destroyed.

Explicit <tt>dvar_open</tt> and <tt>dvar_close</tt> are not needed.

<p><a name="dvar_taskref"></a></p>
<p><a name="dvar_ref"></a></p>
<p><hr noshade="noshade" />

<pre>
count = <span class="fcndef">dvar_ref</span> [ key1, key2, ...]
count = <span class="fcndef">dvar_taskref</span> [ key1, key2, ...]
</pre>

Each dynamic variable has associated with it a reference count.

When the variable is opened or reopened with <tt>dvar_open</tt>,
the reference count is increased.

When the variable is closed with <tt>dvar_close</tt> or when the
opening task is destroyed, the reference count is decreased.

<p> For each <tt>key</tt> specified, function <tt>dvar_ref</tt>  returns
the reference count of the corresponding dynamic variable or 0 if no
such variable exists.

Function <tt>dvar_taskref</tt> returns only the reference count
associated with <tt>dvar_open</tt>/<tt>dvar_close</tt> calls executed
by the calling task.


<p><a name="dvar_keylist"></a></p>
<p><hr noshade="noshade" />

<pre>
keys = <span class="fcndef">dvar_keylist</span> []
</pre>

Returns the keys of all dynamic variables currently in the system.


<p><a name="dvar_key"></a></p>
<p><hr noshade="noshade" />

<pre>
key = <span class="fcndef">dvar_key</span> [ key1, 'name1', ...]
key = <span class="fcndef">dvar_keyopen</span> [ key1, 'name1', ...]
key = <span class="fcndef">dvar_keylock</span> [ key1, 'name1', ...]
</pre>

<p>Function <tt>dvar_key</tt> returns,
for each <tt>key</tt> or <tt>name</tt> specified, either the key
corresponding dynamic variable or 0 if no such variable can be found.
Keys of valid variables are returned as-is.

<p>Function <tt>dvar_keyopen</tt> additionally re-opens the
returned non-zero keys.  On a scalar argument, the effect of

<pre>    key = dvar_keyopen key;</pre>

is identical to that of 

<pre>    key = dvar_open key;
    if key then dvar_open key; endif</pre>

except that the latter is not guaranteed to be atomic and may
report an error if the key becomes invalid between the two function calls.

<p>Function <tt>dvar_keylock</tt> additionally duplicates and locks
the returned non-zero keys.  On a scalar argument, the effect of

<pre>    key = dvar_keylock key;</pre>

is identical to that of 

<pre>    key = dvar_key key;
    if key then dvar_lock key; endif</pre>

except that the latter is not guaranteed to be atomic.

<p>
The functions accept arbitrarily nested vectors.


<p><a name="dvar_name"></a></p>
<p><hr noshade="noshade" />

<pre>
'name' = <span class="fcndef">dvar_name</span> [ key1, 'name1', ...]
</pre>

For each <tt>key</tt> or <tt>name</tt> specified, return
the name of the corresponding dynamic variable or the empty token
(<tt>''</tt>)
if no such variable can be found or the variable is unnamed.


<p><a name="dvar_pkey"></a></p>
<p><hr noshade="noshade" />

<pre>
pkey = <span class="fcndef">dvar_pkey</span> key
</pre>

<p>
Every unnamed dynamic variable can hold two types of values, accessible
via two types of keys:

<ul>
<li>
    A <i>public value</i>, accessible from anywhere, is
    accessed via a <i>public key</i>.
</li><li>
    A <i>private value</i>, accessible only from the module
    that created the dynamic variable with 

    <tt>dvar_open[]</tt>

    is accessed via a <i>private key</i>.
</li>
</ul>

<p>Function <tt>dvar_pkey</tt> returns the private key of a given
dynamic variable.  Unlike the function <tt>dvar_key</tt>, function
<tt>dvar_pkey</tt> admits only keys (numbers), not names (tokens).

The function is intended to be used only in the module that created
the dynamic variable.

<p><i>Note:</i>

The public key is the key returned by <tt>dvar_open[]</tt>.
The private key is the key returned by function <tt>dvar_pkey</tt>.
Named dynamic variables can't hold a private value and don't have
a private key.


<p><a name="dvar_otype"></a></p>
<p><a name="dvar_setotype"></a></p>
<p><hr noshade="noshade" />

<pre>
otype = <span class="fcndef">dvar_otype</span> key
<span class="fcndef">dvar_setotype</span> [key, otype]
</pre>

Every unnamed dynamic variables is associated with a scalar token,
<i>otype</i>.  The initial value of <i>otype</i> for a newly created
the variable is empty token (<tt>''</tt>).  This value, however,
can be changed and used to validate input keys in routines that
expect dynamic variables of a specific structure as their arguments.

<p>
Function <tt>dvar_setotype</tt> sets the <i>otype</i> of the dynamic
variable of the given key.

If the key is invalid, the function generates an error.
The function can be used only in the module that created the
dynamic variable.  If the variable is locked, the function will block
the calling task and wait until the variable becomes unlocked.

The function accepts either a public key or a private key.  The type
of the key used to set the <i>otype</i> is stored together with the
value of the <i>otype</i>.

The function accepts arbitrarily nested vectors.  The arguments
will unit-extend to the same shape.

<p>
Function <tt>dvar_otype</tt> returns the <i>otype</i> of the dynamic
variable of the given key.

The function accepts either a public key or a private key and
returns the same value for both.

If the key is invalid, the function generates an error.
Unlike the function <tt>dvar_setotype</tt>, the function can
be used in any module and will return immediately, even if the variable
is currently locked.

The function accepts an arbitrarily nested vector.

<p><i>Note:</i>

The <i>otype</i> of named dynamic variables is empty token (<tt>''</tt>)
and cannot be changed.


<p><a name="dvar_okey"></a></p>
<p><hr noshade="noshade" />

<pre>
key = <span class="fcndef">dvar_okey</span> [key, otype]
key = <span class="fcndef">dvar_okeyopen</span> [key, otype]
key = <span class="fcndef">dvar_okeylock</span> [key, otype]
</pre>

Function <tt>dvar_okey</tt> returns, for each <tt>key</tt> specified,
either the key as-is or 0.  The key is returned as-is only if all the
following conditions are met:

<ul>
<li>The key is valid.
<li>The key is unnamed.
<li>The key was created in the same module (with <tt>dvar_open[]</tt>).
<li>The variable is of the given <i>otype</i> and was set using
    the same key.
</ul>


Unlike the function <tt>dvar_key</tt>, function <tt>dvar_okey</tt>
admits only keys (numbers), not names (tokens).

<p><i>Note:</i>
Functions <tt>dvar_otype</tt> and <tt>dvar_okey</tt> both accept either
a public key or a private key.  However, while <tt>dvar_otype</tt>
returns the same result for both types of keys and in all modules,
function <tt>dvar_okey</tt> requires to be called from the creator's
module and be given the same type of key.
If called from another module, the function will return 0.
If the <i>otype</i> was set using the public key of a variable,
but the function is given the private key of the variable,
it will return 0.  If the <tt>otype</tt> was
set using the private key, but the function is given the public key,
it will return 0.

<p>
On scalar numeric arguments, the effect of

<pre>    key = dvar_okey [key, 'otype'];</pre>

can be described as

<pre>    key = dvar_key key;
    if dvar_name key &lt;&gt; '' then key = 0; endif
    if dvar_otype key &lt;&gt; 'otype' then key = 0; endif
    if not dvar_pkey dvar_pkey key then key = 0; endif
    if not (<i>the key was used to set otype</i>) then key = 0; endif</pre>

executed as an atomic action.

<p>Function <tt>dvar_okeyopen</tt> additionally re-opens the
returned non-zero keys.  On a scalar argument, the effect of

<pre>    key = dvar_okeyopen [key, 'otype']</pre>

is identical to that of 

<pre>    key = dvar_okey [key, 'otype'];
    if key then dvar_open key; endif</pre>

except that the latter is not guaranteed to be atomic.

<p>Function <tt>dvar_okeylock</tt> additionally duplicates and locks
the returned non-zero keys.  On a scalar argument, the effect of

<pre>    key = dvar_okeylock [key, 'otype'];</pre>

is identical to that of 

<pre>    if not dvar_key key then
	key = 0;
    elseif dvar_name key &lt;&gt; '' then
	key = 0;
    elseif not dvar_pkey dvar_pkey key then
	key = 0;
    else
	dvar_lock key;
	if not dvar_okey [key, 'otype'] then
	    dvar_unlock key;
	    key = 0;
	endif
    endif</pre>

except that the latter is not guaranteed to be atomic.

<p>
The functions accept arbitrarily nested vectors.  If the second
argument is not empty, both arguments will unit-extend to the same shape.

<p><i>Note:</i>

The <i>otype</i> of keys locked by other tasks can change while
<tt>dvar_okeylock</tt> is waiting for them becoming unlocked.
Therefore, the function examines the <i>otype</i> of the keys only
<i>after</i> all keys can be locked by the calling task, not before.

<p><i>Note:</i>

Both functions <tt>dvar_okeylock</tt> and

<a class="fcnlink" href="#dvar_lock"><tt>dvar_olock</tt></a>

lock the keys that are considered valid
by function <tt>dvar_okey</tt>.  However, given an invalid key,
function <tt>dvar_okeylock</tt> will return 0, while function
<tt>dvar_olock</tt> will report an error.

<p><i>Programming style:</i>
The <i>otype</i> is intended to be used to create objects whose
internal structure is known in the creator module, but not outside.
For example:
<pre>
    const OPAQUE = 0;	// 0:caller can access *key, 1:key is opaque

    global function MyType_Open key
	if isnull key then
	    key = dvar_open [];
	    local pkey = dvar_pkey key;
	    ... initialize the private contents via *pkey ...
	    if OPAQUE then key = pkey; endif
	    dvar_setotype [key, 'MyType'];
	    return key;
	elseif not isscalarnum key then
	    exit 'Illegal argument';
	elseif not dvar_okeyopen [key, 'MyType'] then
	    exit 'Invalid key';
	else
	    return key;
	endif
    endfunction

    global function MyType_Close key
	dvar_close dvar_okey [key, 'MyType'];
    endfunction

    global function MyType_Key key
	return dvar_okey [key, 'MyType'];
    endfunction

    global function MyType_Action [key, ... arguments ...]
	if not dvar_okeylock [key, 'MyType'] then exit 'Invalid key'; endif
	local pkey = dvar_pkey key;
	... access the private contents via *pkey ...
	dvar_unlock key;
    endfunction
</pre>



<h2>See Also</h2>

<p>
    <a class="svl" href="tskcall.html">task_call</a>
</p>

<p>
<a href="introcomm.htm">SVL Task Communication Functions</a>
</p>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
