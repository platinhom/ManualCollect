<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!    MOE 2010.10 On-Line Manuals
!!    COPYRIGHT (C) 2010
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->


<!--
!!	bitcount.htm	SVL bitcount functions 
!!
!!	14-aug-2006 (sb) typos in bit[msb/lsb]mask
!!	12-dec-2005 (ms) typos in bitshl bitshr
!!	17-nov-2001 (pl) created from other bit* files
!!
!! supersedes: bitcount.htm bitetc.html bitshetc.html
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css"
href="../../manstyle.css" />


<meta keywords>
<meta functions bitcount, bitreverse, bitmsbpos, bitlsbpos>
<meta functions bitmsbmask, bitlsbmask, bitmsbblock, bitlsbblock>
<meta functions bitnot, bitand, bitor, bitxor, bitshl, bitshr>

<title>Bit Manipulation Functions</title>
</head>
<body bgcolor="#ffffff">
<a href="../../index.htm"><img src="../../images/logo.gif"
alt="CCG Logo" align="right" width="174" height="55" border="0" /></a>
<h4>MOE 2010.10</h4>
<h2>Bit Manipulation Functions</h2>
<hr noshade="noshade" />

<h2>Syntax</h2>

<pre>
    y = <a class="fcnlink" href="#bitand">bitand</a>      [x1,...,xN]
    y = <a class="fcnlink" href="#bitcount">bitcount</a>    x
    y = <a class="fcnlink" href="#bitmsbblock">bitmsbblock</a> x
    y = <a class="fcnlink" href="#bitlsbblock">bitlsbblock</a> x
    y = <a class="fcnlink" href="#bitmsbmask">bitmsbmask</a>  x
    y = <a class="fcnlink" href="#bitlsbmask">bitlsbmask</a>  x
    y = <a class="fcnlink" href="#bitmsbpos">bitmsbpos</a>   x
    y = <a class="fcnlink" href="#bitlsbpos">bitlsbpos</a>   x
    y = <a class="fcnlink" href="#bitnot">bitnot</a>      x
    y = <a class="fcnlink" href="#bitor">bitor</a>       [x1,...,xN]
    y = <a class="fcnlink" href="#bitreverse">bitreverse</a>  [x, k]
    y = <a class="fcnlink" href="#bitshl">bitshl</a>      [x, k]
    y = <a class="fcnlink" href="#bitshr">bitshr</a>      [x, k]
    y = <a class="fcnlink" href="#bitxor">bitxor</a>      [x1,...,xN]
</pre>

<h2>Description</h2>

<p>
Bit manipulation functions operate on the base-2 representation of an
integer wherein each base-2 digit is a <i>bit</i>.
Unless otherwise noted, all functions round their arguments to the nearest
integer (if in floating point).  All calculations are performed with
integer arithmetic and no provision is made for overflow or underflow.
<p>
The unary operators (like <tt>bitcount</tt> and <tt>bitmsbpos</tt>)
apply to all scalar values in the argument vector (no matter how deeply
nested).
The binary operators (like <tt>bitreverse</tt> and <tt>bitshr</tt>)
match elements of the arguments in pair no matter how deeply nested.  Unit
extension applies.

<!-- bitand -->

<p><a name="bitand"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitand</span> [x1, x2, ... xN]
</pre>

<p>
Implements the bitwise logical operation <tt>AND</tt>: it sets each bit of
the integer result <tt>y</tt> if and only if all the corresponding bits in
the base-2 representation of <tt>x1, x2, ..., xN</tt> are also set.
If <tt>N=1</tt>, the function returns <tt>x1</tt>.  If <tt>K=0</tt>, the
functions returns an integer with all bits set, i.e. -1.

<pre>    svl&gt; bitand [6,3]
    2
    svl&gt; bitand [0xABC5,0xF,0xF17]
    5
</pre>

<!-- ====================== bitcount ====================== -->

<p><a name="bitcount"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitcount</span> x
</pre>

<p>
Returns the number of one bits in the base-2 representation of its argument.
The results depend on the word size of the computer (especially for
negative arguments).
The SVL constant <tt>INT_BITS</tt> contains the number of bits used to
represent integers.

<pre>    svl&gt; bitcount [-2,-1,0,1,2,3,4,5,6,7,8]
    [31,32,0,1,1,2,1,2,2,3,1]
</pre>

<!-- ====================== bitmsbblock, bitlsbblock ====================== -->

<p><a name="bitlsbblock"></a></p>
<p><a name="bitmsbblock"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitmsbblock</span> x
y = <span class="fcndef">bitlsbblock</span> x
</pre>

<p>
<tt>bitmsbblock</tt> sets all bits in the base-2 representation of <tt>x</tt>
that are not strictly more significant than the most significant bit.
<tt>bitlsbblock</tt> sets all bits in the base-2 representation of <tt>x</tt>
that are not strictly more significant than the least significant bit.
If <tt>x</tt> is zero then zero is returned.
The results depend on the word size of the computer (especially for
negative arguments).
The SVL constant <tt>INT_BITS</tt> contains the number of bits used to
represent integers.

<pre>    svl&gt; bitmsbblock [-2,-1,0,1,2,3,4,5,6,7,8]
    [-1,-1,0,1,3,3,7,7,7,7,15]

    svl&gt; bitlsbblock [-2,-1,0,1,2,3,4,5,6,7,8]
    [3,1,0,1,3,1,7,1,3,1,15]
</pre>

<!-- ====================== bitmsbmask, bitlsbmask ====================== -->

<p><a name="bitlsbmask"></a></p>
<p><a name="bitmsbmask"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitmsbmask</span> x
y = <span class="fcndef">bitlsbmask</span> x
</pre>

<p>
<tt>bitmsbmask</tt> clears all bits in the base-2 representation of <tt>x</tt>
except the most significant one bit.
<tt>bitlsbmask</tt> clears all bits in the base-2 representation of <tt>x</tt>
except the least significant one bit.
If <tt>x</tt> is zero then zero is returned.
The results depend on the word size of the computer (especially for
negative arguments).
The SVL constant <tt>INT_BITS</tt> contains the number of bits used to
represent integers.

<pre>    svl&gt; bitmsbmask [-2,-1,0,1,2,3,4,5,6,7,8]
    [-2147483648,-2147483648,0,1,2,2,4,4,4,4,8]

    svl&gt; bitlsbmask [-2,-1,0,1,2,3,4,5,6,7,8]
    [2,1,0,1,2,1,4,1,2,1,8]
</pre>

<!-- ====================== bitmsbpos, bitlsbpos ====================== -->

<p><a name="bitlsbpos"></a></p>
<p><a name="bitmsbpos"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitmsbpos</span> x
y = <span class="fcndef">bitlsbpos</span> x
</pre>

<p>
<tt>bitmsbpos</tt> returns the bit number (starting from the least significant
bit which is numbered 1) of the most significant one bit in the base-2
representation of the argument <tt>x</tt>.  <tt>bitlsbpos</tt> returns the
bit number of the least significant one bit.
If <tt>x</tt> is zero then zero is returned.
The results depend on the word size of the computer (especially for
negative arguments).
The SVL constant <tt>INT_BITS</tt> contains the number of bits used to
represent integers.

<pre>    svl&gt; bitmsbpos [-2,-1,0,1,2,3,4,5,6,7,8]
    [32,32,0,1,2,2,3,3,3,3,4]

    svl&gt; bitlsbpos [-2,-1,0,1,2,3,4,5,6,7,8]
    [2,1,0,1,2,1,3,1,2,1,4]
</pre>

<!-- ====================== bitnot ====================== -->

<p><a name="bitnot"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitnot</span> x
</pre>

<p>
Inverts each bit in the base-2 representation of the argument <tt>x</tt>.

<pre>    svl&gt; bitnot [-2,-1,0,1,2,3,4,5,6,7,8]
    [1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9]
</pre>

<!-- ====================== bitor ====================== -->

<p><a name="bitor"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitor</span> [x1, x2, ... xN]
</pre>

<p>
Implements the bitwise logical operation <tt>OR</tt>: it sets each bit of
the integer result <tt>y</tt> if and only if there is at least one bit set
among the corresponding bits in the base-2 representation of
<tt>x1, x2, ..., xN</tt>. If <tt>K=1</tt>, the function returns <tt>x1</tt>.
If <tt>K=0</tt>, the functions returns an integer with no bits set, i.e. 0.

<pre>    svl&gt; bitor [6,3]
    7
    svl&gt; bitor [0xABCDE,-1]
    -1
    svl&gt; bitor [1,2,4,8]
    15
</pre>

<!-- ====================== bitreverse ====================== -->

<p><a name="bitreverse"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitreverse</span> [x, k]
</pre>

<p>
Reverses the order of the least significant <tt>k</tt> bits in the base-2
representation of the argument <tt>x</tt>.  If <tt>k</tt> is less than
zero then zero is used; if <tt>k</tt> is greater than <tt>INT_BITS</tt>
then <tt>INT_BITS</tt> is used.

<pre>    svl&gt; bitreverse [[1,8,3,12,2,4,16], 4]
    [8,1,12,3,4,2,16]

    svl&gt; bitreverse [1, igen 5]
    [1,2,4,8,16]
</pre>

<!-- ====================== bitshl, bitshr ====================== -->

<p><a name="bitshr"></a></p>
<p><a name="bitshl"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitshl</span> [x, k]
y = <span class="fcndef">bitshr</span> [x, k]
</pre>

<p>
<tt>bitshl</tt> increases the significance of each bit in the base-2
representation of <tt>x</tt> by <tt>k</tt> bits.
For positive quantities <tt>bitshl</tt> is similar to multiplication by
2<sup><i>k</i></sup>.
The most significant <tt>k</tt> bits are lost and the least significant
<tt>k</tt> bits in the result are 0.
<p>
<tt>bitshr</tt> decreases the significance of each bit in the base-2
representation of <tt>x</tt> by <tt>k</tt> bits.
For positive quantities <tt>bitshl</tt> is similar to division by
2<sup><i>k</i></sup>.
<tt>bitshr</tt> is similar to division by 2<sup><i>k</i></sup>.
The least significant <tt>k</tt> bits are lost and the most significant
<tt>k</tt> bits in the result are 0.

<p>
The results depend on the word size of the computer (especially for
negative arguments).
The SVL constant <tt>INT_BITS</tt> contains the number of bits used to
represent integers.


<pre>    svl&gt; bitshl [ [-2,-1,0,1,2,3,4,5,6,7,8], 1 ]
    [-4,-2,0,2,4,6,8,10,12,14,16]

    svl&gt; bitshr [ [-2,-1,0,1,2,3,4,5,6,7,8], 1 ]
    [2147483647,2147483647,0,0,1,1,2,2,3,3,4]
</pre>


<!-- ====================== bitxor ====================== -->

<p><a name="bitxor"></a></p>
<p><hr noshade="noshade" />

<pre>y = <span class="fcndef">bitxor</span> [x1, x2, ... xN]
</pre>

<p>
Implements the bitwise logical operation <tt>XOR</tt>: it sets each bit of
the integer result <tt>y</tt> if and only if there is an odd number of bits
set among the corresponding bits in the integer representation
of <tt>x1, x2, ..., xN</tt>. If <tt>K=1</tt>, the function returns
<tt>x1</tt>.  If <tt>K=0</tt>, the functions returns an integer with no bits
set, i.e. 0.  

<pre>    svl&gt; bitxor [6,3]
    5
    svl&gt; bitxor [7,0xF]
    8
</pre>


<h2>See Also</h2>

<p>
<a href="arithmet.htm">Arithmetic Functions</a>

<p><a href="../../index.htm">MOE Table of Contents</a>&nbsp;&nbsp;<a href="../../fcnindex.html">SVL Function Index</a></p>
<hr noshade="noshade" />
<a href="http://www.chemcomp.com"><img src="../../images/flogo.gif"
alt="CCG Logo"
align="left" width="30" height="30" border="1" hspace="5" vspace="3" /></a>
<font size="2">
<a href="../../legal.html">Copyright</a> &copy; 1997-2010
<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a><br />
<a href="mailto:info@chemcomp.com"><i>info@chemcomp.com</i></a>
</font>
</body>
</html>
