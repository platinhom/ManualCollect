<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">


<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../include/manstyle.css" />


<meta keywords>
<meta functions svl_Length, svl_Peek>
<meta functions svl_Append, svl_Cat, svl_Nest, svl_Keep, svl_Drop>
<meta functions svl_Tag, svl_Untag>


<title>API Basic Functions: svl_Length, ...</title>
</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>

<h2>Syntax</h2>

<pre>
    int <a class="fcnlink" href="#svl_Length">svl_Length</a>(svl_var v);

    svl_error <a class="fcnlink" href="#svl_Peek">svl_Peek</a>(svl_var v, unsigned pos);

    svl_error <a class="fcnlink" href="#svl_Nest">svl_Nest</a>(svl_var v);
    svl_error <a class="fcnlink" href="#svl_Cat">svl_Cat</a>(svl_var v, svl_var w);
    svl_error <a class="fcnlink" href="#svl_Append">svl_Append</a>(svl_var v, svl_var w);

    svl_error <a class="fcnlink" href="#svl_Keep">svl_Keep</a>(svl_var v, int k);
    svl_error <a class="fcnlink" href="#svl_Drop">svl_Drop</a>(svl_var v, int k);

    svl_error <a class="fcnlink" href="#svl_Tag">svl_Tag</a>(svl_var v, svl_var w);
    svl_error <a class="fcnlink" href="#svl_Untag">svl_Untag</a>(svl_var v, svl_var w);
</pre>

<h2>Description</h2>
<p>These functions are all basic vector functions equivalent to their
SVL counterparts.
The following table shows the equivalent statements in SVL to the
API functions listed above:</p>

<!-- DESC -->

<p>
<blockquote>
<table class="titlebar" border="1" cellpadding="3">
<tr>
    <th> API Function</th>
    <th> SVL Equivalent</th>
</tr>

<tr>
    <td valign="baseline">
<a name="svl_Length"></a><tt>svl_Length(v)</tt></td>
    <td valign="baseline"><tt>length v</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Peek"></a><tt>svl_Peek(v, pos)</tt></td>
    <td valign="baseline"><tt>v = v(pos)</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Nest"></a><tt>svl_Nest(v)</tt></td>
    <td valign="baseline"><tt>v = nest v</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Cat"></a><tt>svl_Cat(v, w)</tt><br />
		     <tt>svl_Cat(v, NULL)</tt></td>
    <td valign="baseline"><tt>v = cat [v, w]</tt><br />
		     <tt>v = cat v</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Append"></a><tt>svl_Append(v, w)</tt><br />
		     <tt>svl_Append(v, NULL)</tt></td>
    <td valign="baseline"><tt>v = append [v, w]</tt><br />
	<tt>v = append v</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Keep"></a><tt>svl_Keep(v, k)</tt></td>
    <td valign="baseline"><tt>v = keep [v, k]</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Drop"></a><tt>svl_Drop(v, k)</tt></td>
    <td valign="baseline"><tt>v = drop [v, k]</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Tag"></a><tt>svl_Tag(v, w)</tt><br />
	<tt>svl_Tag(v, NULL)</tt></td>
    <td valign="baseline"><tt>v = tag [v, w]</tt><br />
	<tt>v = tag v</tt></td>
</tr>
<tr>
    <td valign="baseline">
<a name="svl_Untag"></a><tt>svl_Untag(v, w)</tt><br />
	<tt>svl_Untag(v, NULL)</tt></td>
    <td valign="baseline"><tt>[v, w] = untag v</tt><br />
	<tt>v = untag v</tt></td>
</tr>
</table>
</blockquote>

<!-- ENDDESC -->

<p><table cellpadding="3">
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Length</span>(v)</tt> 
<td valign="baseline">Returns the number of elements in <tt>v</tt>.
</tr>

<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Peek</span>(v,pos)</tt> 
<td valign="baseline">Replaces <tt>v</tt> with its <tt>pos</tt>-th element.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Nest</span>(v)</tt> 
<td valign="baseline">Nests the SVL variable of a given handle.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Cat</span>(v,w)</tt> 
<td valign="baseline">Concatenates the contents of the SVL variables
<tt>v</tt> and <tt>w</tt>;  the contents of <tt>w</tt> are appended at the of
<tt>v</tt>. The new length of <tt>v</tt> will be the combined lengths of
<tt>v</tt> and <tt>w</tt>.  Variable <tt>w</tt> will be set to the null
vector, <tt>[]</tt>.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Cat</span>(v,NULL)</tt> 
<td valign="baseline">Concatenates the contents of all elements of the
SVL variable <tt>v</tt>.  The new length of <tt>v</tt> will be the combined
lengths of all its elements.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Append</span>(v,w)</tt> 
<td valign="baseline">Appends the contents of the SVL variable of
handle <tt>w</tt> at the end of the SVL variable of handle <tt>v</tt>.  The
length of <tt>v</tt> will increase by one.  Variable <tt>w</tt> will be
set to the null vector, <tt>[]</tt>.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Append</span>(v,NULL)</tt> 
<td valign="baseline">Appends the elements of <tt>v</tt>, except
for the first one, at the end of the first element of <tt>v</tt>.  The length
of the first element will increase by the number of remaining elements.
The resulting vector is then placed in <tt>v</tt>.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Keep</span>(v,k)</tt>
<br /><tt><span class="fcndef">svl_Drop</span>(v, k)</tt> 
<td valign="baseline">Resize the SVL variable
<tt>v</tt> according to the rules of the corresponding SVL built-in
functions.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Tag</span>(v,w)</tt> 
<td valign="baseline">Converts a vector of attributes, <tt>v</tt> and a
vector of values <tt>w</tt> into a vector of tagged values, <tt>v</tt>.
Variable <tt>w</tt> will be set to the null vector, <tt>[]</tt>.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Tag</span>(v,NULL)</tt> 
<td valign="baseline">Equivalent to <tt>svl_Tag(v1,v2)</tt>,
where <tt>[v1,v2]=v</tt>.  In other words, <tt>v</tt> must contain
both the vector of attributes and the vector of values.
</tr>
<tr>
<td valign="baseline"><tt><span class="fcndef">svl_Untag</span>(v,w)</tt> 
<td valign="baseline">Converts a vector of tagged values, <tt>v</tt>, to
a pair of vectors: a vector of attributes, <tt>v</tt>, and a vector of
values, <tt>w</tt>.  If <tt>w</tt> is <tt>NULL</tt>, the pair is stored in
<tt>v</tt> alone.
</table>

<h2>See Also</h2>
<p>
    <a class="svl" href="api_var.htm">svl_MoveVar</a><br />
    <a class="svl" href="api_var.htm">svl_ClearVar</a><br />
    <a class="svl" href="api_var.htm">svl_CopyVar</a><br />
    <a class="svl" href="api_var.htm">svl_AllocVarE</a><br />
    <a class="svl" href="api_var.htm">svl_FreeVar</a>
</p>


<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>
