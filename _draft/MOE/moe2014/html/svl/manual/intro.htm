<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">


<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../include/manstyle.css" />


<title>Introduction</title>
</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>

<p>[<a href="index.htm">Previous Chapter</a>] [<a href="svlfund.htm">Next Chapter</a>] [<a href="index.htm">Table of Contents</a>] 

<ul>
  <li><a href="#What is SVL">What is SVL?</a></li>
  <li><a href="#Why Vector Languages">Why Vector Languages?</a></li>
  <li><a href="#Key Features of SVL">Key Features of SVL</a></li>
</ul>

<h2><a name="What is SVL">What is SVL?</a></h2>

<p>SVL is a <i>vector language</i>,<i> </i>in which the <i>vector </i>is the
primitive unit of operation. This is in contrast to other languages, where
the data primitive is a scalar, and a vector may be one of any number of
possible data structures built around scalar quantities.</p>

<p>SVL is both a compiled and interactive language. In this way, SVL can be
flexible enough to serve as an interactive command and scripting language and
efficient enough to serve as a platform for the development of complex
scientific applications.  The interactive component of the language consists
of the evaluation of expressions. Flow control constructs and function
definitions form the remainder of the language.</p>

<h2><a name="Why Vector Languages">Why Vector Languages?</a></h2>

<p>Vector languages are well suited to problems involving intensive
computations over large amounts of data. By manipulating data in vector form,
an operation can be performed over an entire data set using a single
instruction. Thus, vector code can be compact, yet readable. Computations
over partial data sets are no less straightforward. For instance, in SVL,
subsets of data can be easily accessed via <i>indexing</i>, <i>tagging</i>
and <i>masking</i>, and via special vector operators.</p>

<p>SVL falls into the family of data-parallel languages, which are at the
forefront of parallel language technology. Examples of data parallelism can
be seen in High Performance FORTRAN, and vector extensions to C. SVL carries
the vectorization process further.</p>

<p>The trend towards data parallelism is caused by a number of factors
including:

<ul>
  <li>the difficulty in programming massively parallel computer architectures </li>
  <li>the success of vector architectures (e.g. CRAY) and multi-processors </li>
  <li>the natural mapping of scientific calculations onto the primitive operations of
    data-parallel languages </li>
  <li>sequential processor engineering assumptions (e.g. localization of memory
    access), which are less likely to be violated in the data-parallel paradigm</li>
</ul>

<p>The result has been a wealth of research into data-parallel languages
that has shown that data parallelism is a very successful paradigm for
efficient implementations of algorithms on a wide variety of computer
architectures, even sequential processors.</p>

<h2><a name="Key Features of SVL">Key Features of SVL</a></h2>

<p>Key features of SVL are: 

<ul>
  <li><b>expressivity</b>:
    the vector primitive, the principle of unit extension, and the simple,
    natural control mechanisms make for compact, powerful code that is easy
    to write, to debug, and to read, and that is suitable for use in a wide
    range of applications. </li>

  <li><b>simple syntax</b>: a simple, regular syntax makes SVL easy to learn.
    </li>

  <li><b>heterogeneous and nested vectors</b>: SVL vectors are permitted to
    contain elements of more than one data type, and may even contain other
    vectors, thus allowing data structures of arbitrary shape.</li>

  <li><b>multi-tasking capability</b>: when SVL is invoked in a windows
    environment, operations can be executed concurrently.</li>

  <li><b>performance</b>: SVL was designed to run efficiently on many
    computer architectures, including sequential processors,
    multi-processors, and parallel processors; any program written in SVL is
    parallel-ready, and can benefit from any parallelism supported by the
    host computer.</li>

  <li><b>interactive and non-interactive execution</b>: SVL may be run
    interactively at the <i>Command Line Interface</i> (CLI), but may also be
    invoked non-interactively.  </li>

  <li><b>user-extensible</b>: users can augment the standard repertory of SVL
    built-in functions with their own application-specific, user-designed
    functions.</li>

  <li><b>integrates into applications</b>: SVL supports graphical user
    interfaces, and is the key to the programmability and flexibility of
    applications of which SVL is an integral part.</li>

</ul>

<p>Next: <a href="svlfund.htm">Fundamental SVL Concepts</a></p>

<h2>See Also</h2>

<p><a href="../../tutorials/svltour.htm">SVL Tutorial</a><br>
<a href="../../fcnindex.htm">Function Index</a></p>
<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>
