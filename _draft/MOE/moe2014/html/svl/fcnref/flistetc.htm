<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--	svl/fcnref/flistetc.htm	file utilities
!!-->

<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../include/manstyle.css" />


<meta keywords>
<meta functions flist>
<meta functions ftype>
<meta functions fhash>
<meta functions fdelete>
<meta functions fmkdir>
<meta functions frmdir>

<meta functions fname>
<meta functions fabsname>
<meta functions ffullname>
<meta functions fenvname>
<meta functions ftrimname>
<meta functions fcat>

<meta functions fsize>
<meta functions fseek>
<meta functions ftell>
<meta functions fdate>
<meta functions fbase>
<meta functions fext>
<meta functions fpath>
<meta functions ftail>
<meta functions fuserpath>
<meta functions fstat>
<meta functions fstatp>
<meta functions frename>
<meta functions freplace>
<meta functions fcopy>
<meta functions fcopydel>
<meta functions fmove>
<meta functions fmovedel>
<meta functions fwriteable>

<meta functions _fmkdir>
<meta functions _frmdir>
<meta functions _frename>
<meta functions _freplace>
<meta functions _fcopy>
<meta functions _fcopydel>
<meta functions _fmove>
<meta functions _fmovedel>
<meta functions _fdelete>


<title>File Functions</title>
</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>


<h2>Syntax</h2>

<pre>
    list = <a class="fcnlink" href="#flist">flist</a> []
    list = <a class="fcnlink" href="#flist">flist</a> [ [], 'pattern' ]
    list = <a class="fcnlink" href="#flist">flist</a> 'directory'
    list = <a class="fcnlink" href="#flist">flist</a> [ 'directory', 'pattern' ]

    name = <a class="fcnlink" href="#fname">fname</a> file_number
    name = <a class="fcnlink" href="#fname">fname</a> 'filename'

    name = <a class="fcnlink" href="#fabsname">fabsname</a> file_number
    name = <a class="fcnlink" href="#fabsname">fabsname</a> 'filename'

    name = <a class="fcnlink" href="#ffullname">ffullname</a> file_number
    name = <a class="fcnlink" href="#ffullname">ffullname</a> 'filename'

    name = <a class="fcnlink" href="#fenvname">fenvname</a> file_number
    name = <a class="fcnlink" href="#fenvname">fenvname</a> 'filename'

    name = <a class="fcnlink" href="#ftrimname">ftrimname</a> ['pathname', len]


    basename_token = <a class="fcnlink" href="#fbase">fbase</a> 'filename'
    extension_token = <a class="fcnlink" href="#fext">fext</a> 'filename'

    path_token = <a class="fcnlink" href="#fpath">fpath</a> 'path_and_filename'
    name_token = <a class="fcnlink" href="#ftail">ftail</a> 'path_and_file_name'

    name_token = <a class="fcnlink"
	href="#fcat">fcat</a> ['component_1', 'component_2', ...]

    path_token = <a class="fcnlink" href="#fuserpath">fuserpath</a> 'user_name'

    type_token = <a class="fcnlink" href="#ftype">ftype</a> 'name'
    number = <a class="fcnlink" href="#fhash">fhash</a> 'name'

    size = <a class="fcnlink" href="#fsize">fsize</a> file_number
    size = <a class="fcnlink" href="#fsize">fsize</a> 'filename'

    seconds = <a class="fcnlink" href="#fdate">fdate</a> 'filename'

    file_info = <a class="fcnlink" href="#fstat">fstat</a> 'filename'
    file_info = <a class="fcnlink" href="#fstat">fstat</a> file_number
    file_info = <a class="fcnlink" href="#fstat">fstat</a> files
    file_info = <a class="fcnlink" href="#fstatp">fstatp</a> files

    <a class="fcnlink" href="#fdelete">fdelete</a> 'pathname'
    <a class="fcnlink"
	href="#fdelete">fdelete</a> [ 'pathname1', 'pathname2', ...]
    rcode = <a class="fcnlink" href="#_fdelete">_fdelete</a> 'pathname'

    <a class="fcnlink" href="#fmkdir">fmkdir</a> 'directory'
    <a class="fcnlink"
	href="#fmkdir">fmkdir</a> [ 'directory1', 'directory2', ...]
    rcode = <a class="fcnlink" href="#_fmkdir">_fmkdir</a> 'directory'

    <a class="fcnlink" href="#frmdir">frmdir</a> 'directory'
    <a class="fcnlink"
	href="#frmdir">frmdir</a> [ 'directory1', 'directory2', ...]
    rcode = <a class="fcnlink" href="#_frmdir">_frmdir</a> 'directory'

    <a class="fcnlink"
	href="#frename">frename</a> ['filename1', 'filename2']
    rcode = <a class="fcnlink"
	href="#_frename">_frename</a> ['filename1', 'filename2']

    <a class="fcnlink"
	href="#freplace">freplace</a> ['filename1', 'filename2']
    rcode = <a class="fcnlink"
	href="#_freplace">_freplace</a> ['filename1', 'filename2']

    <a class="fcnlink" href="#fcopy">fcopy</a> ['filename1', 'filename2']
    rcode = <a class="fcnlink"
	href="#_fcopy">_fcopy</a> ['filename1', 'filename2']
    <a class="fcnlink" href="#fcopydel">fcopydel</a> ['filename1', 'filename2']
    rcode = <a class="fcnlink"
	href="#_fcopydel">_fcopydel</a> ['filename1', 'filename2']

    <a class="fcnlink" href="#fmove">fmove</a> ['filename1', 'filename2']
    rcode = <a class="fcnlink"
	href="#_fmove">_fmove</a> ['filename1', 'filename2']
    <a class="fcnlink" href="#fmovedel">fmovedel</a> ['filename1', 'filename2']
    rcode = <a class="fcnlink"
	href="#_fmovedel">_fmovedel</a> ['filename1', 'filename2']

    file_number = <a class="fcnlink"
	href="#fseek">fseek</a> [ file_number, byte_position ]
    pos = <a class="fcnlink" href="#ftell">ftell</a> file_number

    <a class="fcnlink" href="#fwriteable">fwriteable</a> 'pathname'
</pre>


<p><a name="flist"></a></p>
<h2>Description</h2>


<pre>
list = <span class="fcndef">flist</span> []
list = <span class="fcndef">flist</span> [ [], 'pattern' ]
list = <span class="fcndef">flist</span> 'directory'
list = <span class="fcndef">flist</span> [ 'directory', 'pattern' ]
</pre>

<p>Returns a list of all files in the directory specified by the token
<tt>'directory'</tt> that match a given pattern.  If the directory is null
(<tt>[]</tt>), a null token (<tt>''</tt>) or missing, the current directory is
used instead.  If the pattern is null, a null token or missing, the pattern
<tt>'*'</tt> is used instead, i.e. the list of all files in the given
directory is returned.


<a name="fname"></a></p>
<p><hr noshade="noshade" />

<pre>
name = <span class="fcndef">fname</span> file_number
</pre>
<p>Returns the name token of the file specified
by its file handle <tt>file_number</tt>.</p>

<pre>
name = <span class="fcndef">fname</span> 'filename'
</pre>
<p>Returns the given pathname with any environment variables
expanded and any extraneous portions stripped away.
For example, <tt>'$MOE/sample//./mol//'</tt>  will become
<tt>'c:/moe/sample/mol'</tt>.
</p>

<p><a name="fabsname"></a></p>
<p><hr noshade="noshade" />

<pre>
name = <span class="fcndef">fabsname</span> file_number
</pre>
<p>Returns the absolute pathname of the specified file.
On Windows, the returned pathname will use lower-case letters.

<pre>
name = <span class="fcndef">fabsname</span> 'filename'
</pre>
<p>Returns the absolute from of a given pathname,
with any environment variables expanded and any extraneous
portions stripped away.  Relative pathnames are coverted to
their absolute using the path prefix of the current working directory
(or "working folder").
</p>

<p>If the given a path that contains an environment variable that does not
exist, <tt>fabsname</tt> will report an error, while <tt>_fabsname</tt>
will return an empty token.
</p>

<p><a name="ffullname"></a></p>
<p><hr noshade="noshade" />

<pre>
name = <span class="fcndef">ffullname</span> file_number
name = <span class="fcndef">ffullname</span> 'filename'
</pre>

<p>Returns a &quot;full&quot; form of an absolute pathname.  On Windows, the
pathname will NOT be converted to lowercase.  Instead, any path prefix
that refers to an existing path will be converted to the actual letter
case stored, while the letter case of the remaining suffix will be left as-is.
Additionally, extraneous path components of form <tt>'/dir/../'</tt>
are replaced with <tt>/</tt>, provided that the new pathname
refers to the same object.
</p>

<p><a name="fenvname"></a></p>
<p><hr noshade="noshade" />

<pre>
name = <span class="fcndef">fenvname</span> file_number
name = <span class="fcndef">fenvname</span> 'filename'
</pre>

<p>Returns a compact form of an absolute pathname.  If possible, the pathname
prefix will be replaced with either
<tt>'$MOE'</tt> or <tt>'$HOME'</tt> or <tt>'$TMP'</tt>.
</p>

<p><a name="ftrimname"></a></p>
<p><hr noshade="noshade" />

<pre>
name = <span class="fcndef">ftrimname</span> ['pathname', len]
</pre>

<p>Trims a given pathname to ensure that it does not exceed the given length,
<tt>len</tt>.  When possible, the function keeps the prefix and suffix
components intact. For example,

<pre>
    svl&gt; ftrimname '/prefix/aa/bb/cc/dd/suffix', 25]
    'prefix/aa/.../dd/suffix'
</pre>
</p>


<p><a name="fbase"></a></p>
<p><hr noshade="noshade" />

<pre>
basename_token = <span class="fcndef">fbase</span> 'filename'
</pre>

<p>Returns its argument without any extensions: it strips
away all characters to the right of and including the leftmost period
(.) that follows the rightmost slash (/). </p>

<pre>
    svl&gt; fbase '/u/gins.moe'
    '/u/gins'

    svl&gt; fbase '/u/gins.a.moe'
    '/u/gins.a'
</pre>

<p><a name="fext"></a></p>
<p><hr noshade="noshade" />

<pre>
extension_token = <span class="fcndef">fext</span> 'filename'
</pre>

<p>Returns the extension of its argument, i.e. all
characters to the right of the rightmost period (.) that
follows the rightmost slash (/).

<pre>
    svl&gt; fext '/u/gins.moe'
    'moe'

    svl&gt; fext '/u/gins.a.moe'
    'moe'
</pre>

<p><a name="fpath"></a></p>
<p><hr noshade="noshade" />

<pre>
path_token = <span class="fcndef">fpath</span> 'path_and_filename'
</pre>

<p>Extracts the path name from its argument, i.e. all
characters to the left of the rightmost slash (/) character.
</p>

<pre>
    svl&gt; fpath '/moe/data/molecule.moe'
    '/moe/data'
</pre>

<p>The path for a top level directory includes a trailing
slash (/) character.
</p>

<pre>
    svl&gt; fpath 'c:/tmp.txt'
    'c:/'
</pre>

<p><a name="ftail"></a></p>
<p><hr noshade="noshade" />

<pre>
name_token = <span class="fcndef">ftail</span> 'path_or_file_name'
</pre>

<p>Extracts the portion of its argument to the right of the rightmost slash
(/) character present in the argument.</p>

<pre>
    svl&gt; ftail '/moe/data/molecule.moe'
    'molecule.moe'

    svl&gt; ftail '/moe/data'
    'data'
</pre>

<p><a name="fcat"></a></p>
<p><hr noshade="noshade" />

<pre>
name_token = <span
    class="fcndef">fcat</span> ['component_1', 'component_2', ...]
</pre>

<p>Concatenates the given path component to form a valid path.</p>

<pre>
    svl&gt; fcat ['/moe', 'data', 'molecule.moe']
    '/moe/data/molecule.moe'
</pre>

<p><a name="fuserpath"></a></p>
<p><hr noshade="noshade" />

<pre>
path_token = <span class="fcndef">fuserpath</span> 'user_name'
</pre>

<p>Given a user name, returns the full path to the user's home directory.
This function call works on UNIX operating systems only.

<pre>
    svl&gt; fuserpath 'john'
    '/net/isis/u/john'
</pre>


<p><a name="ftype"></a></p>
<p><hr noshade="noshade" />


<pre>
type_token = <span class="fcndef">ftype</span> 'pathname'
</pre>

<p>Returns the type of the specified pathname:

<table>
<tr><td><tt>'file'</tt>
    <td>regular file

<tr><td><tt>'dir'</tt>
    <td>directory (folder)

<tr><td><tt>'other'</tt>
    <td>other object (or badly formed pathname)

<tr><td><tt>''</tt>
    <td>pathname does not exist.
</table>

<p><a name="fhash"></a></p>
<p><hr noshade="noshade" />


<pre>
number = <span class="fcndef">fhash</span> 'pathname'
</pre>

<p>Returns an internal identifier which can be used to detect when two path
specifications refer to the same location.  Two existing pathnames refer to
the same location if and only if <tt>fhash</tt> returns the same number
for the both pathnames.  When given a non-existent pathname, <tt>fhash</tt>
returns 0.

<i>Warning:</i> Although quite reliable in most situations, this function
depends on information supplied to it by the underlying operating system
and network software and is not (and cannot be) absolutely reliable in all
cases.

<p><a name="fsize"></a></p>
<p><hr noshade="noshade" />

<pre>
size = <span class="fcndef">fsize</span> file_number
size = <span class="fcndef">fsize</span> 'filename'
</pre>

<p>Returns the number of bytes in the file specified by its file handle or
name.

<p><a name="fdate"></a></p>
<p><hr noshade="noshade" />

<pre>
seconds = <span class="fcndef">fdate</span> 'filename'
</pre>

<p>Returns the time in seconds since January 1, 1970 of the most recent
modification of the file specified by <tt>filename</tt>.

<p><a name="fstatp"></a></p>
<p><a name="fstat"></a></p>
<p><hr noshade="noshade" />


<pre>
file_info = <span class="fcndef">fstat</span> 'filename'
file_info = <span class="fcndef">fstat</span> file_number
file_info = <span class="fcndef">fstat</span> files

file_info = <span class="fcndef">fstatp</span> files
</pre>

<p>Given a vector of file names or file handles, returns a vector describing
the specified files.  <tt>fstatp</tt> is identical to <tt>fstat</tt>
with the exception that <tt>fstatp</tt> does not evaluate <tt>file_flags</tt>
and <tt>fs_type</tt> (as described below), returning the default values
0 and null token (<tt>''</tt>), respectively.
In some situations, <tt>fstatp</tt> will execute substantially
faster than <tt>fstat</tt>.


<p>The information returned in the <tt>file_info</tt> vector
is as follows:
</p>

<p style="text-indent: 2em">
<tt>[file_type, file_size, file_flags, mtime, atime, fs_type]</tt>

<!-- DESC -->

<dir>
<table border=0 cellspacing=2 cellpadding=2>
    <tr>
    <td valign="baseline"><tt>file_type</tt>
    </td>
    <td valign="baseline">Token describing the file type.
    Possible values are <tt>'file'</tt> or <tt>'dir'.
    </td>
    </tr>

    <tr>
    <td valign="baseline"><tt>file_size</tt>
    </td>
    <td valign="baseline">The number of bytes in the file.
    </td>
    </tr>

    <tr>
    <td valign="baseline"><tt>file_flags</tt>
    </td>
    <td valign="baseline"> Binary mask (see below)
    indicating if the file is readable, writeable, executable, and/or remote.
    Individual fields of the <tt>file_flags</tt> mask can be accessed using the
    following values:

	<p>
	<blockquote>
	<table border=0 cellspacing=2 cellpadding=2>
	    <tr>
	    <td> 0x01
	    <td> File is readable.
	    <tr>
	    <td> 0x02
	    <td> File is writable.
	    <tr>
	    <td> 0x04
	    <td> File is executable.
	    <tr>
	    <td> 0x08
	    <td> File is remote.
	</table>
	</blockquote>
	</p>

	<p>
	Please note that on Windows, all readable files
	are flagged as executable.
	</p>
    </td>
    </tr>

    <tr>
    <td valign="baseline"><tt>mtime</tt>
    </td>
    <td valign="baseline">Last modification time of the file in
	seconds since January 1, 1970.
    </td>
    </tr>

    <tr>
    <td valign="baseline"><tt>atime</tt>
    </td>
    <td valign="baseline">Last access time of the file in seconds since
	January 1, 1970.
    </td>
    </tr>

    <tr>
    <td valign="baseline"><tt>fs_type</tt>
    </td>
    <td valign="baseline">Token describing the file system where
	the file resides.
    </td>
    </tr>

</table>
</dir>

<!-- ENDDESC -->

<pre>
    svl&gt; fstat ['.', '$MOE/license.dat']
    [ ['dir','file'], [0,82], [7,9], <a
    ></a>[1168285068,1145537991], [1182189911,1182180482], ['ext3','nfs'] ]
</pre>

<!-- OLD example
<pre>
    svl&gt; fstat ['.', 'moe']
    [ ['dir','file'], [0,3402], [5,5], <a
    ></a>[1168285068,1145537991], [1182189911,1182180482], ['NTFS','NTFS'] ]
</pre>
-->

<p><a name="_fdelete"></a></p>
<p><a name="fdelete"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">fdelete</span> 'pathname'
<span class="fcndef">fdelete</span> [ 'pathname1', 'pathname2', ...]
rcode = <span class="fcndef">_fdelete</span> 'pathname'
</pre>

<p>Deletes directories and files specified <tt>'pathname'</tt>.  Calling
<tt>fdelete</tt> with a null argument has no effect. Wildcards are not
permitted.

<p>For example, the following will delete two files, <tt>tmp.moe</tt> and
<tt>junk.svl</tt>, from the current directory:
<pre>
    svl&gt; fdelete ['tmp.moe', 'junk.svl']
</pre>

<p><b>Caution!</b> Deletion proceeds without a confirmation prompt. Files are
deleted from disk.

<p>Function <tt>_fdelete</tt> is identical to function <tt>fdelete</tt>, except
that it always returns a result code and on failure it will not exit with
an error.  The function returns 0 on success and non-0 on failure.
If the argument refers to a non-empty directory, the function returns 1.
Otherwise, if the specified file or directory could not be deleted, the
function returns -1.

<p><a name="_fmkdir"></a></p>
<p><a name="fmkdir"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">fmkdir</span> 'directory'
<span class="fcndef">fmkdir</span> [ 'directory1', 'directory2', ...]
rcode = <span class="fcndef">_fmkdir</span> 'directory'
</pre>

<p>
Create new directories on the filesystem.  The directories are created in
consecutive order until there are no more arguments.  By
default, directories will be created in the current directory.  Calling
<tt>fmkdir</tt> with a null argument has no effect.

<p>Function <tt>_fmkdir</tt> is identical to function <tt>fmkdir</tt>, except
that it always returns a result code and on failure it will not exit with
an error.  The function returns 0 if a new directory is created,
1 if the directory already exists, and -1 if the specified directory
does not exist and could not be created.

<p><a name="_frmdir"></a></p>
<p><a name="frmdir"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">frmdir</span> 'directory'
<span class="fcndef">frmdir</span> [ 'directory1', 'directory2', ...]
rcode = <span class="fcndef">_frmdir</span> 'directory'
</pre>

<p>
Remove the specified directories from the filesytem.  
It is an error to attempt to remove non-empty directories or files
which are not directories.  
Calling <tt>frmdir</tt> with a null argument has no effect.

<p><b>Caution!</b> Deletion proceeds without a confirmation prompt.
Directories are deleted from disk.

<p>Function <tt>_rmdir</tt> is identical to function <tt>frmdir</tt>, except
that it always returns a result code and on failure it will not exit with
an error.  The function returns 0 on success and non-0 on failure.
If the argument refers to a non-empty directory, the function returns 1.
Otherwise, if the argument is not a directory or could not be deleted,
the function returns -1.

<p><a name="_frename"></a></p>
<p><a name="frename"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">frename</span> ['filename1', 'filename2']
rcode = <span class="fcndef">_frename</span> ['filename1', 'filename2']
</pre>

<p>
Change the name of a file from <tt>'filename1'</tt> to <tt>'filename2'</tt>.
If <tt>'filename2'</tt> exists, the function will fail and leave the file
<tt>'filename2'</tt> intact.  On failure, function <tt>frename</tt> will exit
with an error.  Function <tt>_frename</tt> will return 0 on
success and non-0 on failure.  On failure, the function will return 1,
if <tt>'filename2'</tt> exists, and -1 otherwise.
</p>

<p>
<tt>frename</tt> is similar to <tt>fmove</tt> with the following
important distinctions: <tt>frename</tt> is an atomic
(uninterruptable) operation that involves no copying of
data, and therefore should be used only when
the source and destination files are in the same directory.
If the source and destination directories are different,
<tt>frename</tt> may fail whereas <tt>fmove</tt> would succeed.
</p>

<p><a name="_freplace"></a></p>
<p><a name="freplace"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">freplace</span> ['filename1', 'filename2']
rcode = <span class="fcndef">_freplace</span> ['filename1', 'filename2']
</pre>

<p>
Change the name of a file from <tt>'filename1'</tt> to <tt>'filename2'</tt>.
If <tt>'filename2'</tt> exists, the function will delete it.
On failure, function <tt>freplace</tt> will exit with an error.
Function <tt>_freplace</tt> will return 0 or 1 on success and -1 on failure.
On success, the function will return 1, if <tt>'filename2'</tt> exists,
and 0 otherwise.
</p>

<p>
<tt>freplace</tt> is similar to <tt>fmovedel</tt> with the following
important distinctions: <tt>freplace</tt> is an atomic
(uninterruptable) operation that involves no copying of
data, and therefore should be used only when
the source and destination files are in the same directory.
If the source and destination directories are different,
<tt>freplace</tt> may fail whereas <tt>fmovedel</tt> would succeed.
</p>

<p><a name="fmove"></a></p>
<p><a name="fmovedel"></a></p>
<p><a name="fcopydel"></a></p>
<p><a name="fcopy"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">fcopy</span> ['filename1', 'filename2']
<span class="fcndef">fcopydel</span> ['filename1', 'filename2']
<span class="fcndef">fmovedel</span> ['filename1', 'filename2']
<span class="fcndef">fmove</span> ['filename1', 'filename2']
</pre>

<p>
Copy file <tt>'filename1'</tt> to file <tt>'filename2'</tt>.
If <tt>'filename2'</tt> exists, the functions

<tt>fcopy</tt> and <tt>fmove</tt>

will fail, while the functions

<tt>fcopydel</tt> and <tt>fmovedel</tt>

will delete the file and replace it with <tt>'filename1'</tt>.

Functions <tt>fcopy</tt> and <tt>fcopydel</tt> copy the contents
of <tt>'filename1'</tt> to <tt>'filename2'</tt>, while leaving
the source <tt>'filename1'</tt> intact.  Function <tt>fmove</tt>
and <tt>fmovedel</tt> delete the source <tt>'filename1'</tt>
after the copy operation is completed.

If <tt>'filename1'</tt> and <tt>'filename2'</tt> refer to the
same file, the functions will fail.

On failure, the functions will exit with an error.
</p>

<p>
Functions <tt>fmove</tt> and <tt>fmovedel</tt> are similar to
<tt>frename</tt> and <tt>freplace</tt>, respectively, with the
following important distinctions:
<tt>frename</tt> and <tt>freplace</tt> are atomic
operations that involve no copying of data,
and therefore should be used only when
the source and destination files are in the same directory.
<tt>fmove</tt> and <tt>fmovedel</tt> are not atomic, but
will work even when the source and destination directory
lie in different disk partitions (in which case the contents of the source
file has to be physically copied to the destination).

<p><a name="_fmove"></a></p>
<p><a name="_fmovedel"></a></p>
<p><a name="_fcopydel"></a></p>
<p><a name="_fcopy"></a></p>

<pre>
rcode = <span class="fcndef">_fcopy</span> ['filename1', 'filename2']
rcode = <span class="fcndef">_fcopydel</span> ['filename1', 'filename2']
rcode = <span class="fcndef">_fmove</span> ['filename1', 'filename2']
rcode = <span class="fcndef">_fmovedel</span> ['filename1', 'filename2']
</pre>

When prefixed with an underscore, the functions always return a completion
code, even on failure.  The functions return -1 on failure and 0 on success,
if <tt>'filename2'</tt> does not exist.  If <tt>'filename2'</tt> does exists,
the functions return 1.  In that case, functions <tt>_fcopy</tt>
and <tt>_fmove</tt> fail and leave the file intact, while function
<tt>_fcopydel</tt> and <tt>_fmovedel</tt> delete it and replace it
with file <tt>'filename1'</tt>.

<p><a name="fseek"></a></p>
<p><hr noshade="noshade" />

<pre>
file_number = <span class="fcndef">fseek</span> [ file_number, byte_position ]
</pre>

<p>Positions the current read/write pointer in the file specified by
<tt>file_number</tt> immediately after <tt>byte_position</tt>, which is
the number of bytes from the beginning of the file. <tt>byte_position</tt>
zero is the start of the file. The file must be open.</p>

<p>In the following example, a file designated by <tt>file_num</tt>,
in a given format, is read beginning at byte 11:

<pre>
  svl&gt; fread [fseek [file_num, 10], format] 
</pre>

<p><a name="ftell"></a></p>
<p><hr noshade="noshade" />

<pre>
pos = <span class="fcndef">ftell</span> file_number
</pre>

<p>Returns the position of the current read/write pointer in 
the open file specified by <tt>file_number</tt>.</p>

<p>To read with a specified format, after skipping 3 bytes: </p>
<pre>
  svl&gt; fread [fseek [file_num, ftell file_num + 3], format]
</pre>

<p><a name="fwriteable"></a></p>
<p><hr noshade="noshade" />


<pre>
<span class="fcndef">fwriteable</span> 'pathname'
</pre>

<p>Returns 1 if the pathname refers to a writeable file and 0 otherwise.






<h2>See Also</h2>

<table cellpadding="5">
<tr>
<td colspan="3"><a href="introio.htm">I/O Functions</a>
</tr>

<tr>
<td valign="top">
   <a class="svl" href="fopenetc.htm">fclose</a><br />
   <a class="svl" href="fopenetc.htm">fflush</a><br />
   <a class="svl" href="fopenetc.htm">fopen</a><br />
   <a class="svl" href="fopenetc.htm">fopenr</a><br />
   <a class="svl" href="fopenetc.htm">fopenw</a>
</td>

<td valign="top">
   <a class="svl" href="freadetc.htm">fread</a><br />
   <a class="svl" href="freadb.htm">freadb</a><br />
   <a class="svl" href="freadetc.htm">fwrite</a><br />
   <a class="svl" href="freadb.htm">fwriteb</a>
</td>

<td valign="top">
   <a class="svl" href="time.htm">time</a><br />
   <a class="svl" href="cd.htm">cd</a><br />
   <a class="svl" href="time.htm">clock_to_timevec</a><br />
   <a class="svl" href="time.htm">clock_to_timeYMD</a>
</td>

</tr>

</table>

<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>

