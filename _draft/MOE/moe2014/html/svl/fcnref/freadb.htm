<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">


<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../include/manstyle.css" />


<meta keywords>
<meta functions freadb,fwriteb,sreadb,swriteb>

<title>Binary Read/Write Functions</title>
</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>


<h2>Syntax</h2>

<pre>
    v = <a class="fcnlink" href="#freadb">freadb</a> [filenum, 'format', n]
    v = <a class="fcnlink" href="#freadb">freadb</a> ['filename', 'format', n]
    v = <a class="fcnlink" href="#sreadb">sreadb</a> [string_data, 'format', n]

    <a class="fcnlink" href="#fwriteb">fwriteb</a> [filenum, 'format', data] 
    <a class="fcnlink" href="#fwriteb">fwriteb</a> ['filename', 'format', data]
    string_data = <a class="fcnlink" href="#swriteb">swriteb</a> ['format', data]
</pre>

<h2>Description</h2>

<p><tt>freadb</tt> and <tt>fwriteb</tt> are binary file reading and writing
functions; <tt>sreadb</tt> and <tt>swriteb</tt> read from and write to a string
instead of a file.  <tt>format</tt> is a token and indicates
the binary format to use.
The table below lists recognized binary formats:
</p>

<p>
<center>
<table class="titlebar" border="1" cellpadding="5">
  <tr>
    <th>Format</th>
    <th>Description</th>
  </tr>
  <tr>
    <td width="33%" valign="top"><tt>int4m</tt></td>
    <td width="67%" valign="top">4 byte integer MSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>int4l</tt></td>
    <td valign="top">4 byte integer LSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>int2m</tt></td>
    <td valign="top">2 byte signed integer MSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>int2l</tt></td>
    <td valign="top">2 byte signed integer LSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>int1</tt></td>
    <td valign="top">1 byte signed integer LSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>char</tt></td>
    <td valign="top">character </td>
  </tr>
  <tr>
    <td valign="top"><tt>IEEE4m</tt></td>
    <td valign="top">IEEE 4 byte float MSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>IEEE4l</tt></td>
    <td valign="top">IEEE 4 byte float LSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>IEEE8m</tt></td>
    <td valign="top">IEEE 8 byte float MSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>IEEE8l</tt></td>
    <td valign="top">IEEE 8 byte float LSB first </td>
  </tr>
  <tr>
    <td valign="top"><tt>short</tt></td>
    <td valign="top">native format signed short integer </td>
  </tr>
  <tr>
    <td valign="top"><tt>int</tt></td>
    <td valign="top">native format signed integer </td>
  </tr>
  <tr>
    <td valign="top"><tt>line</tt></td>
    <td valign="top">line of characters up to a newline</td>
  </tr>
  <tr>
    <td valign="top"><tt>long</tt></td>
    <td valign="top">native format signed long </td>
  </tr>
  <tr>
    <td valign="top"><tt>float</tt></td>
    <td valign="top">native format signed float </td>
  </tr>
  <tr>
    <td valign="top"><tt>double</tt></td>
    <td valign="top">native format signed double </td>
  </tr>
  <tr>
    <td valign="top"><tt>SVL</tt></td>
    <td valign="top">binary formatted SVL vector </td>
  </tr>
</table>
</center>

<p>Binary formats that store numbers starting with the most significant
byte (MSB) use the suffix <tt>m</tt>.

<p>
Formats that store numbers in the opposite order, starting with the least
significant byte (LSB), use the suffix <tt>l</tt>
(note: do not confuse the lower-case L with the numeral digit
<tt>1</tt>).

<p>A native format refers to the default data storage format of the computer,
which may be either MSB or LSB.  External programs that read and write
non-portable binary data are most likely to use this format.  For instance,
this format applies when C writes the memory image of a number, as in
<span class="nobr">&quot;<tt>fwrite(&amp;n,sizeof(n),...)</tt>&quot;.</span>

<p><a name="freadb"></a></p>
<p><a name="sreadb"></a></p>
<p><hr noshade="noshade" />

<p>Both <tt>freadb</tt> and <tt>sreadb</tt> read items of the specified
binary format until <tt>n</tt> items are read or there is no more data.
The successfully read items are returned in vector <tt>v</tt>; the length
of <tt>v</tt> represents the number of items successfully read.
</p>

<p>
The following commands
</p>

<pre>
    v = <span class="fcndef">freadb</span> [filenum, 'format', n]
    v = <span class="fcndef">freadb</span> ['filename', 'format', n]
</pre>

<p>read binary data from the file specified by file number
<tt>filenum</tt> or token <tt>'filename'</tt>.
If the file is specified by its name, it will be automatically
opened before the read operation and closed afterwards.

<pre>
    v = <span class="fcndef">sreadb</span> [string_data, 'format', n]
</pre>

<p>This command interprets a string as binary data.

<p><a name="fwriteb"></a></p>
<p><a name="swriteb"></a></p>
<p><hr noshade="noshade" />

<p><tt>fwriteb</tt> and <tt>swriteb</tt> write data according to the
<tt>format</tt> token. The specified format must match the type of data
otherwise an error will occur.
</p>

<p>
When <tt>'line'</tt> format is used, string data is expected, and
a line break is appended to the input string.  The newline characters
that are added are operating system-dependent.  For example,
on Linux systems, LF (line feed, <tt>'\n'</tt>) is used as the
line break, whereas on Windows
it is CR-LF (carriage return-line feed, <tt>'\r\n'</tt>).
</p>

<p>The following commands</p>

<pre>
    <span class="fcndef">fwriteb</span> [filenum, 'format', data] 
    <span class="fcndef">fwriteb</span> ['filename', 'format', data]
</pre>

<p>write binary data <tt>data</tt> to the file specified by
<tt>filenum</tt> or <tt>'filename'</tt>.
If the file is specified by its name, it will be automatically
opened before the write operation and closed afterwards.


<pre>
    string_data = <span class="fcndef">swriteb</span> ['format', data]
</pre>

<p>This command writes binary data to a string.

<p><hr noshade="noshade" />

<h4>Examples:</h4>

<ul>
<li>
Write a line of text to a file.  The line break is
appended, for example on Windows, <tt>"\r\n"</tt>.

<pre>
    svl&gt; fwriteb ['test.txt', 'line', &quot;Hello World&quot;];
</pre>

The following command reads all characters from the file.
Note the line termination characters.

<pre>
    svl&gt; freadb ['text.txt', 'char', INT_MAX];
    &quot;Hello World\r\n&quot;
</pre>

The following command reads all lines from the file.
Each line is a separate string, with line termination characters stripped.

<pre>
    svl&gt; freadb ['text.txt', 'line', INT_MAX];
    [ &quot;Hello World&quot; ]
</pre>

</li><li>

Read text from a file and open it in an 
<a href="../../moe/gui/ted.htm">SVL Text Editor</a>.

<pre>
    svl&gt; ted_SetData [ted_Open[], freadb ['test.txt', 'char', INT_MAX]];
</pre>

</li><li>

Read a file a line at a time and process it.

<pre>
    while not isnull (line = freadb [fnum, 'line', 1]) loop
	...
    endloop
</pre>

If the file has no line breaks, but lines are known to
be 80 characters, wide:

<pre>
    while length (line = freadb[ fnum, char, 80]) loop
	...
    endloop
</pre>

</li><li>

Read a line of text and split it into words based on space
boundaries.

<pre>
    svl&gt; wordsplit [first freadb [test.txt, 'line', 1], &quot; &quot];
    [ "Hello", "World" ]
</pre>

</li><li>

Write integers to a file.

<pre>
    svl&gt; fwriteb ['test1.io', 'int', igen 10] 
    svl&gt; freadb ['test1.io', 'int', 10]
    [1,2,3,4,5,6,7,8,9,10] 
</pre>


</li><li>

Write a vector of data to a file.

<pre>
    svl&gt; fwriteb ['test2.io', 'SVL', [ [1,2,3], &quot;abc&quot; ]]

    svl&gt; freadb ['test2.io', 'SVL', 2]
    [[1,2,3], &quot;abc&quot;]
</pre>

</pre>

</ul>

<h2>See Also</h2>


<p>
<table>
<tr>
<td colspan="3">
<a href="introio.htm">I/O Functions</a><br />
<a href="constants.htm">SVL Built-in Constants</a> 
</tr>
<tr>
<td valign="top">
<a class="svl" href="fopenetc.htm">fclose</a><br />
<a class="svl" href="fopenetc.htm">fflush</a><br /> 
<a class="svl" href="flistetc.htm">flist</a><br /> 
<a class="svl" href="flistetc.htm">fname</a><br /> 
<a class="svl" href="fopenetc.htm">fopen</a><br /> 
<a class="svl" href="fopenetc.htm">fopenr</a><br /> 
<a class="svl" href="fopenetc.htm">fopenw</a>
</td>
<td valign="top">
<a class="svl" href="freadetc.htm">fread</a><br /> 
<a class="svl" href="flistetc.htm">fseek</a><br />
<a class="svl" href="flistetc.htm">fsize</a><br />
<a class="svl" href="flistetc.htm">ftell</a><br /> 
<a class="svl" href="flistetc.htm">ftype</a><br />
<a class="svl" href="freadetc.htm">fwrite</a> 
</td>
</tr>
</table>

<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>


