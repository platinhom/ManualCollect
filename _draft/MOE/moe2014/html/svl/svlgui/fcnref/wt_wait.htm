<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">


<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../../include/manstyle.css" />


<meta keywords>
<meta functions WindowWait>
<meta functions WindowTrigger>

<title>Window Functions: WindowWait, WindowTrigger</title>

</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>

<h2>Syntax</h2>

<pre>
    [widget_name_value_pairs, triggername] = <a class="fcnlink" href="#WindowWait">WindowWait</a> wkey
    <a class="fcnlink" href="#WindowTrigger">WindowTrigger</a> [wkey, widget_name_value_pair]
</pre>

<p><a name="WindowWait"></a></p>
<h2>Description</h2>

<pre>
[widget_name_value_pairs, triggername] = <span class="fcndef">WindowWait</span> wkey
</pre>

<p>
Waits for a trigger event of the window specified by <tt>wkey</tt>.
</p>

<p>The task associated with the window is suspended until the value of
any of the window's widgets whose <tt>onTrigger</tt>
attribute is set to either <tt>'return'</tt> or <tt>'validate'</tt> is changed. 
If data validation is requested (<tt>onTrigger</tt> set to <tt>'validate'</tt>),
illegal data will result in an error being reported; in this case,
<tt>WindowWait</tt> will not return normally.
Otherwise, (<tt>onTrigger</tt> set to <tt>'return'</tt>, or data validation 
succeeds), <tt>WindowWait</tt> returns the values of all 
named widgets in a tagged vector of widget_name-value
pairs. The name of the widgets that triggered the 
return is also returned.</p>

<p>Here is an example of a window that is put up, then waited on for a trigger.
After a single trigger is processed, the task finishes.</p>
 
<pre>    const panel = [
        title : 'My Panel',		// shell title
        Text : [
            name : 'textfield',         // text field identifier
            title : 'Enter a number:',
            type : 'int',               // expected data type
            onTrigger : 'return'        // make Text a trigger object
        ]
    ];
 
    global function mypanel []
        local wkey = WindowCreate panel;
        WindowShow wkey;                // put up the window
        local [values, trigger] = WindowWait wkey;    // wait for trigger
 
            // when window triggers, window is taken down
            // print the trigger and its value to the SVL Commands window
 
        write ['Trigger is {}.  Value is {}.\n', trigger, values.(trigger)];
    endfunction
</pre>

<p>This next example shows how to leave a window up and 
process its triggers:</p>

<pre>    const panel = [
        title : 'My Panel',             // shell title
        name : 'mypanel',               // shell identifier
        text : ['OK','Cancel'],         // shell command buttons
        onTrigger : ['return','exit'],  // Cancel kills the window

        Text : [
            name : 'textfield',         // text field identifier
            title : 'Enter a number:',
            type : 'int',               // expected data type
            onTrigger : 'return'        // make Text a trigger object
        ]
    ];
 
    global function mypanel []
        local wkey = WindowCreate panel;
        WindowShow wkey;                // put up the window

        loop                            // infinite loop
	    local [values, trigger] = WindowWait wkey; // wait for trigger
 
                // write the trigger and its value to SVL Commands window
 
            write ['Trigger is {}.  Value is {}.\n', 
		trigger, 
		values.(trigger)
	    ];

            if trigger === 'mypanel' then   // 'OK' was pressed
                WindowDestroy wkey;         // take down the window
                return;                     // terminate the task
            endif
        endloop
    endfunction
</pre>

<p><a name="WindowTrigger"></a></p>
<p><hr noshade="noshade" />

<pre>
<span class="fcndef">WindowTrigger</span> [wkey, widget_name_value_pair]
</pre>

<p>
Sends a triggering event to the window specified by <tt>wkey</tt>.
<tt>widget_name_value_pair</tt> is a tagged vector specifying
the name and value of the widget triggering the event.
</p>

<p>
This function can be used to simulate user interaction with the panel.
Functionally similar to <tt>WindowSetData</tt> with the addition of causing
<tt>WindowWait</tt> to return.
</p>

<p>
The window must have already been created and the triggering widget must be
a valid named widget in the specified window.
</p>

<h2>See Also</h2>
<p>
<a href="wt_core.htm">Core Attributes</a><br />
<a href="../wt_intro.htm">SVL Window Toolkit</a><br />
<a href="introwt.htm">Window Toolkit Functions</a><br />


<p>
<table>
<tr>
<td valign="top">
<a class="svl" href="wt_create.htm">WindowCreate</a><br />
<a class="svl" href="wt_create.htm">WindowDestroy</a><br />
<a class="svl" href="wt_data.htm">WindowGetData</a><br />
<a class="svl" href="wt_create.htm">WindowPrompt</a>

<td valign="top">
<a class="svl" href="wt_attr.htm">WindowSetAttr</a><br />
<a class="svl" href="wt_data.htm">WindowSetData</a><br />
<a class="svl" href="wt_show.htm">WindowShow</a><br />
<a class="svl" href="wt_data.htm">WindowValues</a>
</tr>
</table>

<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>


