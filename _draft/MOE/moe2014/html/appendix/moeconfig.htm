<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!	moeconfig.htm		MOE Configuration Options chapter
!!-->

<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../include/manstyle.css" />


<title>Configuring and Customizing MOE</title>

<meta keywords custom SVL files, resource configuration, user menu />
<meta keywords MOE_SVL_LOAD, MOE_SVL_RUNPATH, command line switch />
<meta keywords menu configuration, startup, master definition, redefine menu />
<meta keywords override standard, PREPEND, APPEND, ENDMENU />
<meta keywords keyboard accelerator, accel, ReadMenuFile, submenu, menu bar />
<meta keywords popup, button bar/>

</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>

<ul>
<li><a href="#CustomSVL">Custom SVL Files</a>
<li><a href="#Menus">Menus</a>
<li><a href="#SVLPrograms">SVL Programs</a>
<li><a href="#MOESettings">MOE Settings</a>
</ul>

<p>Many aspects of the MOE interface can be configured and customized.
Many customizations are performed through the <b>Configuration&nbsp;Options</b>
panel, which uses an RC (resource configuration) file, <tt>$HOME/.moe-rc</tt>,
to save its settings.  The MOE menus and button bars are read from MOE menu
files, and can be modified using user menu files.  The standard SVL files
in the distribution can be augmented by custom user files.
There are also a variety of
<a href="../install/install.htm#RunSwitch">command line switches</a>
which can be used to customize a particular MOE session.
Furthermore, if the
<a class="svl" href="../install/install.htm#MOE_SVL_RUN">MOE_SVL_RUN</a>
or
<a class="svl" href="../install/install.htm#MOE_SVL_STARTSCRIPT">MOE_SVL_STARTSCRIPT</a>
environment variable has been set, the SVL source file or SVL script
file being pointed to will be run/executed when MOE is started.
</p>

<p><b>Note:</b>
The user resource configuration file is rewritten each time a MOE
session ends normally. Any changes made during the session are saved at
this time. This means that if you wish to edit your configuration file manually,
you must do so <b>after</b> closing MOE to
avoid losing any changes. Note that comments in a user configuration file
are not saved.</p>

<a name="CustomSVL"><h2>Custom SVL Files</h2></a>

<p>Custom SVL files can be automatically loaded on MOE start-up.
MOE automatically loads SVL files in the following order.
If the same filename is found in different directories,
the file that is loaded last is the one that takes precedence.
</p>

<ol>

<li>Standard MOE distribution source files, from <tt>$MOE/lib/svl</tt>.
</li>

<li>Patches (if any) to the standard MOE distribution, found in
<tt>$MOE/patch</tt>.
</li>

<li>Custom files from <tt>$MOE/custom</tt>.
If there is a file called <tt>moe-menus</tt> or
<tt>.moe-menus</tt> found here, it will also be read in.
</li>

<li>If the environment variable
<a class="svl" href="../install/install.htm#MOE_SVL_LOAD">MOE_SVL_LOAD</a> has
been set to a directory, then files from that directory.
</li>

<li>If the directory <tt>$HOME/svl</tt> exists, then
files from that directory.
</li>

</ol>

<p>
MOE can also be invoked with the
<a class="svl" href="../install/install.htm#-load">-load</a>
command line switch which specifies an SVL source file or directory
of SVL source files to be loaded automatically when MOE starts.
</p>

<p>The directory <tt>$MOE/custom</tt> has a subdirectory
<tt>$MOE/custom/run</tt> in which runnable custom files
can be stored.  These files will be accessible to all users of MOE.
</p>

<p>Runnable files are searched for in the following
directories in the order given.
If the same filename is found in different directories,
the first file of that filename that is encountered in the
search is the one that is used.
</p>

<ol>

<li>
The current working directory (as returned by the
<a class="svl" href="../svl/fcnref/cd.htm">cd</a> function).
</li>

<li>
<a class="svl"
href="../install/install.htm#MOE_SVL_RUNPATH">MOE_SVL_RUNPATH</a>,
if set to a valid directory.
</li>

<li>Custom directory, <tt>$MOE/custom/run</tt>.
</li>

<li>Standard MOE distribution patch directory,
<tt>$MOE/patch/run</tt>.
</li>

<li>Standard MOE distribution, <tt>$MOE/lib/svl/run</tt>.
</li>

</ol>

<p>Examples of using the custom directory can be found in:
</p>

<ul>
<li><tt>$MOE/sample/echo.svl</tt> A loadable custom file.
</li>
<li><tt>$MOE/sample/hello_world.svl</tt> A runnable custom file.
</li>
<li><tt>$MOE/sample/custom-menus</tt> A custom menu file.
</li>
</ul>

<p>Note that if MOE is invoked using the
<a class="svl" href="../install/install.htm#-std">-std</a>
command line switch, customizations will be ignored, and
only files in the patch and standard distribution directories
will be used.
</p>


<a name="Menus"><h2>Menus</h2></a>
<p>
Menus, popups and button bars in MOE are configured using menu
configuration files.  On startup, MOE first reads the master menu
configuration file located in <tt>$MOE/lib/moe-menus</tt> and then the
user menu file. User-specific menu configuration is achieved with the menu
configuration file named <tt>$HOME/moe-menus</tt> (if it exists).  On
Unix systems, the menu file can be named <tt>$HOME/.moe-menus</tt>.
If Unix is the only operating system being used then <tt>.moe-menus</tt> is
normally used as the filename.  However, if both Unix and Windows operating
systems are used then <tt>moe-menus</tt> should be used.
In this way, only one menu file need be maintained.
The user menu definitions <i>override</i> the master definitions on a
menu-by-menu basis; i.e. to redefine a particular menu, only that
menu need be specified in the user menu file.
</p>

<p>Menu files are read by MOE in the following order.  Subsequent
menus override previous menus.
</p>

<ol>

<li>MOE standard distribution menus, found in <tt>$MOE/lib</tt>.
</li>

<li><tt>$MOE/custom/moe-menus</tt>, if it exists.
</li>

<li><tt>$HOME/moe-menus</tt> if it exists, otherwise
<tt>$HOME/.moe-menus</tt> if it exists.

</li>

</ol>

<p>Note that if MOE is invoked using the
<a class="svl" href="../install/install.htm#-std">-std</a>
command line switch, customizations will be ignored, and
only the standard MOE menus will be used.
</p>

<p>
Each menu file consists of a sequence of menu specifications. Each menu
is given a name so that other menus can reference it. If a new menu
specification has the same name as a previous specification, the new menu
will override the old one.  Menus exist as items in one of the standard MOE
menu bars, button bars or popup menus.
For more complete information about menu files, please see
<a href="../moe/fcnref/menufile.htm">Menu File Format</a> or consult
<tt>$MOE/lib/moe-menus</tt> and the files it includes for detailed information
about the contents of the MOE menus.
<p>
To customize menus and buttons in the version of MOE you are running,
you must either a) create a user menu configuration file and save it in your
home directory; or b) create a menu file and load it using
<b><nobr>MOE | File | Open</nobr></b> or c) use the SVL function
<tt>ReadMenuFile</tt>.

<h3>Adding a Command to a Standard Menu</h3>
<p>
The <tt>MENU PREPEND</tt> and <tt>MENU APPEND</tt> constructs allow you
to add menu options to existing menus. <tt>PREPEND</tt> causes the new
option to be inserted at the top of the menu. <tt>APPEND</tt> puts the
new option at the bottom. <tt>ENDMENU</tt> terminates the current set of menu
modifications.
<p>
For example, to add a new entry to the Compute menu that will execute one
of MOE's sample programs (<tt>asurf.svl</tt> to plot the water accessible
surface area of a molecule):

<ol>
<li>Using a text editor, type the following text in a menu configuration
file named <tt>asurf.menu</tt>:
<pre>
  MENU PREPEND &quot;Main:Compute&quot;
    "Water Accessible Surface" exec "run '$MOE/sample/asurf.svl'"
        accel 'ctrl+alt+a'
        active atoms 
  ENDMENU
</pre>
<p>
The <tt>accel</tt> attribute allows you to invoke the Water Accessible
Surface command using the keyboard accelerator combination <tt>Ctrl+Alt+A</tt>.
The <tt>active</tt> attribute causes the menu button to be dimmed if no
atoms are present in the system.
<p>
<li>Save the file and type <tt>ReadMenuFile 'asurf.menu'</tt> at the
SVL command line.
</ol>
<p>
If, instead of <tt>asurf.menu</tt> the menu were added to
<tt>$HOME/moe-menus</tt> then this menu item would be added every time
MOE was started (unless the <tt>-std</tt> switch were used).
</ol>

<h3>Adding a Submenu to a Standard Menu</h3>
<p>
Adding new submenus to existing menu bars is very similar to adding menu
commands.  The standard menu bar names in MOE are: 
<tt>Main, SEMenuBar, dbvMenuBar, SVLTextEditor</tt>.
For example, to add a submenu <b>MyMenu</b> to the main MOE menu bar:

<ol>
<li>In <tt>$HOME/moe-menus</tt> type:
<pre>
    MENU APPEND &quot;Main&quot;
	&quot;MyMenu&quot; submenu &quot;Work on Selection&quot;
    ENDMENU

    MENU &quot;Work on Selection&quot;
	&quot;Keys&quot; exec 'Atoms[] | aSelected Atoms[]'
	       active sel_atom
	&quot;Total&quot; exec 'length (Atoms[] | aSelected Atoms[])'
	       active sel_atom
    ENDMENU
</pre>

<p>
<li>Use <tt>ReadMenuFile'$HOME/moe-menus'</tt> to load the changes.
The new menu will appear and will print its results to the SVL Commands
window.  <b>Note!</b> a new submenu <b>MyMenu</b> will appear every
time the menu file is loaded.
</ol>

<p>
Popup menus are treated as any other menus in MOE inasmuch as submenus
and options can be added to them. You cannot, however, create entirely new
(non-standard) popups. Only some windows support popups.  For example,
<pre>
    MENU APPEND &quot;SEPopupMenu&quot;
	&quot;num&quot; exec 'add rSelected Residues[]'
    ENDMENU
</pre>

<p>Popup menus that can be added to are:
<ul>
<li>MOE Window: <tt>MainPopup</tt>
<p><li>Sequence Editor: <tt>SEPopupMenu, SEChainPopupMenu, SEColumnPopupMenu,
SEResiduePopupMenu</tt>
<p><li>Database Viewer: <tt>dbvMolCellPopupMenu, dbvFieldPopupMenu,
dbvEntryPopupMenu, dbvCellPopupMenu, dbvPlotPopupMenu, dbvYAxisPopupMenu</tt>
<p><li>SVL Text Editor: <tt>SVLTextEditorPopup</tt>
</ul>

<h3>Button Bars</h3>
<p>
Adding a button to a button bar is the same as adding a menu option to
a menu. The standard button bars in MOE are: <tt>
RightButtonBar, LeftButtonBar, SERightButtonBar, SELeftButtonBar,
dbvRightButtonBar, dbvLeftButtonBar</tt>.
Note that, by default, only the right button bar appears in the MOE Window.

<p>
The <tt>PAGER</tt> construct is applicable to button bars.
Suppose you wish to create shortcuts to the atom selection and
rendering commands you use most often. In the next example, you will add
a left button bar to the MOE Window. It will contain two pages:
the first one (called SELECT) will include atom selection commands, and
the second (called RENDER) will include atom rendering commands.
<pre>
  MENU PAGER "LeftButtonBar"
    "Select"	submenu "SELECT"
    "Render"    submenu "RENDER"
  ENDMENU

  MENU "SELECT"
    "Hydrogen"          exec "aSetSelected [Atoms[], 'H'  == aElement Atoms[]]"
    "Carbon"            exec "aSetSelected [Atoms[], 'C'  == aElement Atoms[]]"
    "Nitrogen"          exec "aSetSelected [Atoms[], 'N'  == aElement Atoms[]]"
    "Oxygen"            exec "aSetSelected [Atoms[], 'O'  == aElement Atoms[]]"
    "Fluorine"          exec "aSetSelected [Atoms[], 'F'  == aElement Atoms[]]"
    "Phosphorus"        exec "aSetSelected [Atoms[], 'P'  == aElement Atoms[]]"
    "Sulfur"            exec "aSetSelected [Atoms[], 'S'  == aElement Atoms[]]"
    "Chlorine"          exec "aSetSelected [Atoms[], 'Cl' == aElement Atoms[]]"
    "LonePair"          exec "aSetSelected [Atoms[], 'LP' == aElement Atoms[]]"
  ENDMENU

  MENU "RENDER"
    "Line"              exec 'RenderLine[]'
    "Stick"             exec 'RenderStick[]'
    "Ball and Line"     exec 'RenderBallAndLine[]'
    "Ball and Stick"    exec 'RenderBallAndStick[]'
    "Space Filling"     exec 'RenderSpaceFilling[]'
  ENDMENU
</pre>

<a name="SVLPrograms"><h2>SVL Programs</h2></a>

<p>When MOE starts, a collection of SVL programs are automatically loaded.
These SVL programs form the basic tool set and interactive support for
MOE. These files reside in the directory <tt>$MOE/lib/svl</tt> and its
subdirectories.
If the environment variable <tt>MOE_SVL_LOAD</tt> exists, then its
value is interpreted as a file or a directory. The file is loaded as an SVL
module; the directory is searched for all files that match the wildcard
expression <tt>*.svl</tt>, which are loaded as well.
If the environment variable <tt>MOE_SVL_LOAD</tt> does not exist then
the files in <tt>$HOME/svl</tt> are loaded upon startup.
Files in the installation set can be overridden by copying them to
another directory and loading them automatically via the
<tt>MOE_SVL_LOAD</tt> environment variable.
<p>
For example, to automatically load the file <tt>myprogram.svl</tt> upon
MOE startup (assuming that <tt>MOE_SVL_LOAD</tt> does not exist):
<ol>
<li>Create the directory <tt>$HOME/svl</tt>.
<li>Copy <tt>myprogram.svl</tt> to <tt>$HOME/svl</tt>.
<li>Restart MOE.
</ol>

<a name="MOESettings"><h2>MOE Settings</h2> </a>

<p>
A variety of MOE configuration options can be set in the
<a href="settings.htm" ><b>Settings</b></a> menu in the header
line of the <b>MOE</b>, <b>Sequence Editor</b>, and <b>Database Viewer</b>
windows.


<h2>See Also</h2>

<a href="../moe/gui/mainwin.htm">The MOE Window</a><br>
<a href="samples.htm#JDBCViewer">JDBC Database Viewer</a><br>
<a href="../appendix/settings.htm">MOE Settings</a><br>
<a href="../appendix/viewsetup.htm">Visualization Setup</a><br>
<a href="../moe/fcnref/menufile.htm">Menu File Format</a><br>
<a href="../moe/fcnref/rc.htm">Configuration File Functions</a>


<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>
