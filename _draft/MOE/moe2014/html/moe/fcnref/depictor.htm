<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!	depictor.htm
!!-->

<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../include/manstyle.css" />


<meta keywords>
<meta functions>
<meta functions DepictionCoordinates, DepictionCoordinatesCTAB>
<meta functions Flatten3DStructure>
<meta functions Draw2DStructure, Draw2DStructureCTAB>

<title>2D Structure Depiction</title>
</head>

<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>

<h2>Syntax</h2>

<pre>
    [x, y, z] = <a class="fcnlink" href="#DepictionCoordinates">DepictionCoordinates</a> [mol, explicit]
    [x, y, z] = <a class="fcnlink" href="#DepictionCoordinatesCTAB">DepictionCoordinatesCTAB</a> [ctab, explicit]
    [x, y, z] = <a class="fcnlink" href="#Flatten3DStructure">Flatten3DStructure</a> [mol, weight]
    [grkey, xform] = <a class="fcnlink" href="#Draw2DStructure">Draw2DStructure</a> [mol, opt]
    [grkey, xform] = <a class="fcnlink" href="#Draw2DStructureCTAB">Draw2DStructureCTAB</a> [ctab, opt]
</pre>

<h2>Description</h2>

<p>The <tt>DepictionCoordinates</tt> function is capable of generating 2D
coordinates for chemical structures. The results are generally suitable for
publication-quality diagrammatic molecule representations. The layout is
performed without use of pre-existing coordinates, and only a specification of
the molecular connection table is required [Clark 2006].
</p>

<p><tt>Draw2DStructure</tt> is used to render chemical structures with 
coordinates that have been suitably arranged in two dimensions, such as by the
above function.
</p>

<p><a name="DepictionCoordinatesCTAB"></a></p><p><a name="DepictionCoordinates"></a></p><hr noshade />

<pre>
[x, y, z] = <span class="fcndef">DepictionCoordinates</span> [mol, explicit]
[x, y, z] = <span class="fcndef">DepictionCoordinatesCTAB</span> [ctab, explicit]
</pre>

<p>The following arguments are accepted:
</p>

<blockquote>
<dl>

<p><dt><tt>mol</tt>

<dd>A MOE MDB-format representation of the molecular system (see
<tt>mol_Extract</tt>). Although the input format includes atom positions, they
are not used by this function and have no influence on the depiction layout.

<p>OR:

<p><dt><tt>ctab</tt>

<dd>A CTAB representation of a molecule (see <tt>ctab_Extract</tt>).

<p><dt><tt>explicit</tt>

<dd>The layout coordinates are generated by satisfying a number of constraints
imposed only upon atoms which are marked as being explicit. After the primary
layout is complete, atoms which are not explicit are added to the remaining
interstitial gaps as an afterthought. By default, heavy atoms are considered to
be explicit and hydrogens are not, with a few exceptions, such as dihydrogen, or
hydrogen atoms attached to chiral ring bridge junctions. The <tt>explicit</tt>
mask can be provided in order to override the selection.

</dl>
</blockquote>

<p>The function returns the coordinate mapping produced by the calculation:

<blockquote>
<dl>

<p><dt><tt>[x, y, z]</tt>

<dd>2D coordinates of the molecule. Both <tt>x</tt> and <tt>y</tt> are flat
numeric vectors which map directly to the atoms of the input structure. 

<p>Note that the Z coordinate is also returned, which is generally an array of
zeros. Under some unusual circumstances, the depiction algorithm returns 3D
coordinates for certain parts of the molecule, such as for cage ring structures
which were embedded in 3D. The third dimension is used as a hint to
subsequent drawing codes. If the results from the depiction layout algorithm are
required to be strictly planar, the <tt>z</tt> value should be explicitly
cleared, using the syntax <span class="nobr"><tt>z = zero z</tt></span>.

</dl>
</blockquote>


<p>Example:

<pre>
    [x, y, z] = DepictionCoordinates [mol_Extract Chains[]];
    [x, y, z] = DepictionCoordinatesCTAB [ctab_Extract [Atoms[]]];
</pre>

<p><a name="Flatten3DStructure"></a></p><hr noshade="noshade" />

<pre>
[x, y, z] = <span class="fcndef">Flatten3DStructure</span> [mol, weight]
</pre>

<p>The <tt>Flatten3DStructure</tt> function performs a variation of the 2D depiction 
layout process for a molecule, with additional constraints formulated in order to 
produce a result which is as similar as possible to the original coordinates.
The additional constraints are balanced against the default tendency to search
for a layout which is most disperse.

<p>The parameters are the same as for <tt>DepictionCoordinates</tt>, except that
the second parameter can be used as a weighting rather than just a mask, as it
affects the relative importance of having the atoms in question resemble their 
original positions, as defined in the first parameter, <tt>mol</tt>. 

<p>The following example produces a planar embedding for a 3D molecule, 
using a weighting of 1 for the heavy atoms, and 0 for hydrogens:

<pre>
    mol = mol_Extract Atoms [];
    weight = mol(4)(MOL_ATOM_EL) <> 'H';
    [x, y, z] = Flatten3DStructure [mol, weight];
</pre>

<p><a name="Draw2DStructureCTAB"></a></p>
<p><a name="Draw2DStructure"></a></p>
<hr noshade="noshade" />

<pre>
[grkey, xform] = <span class="fcndef">Draw2DStructure</span> [mol, opt]
[grkey, xform] = <span class="fcndef">Draw2DStructureCTAB</span> [ctab, opt]
</pre>

<p>The chemical structure provided in the <tt>mol</tt> or <tt>ctab</tt>
parameter is rendered into a graphical object, which is returned. The
coordinates of the atoms in the data structure are presumed appropriate for 2D.

<p>The two versions of the function are very similar, except that the CTAB
invocation allows more control over the way in which the diagram is drawn, since
this input is analogous to popular sketch formats.
The color options use the color encoding described in
<a href="../../svl/fcnref/grfcn.htm">Flat Graphics Objects</a>.
</p>

<p>Rendering can be influenced by the <tt>opt</tt> parameter, which is a tagged
vector supporting the following fields:

<blockquote>
<dl>

<p><dt><tt>annotations</tt>
</dt>

<dd>Annotations, given as a vector of tokens, to be drawn around the atoms.
There must be one annotation supplied for each atom.
</dd>

<p><dt><tt>annotbond</tt>
</dt>

<dd>Annotations, given as a vector of tokens, to be drawn at bond
centroids.  There must be one annotation supplied for each bond.
</dd>

<p><dt><tt>annotcol</tt>
</dt>

<dd>Annotation text color.  By default, this is the same as
<tt>maincol</tt>.
</dd>

<p><dt><tt>padding</tt>
</dt>

<dd>The distance (in angstroms) to be added to each side of the molecule when
calculating the scale and offset. Default value is 1.
</dd>

<p><dt><tt>boundary</tt>
</dt>

<dd>Allows a bounding box to be specified for the rendering. The parameter is
a vector of size three: <tt>[width, height, units]</tt>, where <tt>units</tt>
should be one of <tt>'pt'</tt> or <tt>'pix'</tt>. The structure will be rendered
into the bounding box, shrinking if necessary in order to fit. If the aspect
ratio of the structure is not the same as the box, spacing will be added to
as necessary in order to center the structure. If a bounding box is not given,
the extent of the returned graphic object will be dependent on the span of the
coordinates of the input molecule.
</dd>

<p><dt><tt>defscale</tt>

<dd>Mutually exclusive with <tt>boundary</tt>. After normalizing the bond
lengths of the structure, the atom-to-graphic scaling is calculated: if a
boundary is provided, the box will be filled; otherwise if <tt>defscale</tt> is
provided, it is used as the number of graphic units per angstrom; otherwise a
default value is used for <tt>defscale</tt>.

<p><dt><tt>maxscale</tt>

<dd><tt>maxscale</tt> is useful if a boundary box was provided, as it can prevent
small structures from expanding to fit the available space. By specifying
<tt>boundary</tt> and <tt>maxscale</tt>, it is possible to produce a series of
structures which have a uniform size and scale, except when the structure is
too large to fit, in which case it will be shrunken.

<p><dt><tt>explicit</tt>

<dd>By default, the drawing algorithm decides internally which hydrogen atoms
should be drawn as explicit atoms, which should be subsumed into the label of
the parent atoms, and which should not be drawn at all. This mask can be used to
control which atoms are drawn as explicit atoms. Atoms which are marked as
not-explicit will still be folded into the label of the parent atom, if
appropriate.

<p><dt><tt>fontsize</tt>

<dd>By default, the size of the font used to label atoms is 0.5 &Aring;, which,
using the default scale-per-point, corresponds to many molecular drawing
conventions. It may be overridden using this parameter.

<p><dt><tt>linewidth</tt>

<dd>By default, the width of the lines for single, double and triple bonds is
0.03 &Aring;, which similarly corresponds to many molecular drawing conventions.
It may be overridden using this parameter.

<p><dt><tt>maincol</tt>

<dd>By default, it is assumed that the drawing is to be used on a white
background, and all of the content is drawn in black. The primary drawing color
can be overridden with this parameter, which will be used as the default color
for atoms, bonds and any other annotations.

<p><dt><tt>colorcode</tt>

<dd>This flag, which is off by default, allows the color for atoms to be
automatically assigned based on the element type.

<p><dt><tt>coloratoms</tt>

<dd>This parameter allows explicit atom colors to be specified. If given as a
scalar, the color will be used for all of the atoms. Otherwise it must be an
array of length equal to the number of atoms in the input, each color being used
for the corresponding atom.

<p><dt><tt>colorbonds</tt>

<dd>This flag, which is off by default, forces bonds to be colorized according
to the following rules:

<ul>

<p><li>Bonds between two atoms of the same color are drawn using that color;
</li></p>
<p><li>Wedge bonds use the color of the atom from which they originate;
</li></p>
<p><li>Single, double or triple bonds between atoms of different colors are
drawn in two halves, using the color of the respective parent atom.
</li></p>
</ul>

<p><dt><tt>startid</tt>

<dd>By default, atoms will be numbered according to their index in the CTAB
or mol.  With this option, however, the specified integer will be added to
the atom numbering of all atoms.  This may be useful if several sketches
are to be merged into a single diagram.  This numbering only affects the
ids in the returned graphical object (see below).

</dl>
</blockquote>

The return data consist of:

<blockquote>
<dl>

<p><dt><tt>grkey</tt>

<dd>Graphical object key, containing the rendered structure. Must be closed
using <tt>gr_destroy</tt>.  The individual primitives (i.e. lines, ovals,
text, etc.) corresponding to atoms will have ids matching the atom indices
in the
CTAB or mol, possibly modified by the <tt>startid</tt> option (see above).
Similarly, the ids of bond objects will have ids computed as

<blockquote>
2<sup>16</sup>*id<sub>from</sub> + id<sub>to</sub>
</blockquote>

where id<sub>from</sub> and id<sub>to</sub> are the ids of the atoms
on either end of the bond.  All other
primitives will have an id of 0.  The primitive ids may be useful to
determine which atom or bond was clicked on in a particular application.
</dd>

<p><dt><tt>xform</tt>

<dd>The transformation between atom coordinates in angstroms, and atom
coordinates within the space of the drawing. <tt>xform</tt> is supplied as a
vector of 4 numbers: <tt>[ox,oy,sw,sh]</tt>. The positions of the atoms within
the drawing can be derived by
<tt>(X',Y')&nbsp;=&nbsp;(X*sw+ox,&nbsp;Y*sh+oy)</tt>.

</dl>
</blockquote>

<p>Example:

<pre>
    mol = mol_Extract Chains[];
    [x, y, z] = DepictionCoordinates [mol];
    mol(4)(MOL_ATOM_X) = x;
    mol(4)(MOL_ATOM_Y) = y;
    mol(4)(MOL_ATOM_Z) = z;
    grkey = first Draw2DStructure [mol, []]; 
    
    ...
    
    gr_destroy grkey;
</pre>

<h2>Reference</h2>

<table cellpadding="5" width="100%">
<tr>
<td valign="top">[Clark&nbsp;2006]
<td valign="top">

Clark, A.M., Labute, P., Santavy, M.; <i>J. Chem. Inf. Model. 46</i>
(<b>2006</b>) 1107&ndash;1123.

</tr>
</table>

<h2>See Also</h2>

<a href="../../svl/fcnref/grfcn.htm">Flat Graphics Objects</a>
<p>
<a class="svl" href="extract.htm">mol_Extract</a><br />
<a class="svl" href="ctabfcn.htm">ctab_Extract</a>

<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>
