<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!--
!!	mdxfcn.htm		molecular dynamics function reference
!!-->

<!--
!!    MOE Online Manuals
!!    COPYRIGHT (C) 1997-2015
!!        CHEMICAL COMPUTING GROUP INC.  ALL RIGHTS RESERVED.
!!-->

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<script type="text/javascript" 
src="../../include/jsincludes_moe.js"></script>

<link rel="stylesheet" type="text/css"
href="../../include/manstyle.css" />

<title>Molecular Dynamics Trajectory File I/O</title>
<meta functions MD_Open, MD_Key, MD_Info, MD_Close, MD_Read>
<meta keywords molecular dynamics, protocol, trajectory />
</head>
<body>
<div id="MoeHeader"></div>
<noscript>
	<span class="warning">Warning: JavaScript is disabled. This page will not display correctly.</span>
	<h1 class="title">MOE Documentation</h1>
	<hr noshade="noshade" />
	<style>.LaTeX {color: #C08080;}</style>
</noscript>

<h2>Syntax</h2>

<pre>
    key    = <a class="fcnlink" href="#MD_Open">MD_Open</a>  [ root, opt ]
    key    = <a class="fcnlink" href="#MD_Open">MD_Open</a>  [ filename, opt ]
    key    = <a class="fcnlink" href="#MD_Open">MD_Open</a>  key
             <a class="fcnlink" href="#MD_Close">MD_Close</a> keys

    keys   = <a class="fcnlink" href="#MD_Key">MD_Key</a>   keys
<!--
    info   = <a class="fcnlink" href="#MD_Close">MD_Type</a> [ 'root', startTime ]
!-->
    info   = <a class="fcnlink" href="#MD_Info">MD_Info</a> key_or_filename
             <a class="fcnlink" href="#MD_Info">MD_Info</a> key_or_filename
    value  = <a class="fcnlink" href="#MD_Info">MD_Info</a> [ key_or_filename, 'pname' ]

    frames = <a class="fcnlink" href="#MD_Read">MD_Read</a>     [ key, index, opt ]
    frames = <a class="fcnlink" href="#MD_Read_t">MD_Read_t</a>   [ key, time, opt ]
    frame  = <a class="fcnlink" href="#MD_ReadNext">MD_ReadNext</a> [ key, opt ]
    frame  = <a class="fcnlink" href="#MD_ReadPrev">MD_ReadPrev</a> [ key, opt ]

    mol    = <a class="fcnlink" href="#MD_Mol">MD_Mol</a>    key
    mol    = <a class="fcnlink" href="#MD_SetMol">MD_SetMol</a> [ key, mol_or_filename ]

    index  = <a class="fcnlink" href="#MD_TimeToIndex">MD_TimeToIndex</a> [ key, time ]
    time   = <a class="fcnlink" href="#MD_IndexToTime">MD_IndexToTime</a> [ key, index ]
<!-- Moved to samples ...
    <a class="fcnlink" href="#MD_Import">MD_Animate</a> [ root, opt ]
    <a class="fcnlink" href="#MD_Import">MD_Animate</a> [ filename, opt ]
!-->
    <a class="fcnlink" href="#MD_Import">MD_Import</a>  [ mdbfilename, 'root'  , opt    ]
<!-- Deprecated???
    MD_Dump    [ key, 'dst', opt ]
!-->
</pre>

<h2>Description</h2>

<p>
These functions provide a format-agnostic interface for working with molecular
dynamics trajectories.
</p>

<p><a name="MD_Key"></a></p>
<p><a name="MD_Close"></a></p>
<p><a name="MD_Open"></a></p>
<p><hr noshade="noshade"></p>
<pre>
key  = <span class="fcndef">MD_Open</span>  [root, opt]
key  = <span class="fcndef">MD_Open</span>  [filenames, opt]
key  = <span class="fcndef">MD_Open</span>  [key, opt]
keys = <span class="fcndef">MD_Key</span>   keys
</pre>

<p>
The <tt>MD_Open</tt> function is used to open an MD file for reading.
If a <tt>root</tt> token is given, which forms the root name of a segmented trajectory, the root
is examined and an attempt is made to detect all segments of a segmented trajectory and to treat them
as a single unit.  The trajectory group is opened and a key is returned.
If a vector of filenames is given, the files will be checked for compatibility
and treated as members of a segmented trajectory.  
If a key is given, the MD file is considered &quot;re-opened&quot;.
<p>The <tt>MD_Close</tt> function is used to close a previously opened MD
file.  An <tt>MD_Close</tt> call must be issued for each <tt>MD_Open</tt> call.  For example,

<blockquote><pre>
local key = MD_Open 'filename';
...
    MD_Open key;
...
    MD_Close key;
...
MD_Close key;
</pre></blockquote>
<p>The option block is a tagged vector with the following tags:
<blockquote>
<table border="1">
<tr><td colspan=2 align=center><b>Generic</b></td></tr>
<tr><td><tt>format</tt></td><td><table>
<tr><td><tt>'auto'</tt></td><td>Auto detect trajectory format. [Default]</td></tr>
<tr><td><tt>'mdb'</tt></td><td>MDB Formatted trajectory generated by MOE.</td></tr>
<tr><td><tt>'dcd'</tt></td><td>DCD Formated trajectory such as that produced by NAMD.</td></tr>
<tr><td><tt>'mdcrd'</tt></td><td>MDCRD Formated trajectory such as that produced by AMBER. Note that AMBER NetCDF files are not currently supported.</td></tr>
<tr><td><tt>other</tt></td><td>Alternative formats may be supported through the use of a trajectory server.</td></tr>
</table></td></tr>
<tr><td><tt>mol</tt></td><td>Allows over-ride of auto-detection of the associate mol file.  The mol 
file may be specified as a mol string, moe string, or filename.</td></tr>
<tr><td><tt>forceroot</tt></td><td>boolean (1/0) will force the specified root and/or filename to be treated as a 
trajectory root specifier.</td></tr>
<!-- Only supported for trajectory server currently...
<tr><td><tt>returnAllProps</tt></td><td>boolean (1/0) specify that all available properties should be 
returned on reading a frame. [Default: 0]</td></tr>
<tr><td><tt>returnVelocity</tt></td><td>boolean (1/0) specify that velocity data should be returned on
reading a frame. [Default: 0]</td></tr>
!-->
<tr><td colspan=2 align=center><b>AMBER</b></td></tr>
<tr><td><tt>prmtop</tt></td><td>filename for parameter topology file. Overrides auto-detection.</td></tr>
</table>
</blockquote>
<p>
<p><i>See format specific XX_Open calls for format specific options.</i>
<p>
The <tt>MD_Key</tt> function tests the validity of given keys, returning
the key if it refers to a valid MD file key and zero otherwise.
<p><a name="MD_Close"></a></p>
<p><hr noshade="noshade"></p>
<pre>
MD_Close keys
</pre>
<p>
<tt>MD_Close</tt> closes a previously opened trajectory file.  The function closes all associated
 files and attempts to release all allocated resources.  Preferred style is to pair each <tt>MD_Open</tt>
 with an <tt>MD_Close</tt>.

<p><a name="MD_Info"></a></p>
<p><hr noshade="noshade"></p>
<pre>
info = <span class="fcndef">MD_Info</span> key_or_filename
       <span class="fcndef">MD_Info</span> key_or_filename
</pre>

<p>
The <tt>MD_Info</tt> function returns information related to the contents
of a MD file.  If a filename token is given, the information is
returned as though the file were already opened.  If the return value
of <tt>MD_Info</tt> is neither stored in a variable nor used in an expression
then the information will be printed to the SVL Commands Window.
The returned information is a tagged vector:

<blockquote><dl>
<dt><tt>reference:</tt> <i>token</i>
<dd>
The reference file used to begin the trajectory.
<dt><tt>signature:</tt> <i>vector</i>
<dd>
A set of data to be used for testing whether two MD files are compatible.
If <tt>info1.signature&nbsp;===&nbsp;info2.signature</tt> then the
two files have matching coordinate frames and can be read together.
This is useful, for example, for determining correspondence between
position and velocity MD files.
<p>
<dt><tt>dimensions:</tt> <i>number</i>
<dd>
The number of coordinate dimensions in the file: 3 for three-dimensional
data and 4 for four-dimensional data.
<p>
<dt><tt>timeStep:</tt> <i>number</i>
<dd>
The unit of time in the file, in picoseconds.
<p>
<dt><tt>filename:</tt> <i>token</i>
<dd>
The name of the underlying MD file (as returned by
<a class="svl" href="../../svl/fcnref/flistetc.htm#fname">fname</a>).
<p>
<dt><tt>indexStart:</tt> <i>number</i>
<dd>
The simulation step number, <i>F</i>, of the first coordinate frame
in the file.
<p>
<dt><tt>atomCount:</tt> <i>number</i>
<dd>
The total number of atoms, <i>A</i>, in the system.
<p>
<dt><tt>fixedAtomCount:</tt> <i>number</i>
<dd>
The number of fixed atoms, <i>x</i>, in the system.
<p>
<dt><tt>frameCount:</tt> <i>number</i>
<dd>
The number of coordinate frames, <i>N</i>, contained in the file.
<p>
<dt><tt>frameInterval:</tt> <i>number</i>
<dd>
The number of simulation steps, <i>f</i>, between coordinate frames.
<p>
<dt><tt>indexEnd:</tt> <i>number</i>
<dd>
The number of simulation steps, <i>S</i>, represented in the file.
<p>
<dt><tt>HasCoordinates:</tt> <i>boolean scalar (1/0)</i>
<dt><tt>HasVelocities:</tt> <i>boolean scalar (1/0)</i>
<dt><tt>HasPBC:</tt> <i>boolean scalar (1/0)</i>
<dd>
Query for the presence of specified data.
<p>
<dt><tt>title :</tt> <i>strings</i>
<dd>
A vector of strings, one for each line, of the title block of the MD
file; <tt>info.title(i)</tt> is a string containing line <tt>i</tt>.
Trailing blanks are stripped from each line.
<p>
</dl></blockquote>
<!--
<p><a name="MD_Type"></a></p>
<p><hr noshade="noshade"></p>
<b>Potentially Deprecated.  No longer needed at user level.</b>
<pre>
info = <span class="fcndef">MD_Type</span>  [ root, startTime ]
</pre>
<p> The <tt>MD_Type</tt> function is used to type and, in particular, identify
whether a trajectory is segmented.  The root can be a full filename or any truncated form 
down to the basename of the trajectory file group.  The startTime is optional and defaults to 0.  
This function is vital to processing a segemented trajectory as is generated by MOE.
<p> The returned tag vector consists of:
<blockquote><dl>
<dt><tt>root :</tt> <i>token</i>
<dd>the root name of the trajectory
<p>
<dt><tt>imoe0 :</tt> <i>file token</i>
<dd>the seed moe file
<p>
<dt><tt>tstamp :</tt> <i>vector</i>
<dd>vector of timestamps
<p>
<dt><tt>type :</tt> <i>token</i>
<dd>trajectory format
<p>
<dt><tt>fcn :</tt> <i>tag vector</i>
<dd>Format specific support functions.

</dl></blockquote>
!-->
<p><a name="MD_Read"></a></p>
<p><a name="MD_Read_t"></a></p>
<p><a name="MD_ReadNext"></a></p>
<p><a name="MD_ReadPrev"></a></p>
<p><hr noshade="noshade"></p>
<pre>
data = <span class="fcndef">MD_Read</span>     [ key, index, opt ]
data = <span class="fcndef">MD_Read_t</span>   [ key, time,  opt ]
data = <span class="fcndef">MD_ReadNext</span> [ key, opt ]
data = <span class="fcndef">MD_ReadPrev</span> [ key, opt ]
</pre>

<p>The <tt>MD_Read</tt> and <tt>MD_Read_t</tt> functions read coordinate frames from a previously
opened MD file.  The index or time is specified with a range, <tt>[start, end]</tt>, where all
frames from, and including, <tt>start</tt> to, and not including, <tt>end</tt> are returned; that is,
<tt><b>[start, end)</b></tt>.  A single value may also be used.  This is functionally equivalent to a range of <tt>
[index, index + 1]</tt>.  As time is not discrete and may not correspond directly to a frame, the next 
corresponding frame will be returned where a direct match is not available.
<p><tt>MD_ReadNext</tt> and <tt>MD_ReadPrev</tt> read single frames from the trajectory. They will
always return the next or previous frame to the current trajectory position.  The trajectory position is
reset by a call to <tt>MD_Read</tt> or <tt>MD_Read_t</tt> and will correspond to the end of the requested
range.  Successive calls to will read frames sequentially from the file until the end or the beginning of
the trajectory is reached.
<p>The return value will consist of frames.  In the case of <tt>MD_Read</tt> and <tt>MD_Read_t</tt> a 
nested vector of all requested frames will be returned.  For <tt>MD_ReadNext</tt> and <tt>MD_ReadPrev</tt>
a single frame will be returned.
<p>The contents of the frames may be specified in the option array to return a subset of the possible data.
A frame consists of:
<blockquote><table>
  <tr><td><li><tt><b>t</b></tt></td><td>the frame time value in picoseconds.</li></td></tr>
  <tr><td><li><tt><b>pos</b></tt></td><td>the [x,y,z] coordinate data as reported by <a href="atom_p.htm#aPos">aPos</a>.</li></td></tr>
  <tr><td><li><tt><b>cell</b></tt></td><td>the periodic boundary conditions. <a class="svl" href="cellfcn.htm">CellParameters</a>.</td></tr>
  <tr><td><li><tt><b>values</b></tt></td><td>a tagged vector of optional values (like energies).</td></tr>
  <tr><td><li><tt><b>vel</b></tt></td><td>the [dx,dy,dz] velocity data.</td></tr>
</table></blockquote>
An empty vector will be returned when all coordinate frames have been read. The return value
<tt>pos</tt> and <tt>vel</tt> will be a laminated vector of coordinates &ndash; length 3 for
three-dimensional data and length 4 for four-dimensional data. If the MD
file is aperiodic then <tt>cell</tt> will be <tt>['',[0,0,0],[0,0,0]]</tt>. Values are returned as
a tagged vector of available properties.
<p>
The following code can be used to read all coordinate frames in a MD file:

<blockquote><pre>
local key = MD_Open 'MD_filename';
local step, pos, cell;

while not isnull (value = MD_ReadNext key) loop
    ...
endloop

MD_Close key;
</dl></blockquote>
<p><a name="MD_Mol"></a></p>
<p><a name="MD_SetMol"></a></p>
<p><hr noshade="noshade"></p>
<pre>
mol = <span class="fcndef">MD_Mol</span>  [ key ]
mol = <span class="fcndef">MD_SetMol</span> [ key, mol ]
</pre>

<p>The <tt>MD_Mol</tt> function returns the MOL associated with the trajectory.
The mol file is generally auto-detected on <tt>MD_Open</tt>.  However, in some
instances, auto-detection is not possible. In these instances, it is possible
to use <tt>MD_SetMol</tt> to set the current molecule structure.
<p>The molecule passed to <tt>MD_SetMol</tt> may take the form of: a mol token as generated
by <a href="extract.htm">mol_Extract</a></tt>; a filename; or a vector of atom keys.  Files are loaded 
by <a href="openclo.htm" class="svl">Open</a>.

<p><a name="MD_IndexToTime"></a></p>
<p><a name="MD_TimeToIndex"></a></p>
<p><hr noshade>

<pre>
time  = <span>MD_IndexToTime</span> [key, index]
index = <span>MD_TimeToIndex</span> [key, time]
</pre>

<p>
<tt>MD_IndexToTime</tt> and <tt>MD_TimeToIndex</tt> convert between indices and time stamps.
</pre></blockquote>
<!--
<p><a name="MD_Animate"></a></p>
<p><hr noshade>

<pre>
<span>MD_Animate</span> [root, opt]
<span>MD_Animate</span> [filename, opt]
</pre>

<p><tt>MD_Animate</tt> is a convenience function which allows for rapid
visualization of a trajectory.  The molecular system is loaded into the MOE 
window and the trajectory coordinates applied at a specified interval of 
time.  By default, every frame of the trajectory is processed.
<p>Provided that the reference molecule has been detected, the minimal call
necessary to launch an animation of the specified trajectory would be:
<blockquote><pre>
MD_Animate root
</blockquote>
<p>The option block is a tagged vector supporting the following tags:
<blockquote><dl>
<dt><tt>interval:</tt> <i>integer</i>
<dd>Specifies that every n<sup>th</sup> frame should be displayed. [Default: 1]
<dt><tt>delay:</tt> <i>float</i>
<dd>The minimum time in seconds to pause between frames. [Default: 0.01]
<dt><tt>startFrame:</tt> <i>integer</i>
<dd>Begin visualization starting with this frame index. [Default: 1]
<dt><tt>endFrame:</tt> <i>integer</i>
<dd>Terminate animation on specified frame. [Default: INT_MAX]
<dt><tt>reference:</tt> <i>filename</i>
<dd>Specify the reference molecule file.  This over-rides the auto-detected
molecule.</tt></a>.
<dt><tt>format:</tt> <i>token</i>
<dd>See <a href="#MD_Open"><tt>MD_Open</tt></a>.
<dt><tt>forceroot:</tt> <i>integer</i>
<dd>See <a href="#MD_Open"><tt>MD_Open</tt></a>.

</pre></blockquote>
!-->

<h2>See Also</h2>

<a href="../../apps/md.htm">Molecular Dynamics</a><br><br>
<a class="svl" href="dcdfcn.htm">DCD</a><br>
<a class="svl" href="cellfcn.htm">CellParameters</a><br>

<noscript>
	<hr noshade="noshade" />
	<font size="2"> Copyright &copy; 1997&ndash;2015
	<a href="http://www.chemcomp.com">Chemical Computing Group Inc.</a> </font>
</noscript>
<div id="MoeFooter"></div>
</body>
</html>

